
Ultrasonic_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002736  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002736  000027ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800068  00800068  000027d2  2**0
                  ALLOC
  3 .stab         00002028  00000000  00000000  000027d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001620  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000610b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009251  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a354  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a616  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__vector_6>
      1c:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_7>
      20:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_8>
      24:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_9>
      28:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__vector_10>
      2c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 37       	cpi	r26, 0x7C	; 124
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e3       	ldi	r30, 0x36	; 54
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 2a 13 	call	0x2654	; 0x2654 <main>
      8a:	0c 94 99 13 	jmp	0x2732	; 0x2732 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer0_Init>:


/**********************************Timer 0 ****************************************************/

void Timer0_Init( Timer0Mode_type mode,Timer0Scaler_type scaler ,OC0Mode_type oc_mode)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	3f 83       	std	Y+7, r19	; 0x07
     cc0:	2e 83       	std	Y+6, r18	; 0x06
     cc2:	8e 81       	ldd	r24, Y+6	; 0x06
     cc4:	9f 81       	ldd	r25, Y+7	; 0x07
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	21 f1       	breq	.+72     	; 0xd14 <Timer0_Init+0x76>
     ccc:	2e 81       	ldd	r18, Y+6	; 0x06
     cce:	3f 81       	ldd	r19, Y+7	; 0x07
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	2c f4       	brge	.+10     	; 0xce0 <Timer0_Init+0x42>
     cd6:	8e 81       	ldd	r24, Y+6	; 0x06
     cd8:	9f 81       	ldd	r25, Y+7	; 0x07
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	61 f0       	breq	.+24     	; 0xcf6 <Timer0_Init+0x58>
     cde:	46 c0       	rjmp	.+140    	; 0xd6c <Timer0_Init+0xce>
     ce0:	2e 81       	ldd	r18, Y+6	; 0x06
     ce2:	3f 81       	ldd	r19, Y+7	; 0x07
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	21 f1       	breq	.+72     	; 0xd32 <Timer0_Init+0x94>
     cea:	8e 81       	ldd	r24, Y+6	; 0x06
     cec:	9f 81       	ldd	r25, Y+7	; 0x07
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	91 05       	cpc	r25, r1
     cf2:	71 f1       	breq	.+92     	; 0xd50 <Timer0_Init+0xb2>
     cf4:	3b c0       	rjmp	.+118    	; 0xd6c <Timer0_Init+0xce>
	{
		case TIMER0_NORMAL_MODE:
		CLEAR_BIT(TCCR0,WGM00);
     cf6:	a3 e5       	ldi	r26, 0x53	; 83
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e3 e5       	ldi	r30, 0x53	; 83
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8f 7b       	andi	r24, 0xBF	; 191
     d02:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
     d04:	a3 e5       	ldi	r26, 0x53	; 83
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e3 e5       	ldi	r30, 0x53	; 83
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	87 7f       	andi	r24, 0xF7	; 247
     d10:	8c 93       	st	X, r24
     d12:	2c c0       	rjmp	.+88     	; 0xd6c <Timer0_Init+0xce>
		break;
		case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
     d14:	a3 e5       	ldi	r26, 0x53	; 83
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e3 e5       	ldi	r30, 0x53	; 83
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 64       	ori	r24, 0x40	; 64
     d20:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
     d22:	a3 e5       	ldi	r26, 0x53	; 83
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e3 e5       	ldi	r30, 0x53	; 83
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	87 7f       	andi	r24, 0xF7	; 247
     d2e:	8c 93       	st	X, r24
     d30:	1d c0       	rjmp	.+58     	; 0xd6c <Timer0_Init+0xce>
		break;
		case TIMER0_CTC_MODE:
		CLEAR_BIT(TCCR0,WGM00);
     d32:	a3 e5       	ldi	r26, 0x53	; 83
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e3 e5       	ldi	r30, 0x53	; 83
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7b       	andi	r24, 0xBF	; 191
     d3e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
     d40:	a3 e5       	ldi	r26, 0x53	; 83
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e3 e5       	ldi	r30, 0x53	; 83
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 60       	ori	r24, 0x08	; 8
     d4c:	8c 93       	st	X, r24
     d4e:	0e c0       	rjmp	.+28     	; 0xd6c <Timer0_Init+0xce>
		break;
		case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,WGM00);
     d50:	a3 e5       	ldi	r26, 0x53	; 83
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e3 e5       	ldi	r30, 0x53	; 83
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 64       	ori	r24, 0x40	; 64
     d5c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
     d5e:	a3 e5       	ldi	r26, 0x53	; 83
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e3 e5       	ldi	r30, 0x53	; 83
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	88 60       	ori	r24, 0x08	; 8
     d6a:	8c 93       	st	X, r24
		break;
	}

	/* these Two Lines to adjust the clock Prescaler */
	TCCR0&=0XF8;
     d6c:	a3 e5       	ldi	r26, 0x53	; 83
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e3 e5       	ldi	r30, 0x53	; 83
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 7f       	andi	r24, 0xF8	; 248
     d78:	8c 93       	st	X, r24
	TCCR0|=scaler;
     d7a:	a3 e5       	ldi	r26, 0x53	; 83
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e3 e5       	ldi	r30, 0x53	; 83
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	90 81       	ld	r25, Z
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	89 2b       	or	r24, r25
     d88:	8c 93       	st	X, r24

	switch (oc_mode)
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	3d 83       	std	Y+5, r19	; 0x05
     d92:	2c 83       	std	Y+4, r18	; 0x04
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	9d 81       	ldd	r25, Y+5	; 0x05
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	91 05       	cpc	r25, r1
     d9c:	21 f1       	breq	.+72     	; 0xde6 <Timer0_Init+0x148>
     d9e:	2c 81       	ldd	r18, Y+4	; 0x04
     da0:	3d 81       	ldd	r19, Y+5	; 0x05
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	2c f4       	brge	.+10     	; 0xdb2 <Timer0_Init+0x114>
     da8:	8c 81       	ldd	r24, Y+4	; 0x04
     daa:	9d 81       	ldd	r25, Y+5	; 0x05
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	61 f0       	breq	.+24     	; 0xdc8 <Timer0_Init+0x12a>
     db0:	46 c0       	rjmp	.+140    	; 0xe3e <Timer0_Init+0x1a0>
     db2:	2c 81       	ldd	r18, Y+4	; 0x04
     db4:	3d 81       	ldd	r19, Y+5	; 0x05
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	21 f1       	breq	.+72     	; 0xe04 <Timer0_Init+0x166>
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	91 05       	cpc	r25, r1
     dc4:	71 f1       	breq	.+92     	; 0xe22 <Timer0_Init+0x184>
     dc6:	3b c0       	rjmp	.+118    	; 0xe3e <Timer0_Init+0x1a0>
	{
		case OCO_DISCONNECTED:
		CLEAR_BIT(TCCR0,COM00);
     dc8:	a3 e5       	ldi	r26, 0x53	; 83
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e3 e5       	ldi	r30, 0x53	; 83
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 7e       	andi	r24, 0xEF	; 239
     dd4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);
     dd6:	a3 e5       	ldi	r26, 0x53	; 83
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e3 e5       	ldi	r30, 0x53	; 83
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 7d       	andi	r24, 0xDF	; 223
     de2:	8c 93       	st	X, r24
     de4:	2c c0       	rjmp	.+88     	; 0xe3e <Timer0_Init+0x1a0>
		break;
		case OCO_TOGGLE:
		SET_BIT(TCCR0,COM00);
     de6:	a3 e5       	ldi	r26, 0x53	; 83
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e3 e5       	ldi	r30, 0x53	; 83
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 61       	ori	r24, 0x10	; 16
     df2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);
     df4:	a3 e5       	ldi	r26, 0x53	; 83
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e3 e5       	ldi	r30, 0x53	; 83
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 7d       	andi	r24, 0xDF	; 223
     e00:	8c 93       	st	X, r24
     e02:	1d c0       	rjmp	.+58     	; 0xe3e <Timer0_Init+0x1a0>
		break;
		case OCO_NON_INVERTING:
		CLEAR_BIT(TCCR0,COM00);
     e04:	a3 e5       	ldi	r26, 0x53	; 83
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e3 e5       	ldi	r30, 0x53	; 83
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 7e       	andi	r24, 0xEF	; 239
     e10:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
     e12:	a3 e5       	ldi	r26, 0x53	; 83
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e3 e5       	ldi	r30, 0x53	; 83
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 62       	ori	r24, 0x20	; 32
     e1e:	8c 93       	st	X, r24
     e20:	0e c0       	rjmp	.+28     	; 0xe3e <Timer0_Init+0x1a0>
		break;
		case OCO_INVERTING:
		SET_BIT(TCCR0,COM00);
     e22:	a3 e5       	ldi	r26, 0x53	; 83
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e3 e5       	ldi	r30, 0x53	; 83
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 61       	ori	r24, 0x10	; 16
     e2e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
     e30:	a3 e5       	ldi	r26, 0x53	; 83
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e3 e5       	ldi	r30, 0x53	; 83
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 62       	ori	r24, 0x20	; 32
     e3c:	8c 93       	st	X, r24
		break;
	}
	

}
     e3e:	27 96       	adiw	r28, 0x07	; 7
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Timer0_Start>:

void Timer0_Start(Timer0Scaler_type scaler)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	89 83       	std	Y+1, r24	; 0x01
	TCCR0&=0XF8;
     e5c:	a3 e5       	ldi	r26, 0x53	; 83
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e3 e5       	ldi	r30, 0x53	; 83
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 7f       	andi	r24, 0xF8	; 248
     e68:	8c 93       	st	X, r24
	TCCR0|=scaler;
     e6a:	a3 e5       	ldi	r26, 0x53	; 83
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e3 e5       	ldi	r30, 0x53	; 83
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	90 81       	ld	r25, Z
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	89 2b       	or	r24, r25
     e78:	8c 93       	st	X, r24
}
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <Timer0_OV_InterruptEnable>:
void Timer0_OV_InterruptEnable(void)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
     e8a:	a9 e5       	ldi	r26, 0x59	; 89
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e9 e5       	ldi	r30, 0x59	; 89
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	81 60       	ori	r24, 0x01	; 1
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE0);
     ea6:	a9 e5       	ldi	r26, 0x59	; 89
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e9 e5       	ldi	r30, 0x59	; 89
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
     ec2:	a9 e5       	ldi	r26, 0x59	; 89
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e9 e5       	ldi	r30, 0x59	; 89
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	8c 93       	st	X, r24
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE0);
     ede:	a9 e5       	ldi	r26, 0x59	; 89
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e9 e5       	ldi	r30, 0x59	; 89
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8d 7f       	andi	r24, 0xFD	; 253
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <Timer0_OVF_SetCallBack>:

/***********************************/
//;)

void Timer0_OVF_SetCallBack(void(*LocalFptr)(void))
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <Timer0_OVF_SetCallBack+0x6>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = LocalFptr;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	90 93 71 00 	sts	0x0071, r25
     f08:	80 93 70 00 	sts	0x0070, r24
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <Timer0_OC0_SetCallBack>:
void Timer0_OC0_SetCallBack(void(*LocalFptr)(void))
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <Timer0_OC0_SetCallBack+0x6>
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OC0_Fptr = LocalFptr;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	90 93 73 00 	sts	0x0073, r25
     f2c:	80 93 72 00 	sts	0x0072, r24
}
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <__vector_11>:


/***********************************/

ISR(TIMER0_OVF_vect)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULLPTR)
     f64:	80 91 70 00 	lds	r24, 0x0070
     f68:	90 91 71 00 	lds	r25, 0x0071
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	29 f0       	breq	.+10     	; 0xf7a <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
     f70:	e0 91 70 00 	lds	r30, 0x0070
     f74:	f0 91 71 00 	lds	r31, 0x0071
     f78:	09 95       	icall
	}
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	0f 90       	pop	r0
     f9c:	1f 90       	pop	r1
     f9e:	18 95       	reti

00000fa0 <__vector_10>:
/**************************/
ISR(TIMER0_COMP_vect)
{
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	11 24       	eor	r1, r1
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OC0_Fptr != NULLPTR)
     fca:	80 91 72 00 	lds	r24, 0x0072
     fce:	90 91 73 00 	lds	r25, 0x0073
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	29 f0       	breq	.+10     	; 0xfe0 <__vector_10+0x40>
	{
		Timer0_OC0_Fptr();
     fd6:	e0 91 72 00 	lds	r30, 0x0072
     fda:	f0 91 73 00 	lds	r31, 0x0073
     fde:	09 95       	icall
	}
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	7f 91       	pop	r23
     ff2:	6f 91       	pop	r22
     ff4:	5f 91       	pop	r21
     ff6:	4f 91       	pop	r20
     ff8:	3f 91       	pop	r19
     ffa:	2f 91       	pop	r18
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <Timer1_Init>:
/*************************************************TIMER 1 **************************************************/


void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler,OC1A_Mode_type oc1a_mode,OC1B_Mode_type oc1b_mode)

{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	2a 97       	sbiw	r28, 0x0a	; 10
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6a 83       	std	Y+2, r22	; 0x02
    101e:	4b 83       	std	Y+3, r20	; 0x03
    1020:	2c 83       	std	Y+4, r18	; 0x04
	switch (mode)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3a 87       	std	Y+10, r19	; 0x0a
    102a:	29 87       	std	Y+9, r18	; 0x09
    102c:	89 85       	ldd	r24, Y+9	; 0x09
    102e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	91 05       	cpc	r25, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <Timer1_Init+0x32>
    1036:	56 c0       	rjmp	.+172    	; 0x10e4 <Timer1_Init+0xde>
    1038:	29 85       	ldd	r18, Y+9	; 0x09
    103a:	3a 85       	ldd	r19, Y+10	; 0x0a
    103c:	23 30       	cpi	r18, 0x03	; 3
    103e:	31 05       	cpc	r19, r1
    1040:	54 f4       	brge	.+20     	; 0x1056 <Timer1_Init+0x50>
    1042:	89 85       	ldd	r24, Y+9	; 0x09
    1044:	9a 85       	ldd	r25, Y+10	; 0x0a
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	99 f0       	breq	.+38     	; 0x1070 <Timer1_Init+0x6a>
    104a:	29 85       	ldd	r18, Y+9	; 0x09
    104c:	3a 85       	ldd	r19, Y+10	; 0x0a
    104e:	21 30       	cpi	r18, 0x01	; 1
    1050:	31 05       	cpc	r19, r1
    1052:	59 f1       	breq	.+86     	; 0x10aa <Timer1_Init+0xa4>
    1054:	9d c0       	rjmp	.+314    	; 0x1190 <Timer1_Init+0x18a>
    1056:	89 85       	ldd	r24, Y+9	; 0x09
    1058:	9a 85       	ldd	r25, Y+10	; 0x0a
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <Timer1_Init+0x5c>
    1060:	5e c0       	rjmp	.+188    	; 0x111e <Timer1_Init+0x118>
    1062:	29 85       	ldd	r18, Y+9	; 0x09
    1064:	3a 85       	ldd	r19, Y+10	; 0x0a
    1066:	24 30       	cpi	r18, 0x04	; 4
    1068:	31 05       	cpc	r19, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <Timer1_Init+0x68>
    106c:	75 c0       	rjmp	.+234    	; 0x1158 <Timer1_Init+0x152>
    106e:	90 c0       	rjmp	.+288    	; 0x1190 <Timer1_Init+0x18a>
	{
		case TIMER1_NORMAL_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    1070:	af e4       	ldi	r26, 0x4F	; 79
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ef e4       	ldi	r30, 0x4F	; 79
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8e 7f       	andi	r24, 0xFE	; 254
    107c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    107e:	af e4       	ldi	r26, 0x4F	; 79
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ef e4       	ldi	r30, 0x4F	; 79
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8d 7f       	andi	r24, 0xFD	; 253
    108a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    108c:	ae e4       	ldi	r26, 0x4E	; 78
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ee e4       	ldi	r30, 0x4E	; 78
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	87 7f       	andi	r24, 0xF7	; 247
    1098:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    109a:	ae e4       	ldi	r26, 0x4E	; 78
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ee e4       	ldi	r30, 0x4E	; 78
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 7e       	andi	r24, 0xEF	; 239
    10a6:	8c 93       	st	X, r24
    10a8:	73 c0       	rjmp	.+230    	; 0x1190 <Timer1_Init+0x18a>
		break;
		case TIMER1_CTC_ICR_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    10aa:	af e4       	ldi	r26, 0x4F	; 79
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ef e4       	ldi	r30, 0x4F	; 79
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8e 7f       	andi	r24, 0xFE	; 254
    10b6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    10b8:	af e4       	ldi	r26, 0x4F	; 79
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	ef e4       	ldi	r30, 0x4F	; 79
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8d 7f       	andi	r24, 0xFD	; 253
    10c4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    10c6:	ae e4       	ldi	r26, 0x4E	; 78
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ee e4       	ldi	r30, 0x4E	; 78
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	88 60       	ori	r24, 0x08	; 8
    10d2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    10d4:	ae e4       	ldi	r26, 0x4E	; 78
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ee e4       	ldi	r30, 0x4E	; 78
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 61       	ori	r24, 0x10	; 16
    10e0:	8c 93       	st	X, r24
    10e2:	56 c0       	rjmp	.+172    	; 0x1190 <Timer1_Init+0x18a>
		break;
		
		case TIMER1_CTC_OCRA_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    10e4:	af e4       	ldi	r26, 0x4F	; 79
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ef e4       	ldi	r30, 0x4F	; 79
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8e 7f       	andi	r24, 0xFE	; 254
    10f0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    10f2:	af e4       	ldi	r26, 0x4F	; 79
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ef e4       	ldi	r30, 0x4F	; 79
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8d 7f       	andi	r24, 0xFD	; 253
    10fe:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1100:	ae e4       	ldi	r26, 0x4E	; 78
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ee e4       	ldi	r30, 0x4E	; 78
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 60       	ori	r24, 0x08	; 8
    110c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    110e:	ae e4       	ldi	r26, 0x4E	; 78
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ee e4       	ldi	r30, 0x4E	; 78
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 7e       	andi	r24, 0xEF	; 239
    111a:	8c 93       	st	X, r24
    111c:	39 c0       	rjmp	.+114    	; 0x1190 <Timer1_Init+0x18a>
		break;
		
		case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    111e:	af e4       	ldi	r26, 0x4F	; 79
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	ef e4       	ldi	r30, 0x4F	; 79
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8e 7f       	andi	r24, 0xFE	; 254
    112a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    112c:	af e4       	ldi	r26, 0x4F	; 79
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ef e4       	ldi	r30, 0x4F	; 79
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    113a:	ae e4       	ldi	r26, 0x4E	; 78
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ee e4       	ldi	r30, 0x4E	; 78
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	88 60       	ori	r24, 0x08	; 8
    1146:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1148:	ae e4       	ldi	r26, 0x4E	; 78
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ee e4       	ldi	r30, 0x4E	; 78
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 61       	ori	r24, 0x10	; 16
    1154:	8c 93       	st	X, r24
    1156:	1c c0       	rjmp	.+56     	; 0x1190 <Timer1_Init+0x18a>
		break;
		
		case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
    1158:	af e4       	ldi	r26, 0x4F	; 79
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ef e4       	ldi	r30, 0x4F	; 79
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    1166:	af e4       	ldi	r26, 0x4F	; 79
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ef e4       	ldi	r30, 0x4F	; 79
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	82 60       	ori	r24, 0x02	; 2
    1172:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1174:	ae e4       	ldi	r26, 0x4E	; 78
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ee e4       	ldi	r30, 0x4E	; 78
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	88 60       	ori	r24, 0x08	; 8
    1180:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1182:	ae e4       	ldi	r26, 0x4E	; 78
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ee e4       	ldi	r30, 0x4E	; 78
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 61       	ori	r24, 0x10	; 16
    118e:	8c 93       	st	X, r24
		break;
	}
	switch (oc1a_mode)
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	38 87       	std	Y+8, r19	; 0x08
    1198:	2f 83       	std	Y+7, r18	; 0x07
    119a:	8f 81       	ldd	r24, Y+7	; 0x07
    119c:	98 85       	ldd	r25, Y+8	; 0x08
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	21 f1       	breq	.+72     	; 0x11ec <Timer1_Init+0x1e6>
    11a4:	2f 81       	ldd	r18, Y+7	; 0x07
    11a6:	38 85       	ldd	r19, Y+8	; 0x08
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	2c f4       	brge	.+10     	; 0x11b8 <Timer1_Init+0x1b2>
    11ae:	8f 81       	ldd	r24, Y+7	; 0x07
    11b0:	98 85       	ldd	r25, Y+8	; 0x08
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	61 f0       	breq	.+24     	; 0x11ce <Timer1_Init+0x1c8>
    11b6:	46 c0       	rjmp	.+140    	; 0x1244 <Timer1_Init+0x23e>
    11b8:	2f 81       	ldd	r18, Y+7	; 0x07
    11ba:	38 85       	ldd	r19, Y+8	; 0x08
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	21 f1       	breq	.+72     	; 0x120a <Timer1_Init+0x204>
    11c2:	8f 81       	ldd	r24, Y+7	; 0x07
    11c4:	98 85       	ldd	r25, Y+8	; 0x08
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	71 f1       	breq	.+92     	; 0x1228 <Timer1_Init+0x222>
    11cc:	3b c0       	rjmp	.+118    	; 0x1244 <Timer1_Init+0x23e>
	{
		case OCRA_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1A0);
    11ce:	af e4       	ldi	r26, 0x4F	; 79
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ef e4       	ldi	r30, 0x4F	; 79
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7b       	andi	r24, 0xBF	; 191
    11da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    11dc:	af e4       	ldi	r26, 0x4F	; 79
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ef e4       	ldi	r30, 0x4F	; 79
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 77       	andi	r24, 0x7F	; 127
    11e8:	8c 93       	st	X, r24
    11ea:	2c c0       	rjmp	.+88     	; 0x1244 <Timer1_Init+0x23e>
		break;
		case OCRA_TOGGLE:
		SET_BIT(TCCR1A,COM1A0);
    11ec:	af e4       	ldi	r26, 0x4F	; 79
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	ef e4       	ldi	r30, 0x4F	; 79
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 64       	ori	r24, 0x40	; 64
    11f8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    11fa:	af e4       	ldi	r26, 0x4F	; 79
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ef e4       	ldi	r30, 0x4F	; 79
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8f 77       	andi	r24, 0x7F	; 127
    1206:	8c 93       	st	X, r24
    1208:	1d c0       	rjmp	.+58     	; 0x1244 <Timer1_Init+0x23e>
		break;
		case OCRA_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1A0);
    120a:	af e4       	ldi	r26, 0x4F	; 79
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ef e4       	ldi	r30, 0x4F	; 79
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	8f 7b       	andi	r24, 0xBF	; 191
    1216:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1218:	af e4       	ldi	r26, 0x4F	; 79
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ef e4       	ldi	r30, 0x4F	; 79
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 68       	ori	r24, 0x80	; 128
    1224:	8c 93       	st	X, r24
    1226:	0e c0       	rjmp	.+28     	; 0x1244 <Timer1_Init+0x23e>
		break;
		case OCRA_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    1228:	af e4       	ldi	r26, 0x4F	; 79
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ef e4       	ldi	r30, 0x4F	; 79
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1236:	af e4       	ldi	r26, 0x4F	; 79
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ef e4       	ldi	r30, 0x4F	; 79
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 68       	ori	r24, 0x80	; 128
    1242:	8c 93       	st	X, r24
		break;
	}
	switch (oc1b_mode)
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3e 83       	std	Y+6, r19	; 0x06
    124c:	2d 83       	std	Y+5, r18	; 0x05
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	21 f1       	breq	.+72     	; 0x12a0 <Timer1_Init+0x29a>
    1258:	2d 81       	ldd	r18, Y+5	; 0x05
    125a:	3e 81       	ldd	r19, Y+6	; 0x06
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <Timer1_Init+0x266>
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <Timer1_Init+0x27c>
    126a:	46 c0       	rjmp	.+140    	; 0x12f8 <Timer1_Init+0x2f2>
    126c:	2d 81       	ldd	r18, Y+5	; 0x05
    126e:	3e 81       	ldd	r19, Y+6	; 0x06
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	21 f1       	breq	.+72     	; 0x12be <Timer1_Init+0x2b8>
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	71 f1       	breq	.+92     	; 0x12dc <Timer1_Init+0x2d6>
    1280:	3b c0       	rjmp	.+118    	; 0x12f8 <Timer1_Init+0x2f2>
	{
		case OCRB_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1B0);
    1282:	af e4       	ldi	r26, 0x4F	; 79
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ef e4       	ldi	r30, 0x4F	; 79
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8f 7e       	andi	r24, 0xEF	; 239
    128e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    1290:	af e4       	ldi	r26, 0x4F	; 79
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ef e4       	ldi	r30, 0x4F	; 79
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8f 7d       	andi	r24, 0xDF	; 223
    129c:	8c 93       	st	X, r24
    129e:	2c c0       	rjmp	.+88     	; 0x12f8 <Timer1_Init+0x2f2>
		break;
		case OCRB_TOGGLE:
		SET_BIT(TCCR1A,COM1B0);
    12a0:	af e4       	ldi	r26, 0x4F	; 79
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ef e4       	ldi	r30, 0x4F	; 79
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 61       	ori	r24, 0x10	; 16
    12ac:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    12ae:	af e4       	ldi	r26, 0x4F	; 79
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ef e4       	ldi	r30, 0x4F	; 79
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7d       	andi	r24, 0xDF	; 223
    12ba:	8c 93       	st	X, r24
    12bc:	1d c0       	rjmp	.+58     	; 0x12f8 <Timer1_Init+0x2f2>
		break;
		case OCRB_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1B0);
    12be:	af e4       	ldi	r26, 0x4F	; 79
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ef e4       	ldi	r30, 0x4F	; 79
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 7e       	andi	r24, 0xEF	; 239
    12ca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    12cc:	af e4       	ldi	r26, 0x4F	; 79
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ef e4       	ldi	r30, 0x4F	; 79
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	80 62       	ori	r24, 0x20	; 32
    12d8:	8c 93       	st	X, r24
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <Timer1_Init+0x2f2>
		break;
		case OCRB_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    12dc:	af e4       	ldi	r26, 0x4F	; 79
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ef e4       	ldi	r30, 0x4F	; 79
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 61       	ori	r24, 0x10	; 16
    12e8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    12ea:	af e4       	ldi	r26, 0x4F	; 79
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ef e4       	ldi	r30, 0x4F	; 79
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 62       	ori	r24, 0x20	; 32
    12f6:	8c 93       	st	X, r24
		break;
	}
	
	
	TCCR1B&=0XF8;
    12f8:	ae e4       	ldi	r26, 0x4E	; 78
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ee e4       	ldi	r30, 0x4E	; 78
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	88 7f       	andi	r24, 0xF8	; 248
    1304:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    1306:	ae e4       	ldi	r26, 0x4E	; 78
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ee e4       	ldi	r30, 0x4E	; 78
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	90 81       	ld	r25, Z
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	89 2b       	or	r24, r25
    1314:	8c 93       	st	X, r24

}
    1316:	2a 96       	adiw	r28, 0x0a	; 10
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	0f 92       	push	r0
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	88 23       	and	r24, r24
    1338:	41 f4       	brne	.+16     	; 0x134a <Timer1_InputCaptureEdge+0x22>
	SET_BIT(TCCR1B,ICES1);
    133a:	ae e4       	ldi	r26, 0x4E	; 78
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ee e4       	ldi	r30, 0x4E	; 78
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	80 64       	ori	r24, 0x40	; 64
    1346:	8c 93       	st	X, r24
    1348:	0a c0       	rjmp	.+20     	; 0x135e <Timer1_InputCaptureEdge+0x36>
	
	else if(edge==FALLING)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	39 f4       	brne	.+14     	; 0x135e <Timer1_InputCaptureEdge+0x36>
	CLEAR_BIT(TCCR1B,ICES1);
    1350:	ae e4       	ldi	r26, 0x4E	; 78
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ee e4       	ldi	r30, 0x4E	; 78
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 7b       	andi	r24, 0xBF	; 191
    135c:	8c 93       	st	X, r24

}
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <Timer1_ICU_InterruptEnable>:
/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    136e:	a9 e5       	ldi	r26, 0x59	; 89
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e9 e5       	ldi	r30, 0x59	; 89
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 62       	ori	r24, 0x20	; 32
    137a:	8c 93       	st	X, r24
}
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TICIE1);
    138a:	a9 e5       	ldi	r26, 0x59	; 89
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e9 e5       	ldi	r30, 0x59	; 89
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 7d       	andi	r24, 0xDF	; 223
    1396:	8c 93       	st	X, r24
}
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    13a6:	a9 e5       	ldi	r26, 0x59	; 89
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e9 e5       	ldi	r30, 0x59	; 89
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	84 60       	ori	r24, 0x04	; 4
    13b2:	8c 93       	st	X, r24
}
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE1);
    13c2:	a9 e5       	ldi	r26, 0x59	; 89
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e9 e5       	ldi	r30, 0x59	; 89
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8b 7f       	andi	r24, 0xFB	; 251
    13ce:	8c 93       	st	X, r24
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    13de:	a9 e5       	ldi	r26, 0x59	; 89
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 e5       	ldi	r30, 0x59	; 89
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 61       	ori	r24, 0x10	; 16
    13ea:	8c 93       	st	X, r24
}
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1A);
    13fa:	a9 e5       	ldi	r26, 0x59	; 89
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e9 e5       	ldi	r30, 0x59	; 89
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8f 7e       	andi	r24, 0xEF	; 239
    1406:	8c 93       	st	X, r24
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    1416:	a9 e5       	ldi	r26, 0x59	; 89
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e9 e5       	ldi	r30, 0x59	; 89
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	88 60       	ori	r24, 0x08	; 8
    1422:	8c 93       	st	X, r24
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1B);
    1432:	a9 e5       	ldi	r26, 0x59	; 89
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e9 e5       	ldi	r30, 0x59	; 89
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	87 7f       	andi	r24, 0xF7	; 247
    143e:	8c 93       	st	X, r24
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <Timer1_OVF_SetCallBack+0x6>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	90 93 69 00 	sts	0x0069, r25
    145c:	80 93 68 00 	sts	0x0068, r24
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <Timer1_OCA_SetCallBack+0x6>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	90 93 6b 00 	sts	0x006B, r25
    1480:	80 93 6a 00 	sts	0x006A, r24
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <Timer1_OCB_SetCallBack+0x6>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	90 93 6d 00 	sts	0x006D, r25
    14a4:	80 93 6c 00 	sts	0x006C, r24
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <Timer1_ICU_SetCallBack+0x6>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	90 93 6f 00 	sts	0x006F, r25
    14c8:	80 93 6e 00 	sts	0x006E, r24
}
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULLPTR)
    1500:	80 91 68 00 	lds	r24, 0x0068
    1504:	90 91 69 00 	lds	r25, 0x0069
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	29 f0       	breq	.+10     	; 0x1516 <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    150c:	e0 91 68 00 	lds	r30, 0x0068
    1510:	f0 91 69 00 	lds	r31, 0x0069
    1514:	09 95       	icall
	}
}
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	ff 91       	pop	r31
    151c:	ef 91       	pop	r30
    151e:	bf 91       	pop	r27
    1520:	af 91       	pop	r26
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	7f 91       	pop	r23
    1528:	6f 91       	pop	r22
    152a:	5f 91       	pop	r21
    152c:	4f 91       	pop	r20
    152e:	3f 91       	pop	r19
    1530:	2f 91       	pop	r18
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	2f 93       	push	r18
    1548:	3f 93       	push	r19
    154a:	4f 93       	push	r20
    154c:	5f 93       	push	r21
    154e:	6f 93       	push	r22
    1550:	7f 93       	push	r23
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	af 93       	push	r26
    1558:	bf 93       	push	r27
    155a:	ef 93       	push	r30
    155c:	ff 93       	push	r31
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULLPTR)
    1566:	80 91 6a 00 	lds	r24, 0x006A
    156a:	90 91 6b 00 	lds	r25, 0x006B
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	29 f0       	breq	.+10     	; 0x157c <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    1572:	e0 91 6a 00 	lds	r30, 0x006A
    1576:	f0 91 6b 00 	lds	r31, 0x006B
    157a:	09 95       	icall
	}
}
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULLPTR)
    15cc:	80 91 6c 00 	lds	r24, 0x006C
    15d0:	90 91 6d 00 	lds	r25, 0x006D
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	29 f0       	breq	.+10     	; 0x15e2 <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    15d8:	e0 91 6c 00 	lds	r30, 0x006C
    15dc:	f0 91 6d 00 	lds	r31, 0x006D
    15e0:	09 95       	icall
	}
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	7f 91       	pop	r23
    15f4:	6f 91       	pop	r22
    15f6:	5f 91       	pop	r21
    15f8:	4f 91       	pop	r20
    15fa:	3f 91       	pop	r19
    15fc:	2f 91       	pop	r18
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
    1608:	1f 92       	push	r1
    160a:	0f 92       	push	r0
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	0f 92       	push	r0
    1610:	11 24       	eor	r1, r1
    1612:	2f 93       	push	r18
    1614:	3f 93       	push	r19
    1616:	4f 93       	push	r20
    1618:	5f 93       	push	r21
    161a:	6f 93       	push	r22
    161c:	7f 93       	push	r23
    161e:	8f 93       	push	r24
    1620:	9f 93       	push	r25
    1622:	af 93       	push	r26
    1624:	bf 93       	push	r27
    1626:	ef 93       	push	r30
    1628:	ff 93       	push	r31
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULLPTR)
    1632:	80 91 6e 00 	lds	r24, 0x006E
    1636:	90 91 6f 00 	lds	r25, 0x006F
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	29 f0       	breq	.+10     	; 0x1648 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    163e:	e0 91 6e 00 	lds	r30, 0x006E
    1642:	f0 91 6f 00 	lds	r31, 0x006F
    1646:	09 95       	icall
	}
}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	ff 91       	pop	r31
    164e:	ef 91       	pop	r30
    1650:	bf 91       	pop	r27
    1652:	af 91       	pop	r26
    1654:	9f 91       	pop	r25
    1656:	8f 91       	pop	r24
    1658:	7f 91       	pop	r23
    165a:	6f 91       	pop	r22
    165c:	5f 91       	pop	r21
    165e:	4f 91       	pop	r20
    1660:	3f 91       	pop	r19
    1662:	2f 91       	pop	r18
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <DIO_uint8SetDirectionPIN>:
 */

#include "DIO_INTERFACE.h"

void DIO_uint8SetDirectionPIN(PORT_NAME Copy_Port,PIN_NAME Copy_Pin,PIN_DIR Copy_Dir)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	28 97       	sbiw	r28, 0x08	; 8
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	6b 83       	std	Y+3, r22	; 0x03
    1686:	4c 83       	std	Y+4, r20	; 0x04
	uint8 DIO_L_ErrorCode;
	if (Copy_Pin>=0 && Copy_Pin<=7)
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	88 30       	cpi	r24, 0x08	; 8
    168c:	08 f0       	brcs	.+2      	; 0x1690 <DIO_uint8SetDirectionPIN+0x22>
    168e:	f4 c0       	rjmp	.+488    	; 0x1878 <DIO_uint8SetDirectionPIN+0x20a>
	{
		if (Copy_Dir==PIN_OUTPUT)
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	09 f0       	breq	.+2      	; 0x1698 <DIO_uint8SetDirectionPIN+0x2a>
    1696:	72 c0       	rjmp	.+228    	; 0x177c <DIO_uint8SetDirectionPIN+0x10e>
			{
				switch(Copy_Port)
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	38 87       	std	Y+8, r19	; 0x08
    16a0:	2f 83       	std	Y+7, r18	; 0x07
    16a2:	8f 81       	ldd	r24, Y+7	; 0x07
    16a4:	98 85       	ldd	r25, Y+8	; 0x08
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	49 f1       	breq	.+82     	; 0x16fe <DIO_uint8SetDirectionPIN+0x90>
    16ac:	2f 81       	ldd	r18, Y+7	; 0x07
    16ae:	38 85       	ldd	r19, Y+8	; 0x08
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <DIO_uint8SetDirectionPIN+0x52>
    16b6:	8f 81       	ldd	r24, Y+7	; 0x07
    16b8:	98 85       	ldd	r25, Y+8	; 0x08
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <DIO_uint8SetDirectionPIN+0x68>
    16be:	5b c0       	rjmp	.+182    	; 0x1776 <DIO_uint8SetDirectionPIN+0x108>
    16c0:	2f 81       	ldd	r18, Y+7	; 0x07
    16c2:	38 85       	ldd	r19, Y+8	; 0x08
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	71 f1       	breq	.+92     	; 0x1726 <DIO_uint8SetDirectionPIN+0xb8>
    16ca:	8f 81       	ldd	r24, Y+7	; 0x07
    16cc:	98 85       	ldd	r25, Y+8	; 0x08
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	e9 f1       	breq	.+122    	; 0x174e <DIO_uint8SetDirectionPIN+0xe0>
    16d4:	50 c0       	rjmp	.+160    	; 0x1776 <DIO_uint8SetDirectionPIN+0x108>
				{
					case PORT_A: SET_BIT(DDRA,Copy_Pin);break;
    16d6:	aa e3       	ldi	r26, 0x3A	; 58
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ea e3       	ldi	r30, 0x3A	; 58
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_uint8SetDirectionPIN+0x86>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_uint8SetDirectionPIN+0x82>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	bf c0       	rjmp	.+382    	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_B: SET_BIT(DDRB,Copy_Pin);break;
    16fe:	a7 e3       	ldi	r26, 0x37	; 55
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e7 e3       	ldi	r30, 0x37	; 55
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_uint8SetDirectionPIN+0xae>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_uint8SetDirectionPIN+0xaa>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	ab c0       	rjmp	.+342    	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_C: SET_BIT(DDRC,Copy_Pin);break;
    1726:	a4 e3       	ldi	r26, 0x34	; 52
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e4 e3       	ldi	r30, 0x34	; 52
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_uint8SetDirectionPIN+0xd6>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_uint8SetDirectionPIN+0xd2>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	97 c0       	rjmp	.+302    	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_D: SET_BIT(DDRD,Copy_Pin);break;
    174e:	a1 e3       	ldi	r26, 0x31	; 49
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e1 e3       	ldi	r30, 0x31	; 49
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_uint8SetDirectionPIN+0xfe>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_uint8SetDirectionPIN+0xfa>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	83 c0       	rjmp	.+262    	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	80 c0       	rjmp	.+256    	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
				}
			}
		else if (Copy_Dir==PIN_INPUT)
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	88 23       	and	r24, r24
    1780:	09 f0       	breq	.+2      	; 0x1784 <DIO_uint8SetDirectionPIN+0x116>
    1782:	77 c0       	rjmp	.+238    	; 0x1872 <DIO_uint8SetDirectionPIN+0x204>
			{
				switch(Copy_Port)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3e 83       	std	Y+6, r19	; 0x06
    178c:	2d 83       	std	Y+5, r18	; 0x05
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	91 05       	cpc	r25, r1
    1796:	59 f1       	breq	.+86     	; 0x17ee <DIO_uint8SetDirectionPIN+0x180>
    1798:	2d 81       	ldd	r18, Y+5	; 0x05
    179a:	3e 81       	ldd	r19, Y+6	; 0x06
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	2c f4       	brge	.+10     	; 0x17ac <DIO_uint8SetDirectionPIN+0x13e>
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f0       	breq	.+26     	; 0x17c4 <DIO_uint8SetDirectionPIN+0x156>
    17aa:	60 c0       	rjmp	.+192    	; 0x186c <DIO_uint8SetDirectionPIN+0x1fe>
    17ac:	2d 81       	ldd	r18, Y+5	; 0x05
    17ae:	3e 81       	ldd	r19, Y+6	; 0x06
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	89 f1       	breq	.+98     	; 0x1818 <DIO_uint8SetDirectionPIN+0x1aa>
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <DIO_uint8SetDirectionPIN+0x154>
    17c0:	40 c0       	rjmp	.+128    	; 0x1842 <DIO_uint8SetDirectionPIN+0x1d4>
    17c2:	54 c0       	rjmp	.+168    	; 0x186c <DIO_uint8SetDirectionPIN+0x1fe>
				{
					case PORT_A: CLEAR_BIT(DDRA,Copy_Pin);break;
    17c4:	aa e3       	ldi	r26, 0x3A	; 58
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ea e3       	ldi	r30, 0x3A	; 58
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_uint8SetDirectionPIN+0x174>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_uint8SetDirectionPIN+0x170>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	47 c0       	rjmp	.+142    	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_B: CLEAR_BIT(DDRB,Copy_Pin);break;
    17ee:	a7 e3       	ldi	r26, 0x37	; 55
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e7 e3       	ldi	r30, 0x37	; 55
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <DIO_uint8SetDirectionPIN+0x19e>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <DIO_uint8SetDirectionPIN+0x19a>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	32 c0       	rjmp	.+100    	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_C: CLEAR_BIT(DDRC,Copy_Pin);break;
    1818:	a4 e3       	ldi	r26, 0x34	; 52
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e4 e3       	ldi	r30, 0x34	; 52
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_uint8SetDirectionPIN+0x1c8>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_uint8SetDirectionPIN+0x1c4>
    183a:	80 95       	com	r24
    183c:	84 23       	and	r24, r20
    183e:	8c 93       	st	X, r24
    1840:	1d c0       	rjmp	.+58     	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_D: CLEAR_BIT(DDRD,Copy_Pin);break;
    1842:	a1 e3       	ldi	r26, 0x31	; 49
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e1 e3       	ldi	r30, 0x31	; 49
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_uint8SetDirectionPIN+0x1f2>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_uint8SetDirectionPIN+0x1ee>
    1864:	80 95       	com	r24
    1866:	84 23       	and	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	08 c0       	rjmp	.+16     	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	05 c0       	rjmp	.+10     	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
				}
			}
		else
			DIO_L_ErrorCode=1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_uint8SetDirectionPIN+0x20e>
	}
	else
	{
		DIO_L_ErrorCode=1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
	}
}
    187c:	28 96       	adiw	r28, 0x08	; 8
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <DIO_uint8SetDirectionPort>:

/*----------------------------------------------------------------------------------*/

void DIO_uint8SetDirectionPort(PORT_NAME Copy_Port,PORT_DIR Copy_Dir)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	27 97       	sbiw	r28, 0x07	; 7
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    18a4:	6b 83       	std	Y+3, r22	; 0x03
		uint8 DIO_L_ErrorCode;
		if (Copy_Dir==PORT_OUTPUT)
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	8f 3f       	cpi	r24, 0xFF	; 255
    18aa:	b1 f5       	brne	.+108    	; 0x1918 <DIO_uint8SetDirectionPort+0x8a>
			{
				switch(Copy_Port)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3f 83       	std	Y+7, r19	; 0x07
    18b4:	2e 83       	std	Y+6, r18	; 0x06
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	91 05       	cpc	r25, r1
    18be:	d1 f0       	breq	.+52     	; 0x18f4 <DIO_uint8SetDirectionPort+0x66>
    18c0:	2e 81       	ldd	r18, Y+6	; 0x06
    18c2:	3f 81       	ldd	r19, Y+7	; 0x07
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <DIO_uint8SetDirectionPort+0x46>
    18ca:	8e 81       	ldd	r24, Y+6	; 0x06
    18cc:	9f 81       	ldd	r25, Y+7	; 0x07
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	61 f0       	breq	.+24     	; 0x18ea <DIO_uint8SetDirectionPort+0x5c>
    18d2:	1f c0       	rjmp	.+62     	; 0x1912 <DIO_uint8SetDirectionPort+0x84>
    18d4:	2e 81       	ldd	r18, Y+6	; 0x06
    18d6:	3f 81       	ldd	r19, Y+7	; 0x07
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	81 f0       	breq	.+32     	; 0x18fe <DIO_uint8SetDirectionPort+0x70>
    18de:	8e 81       	ldd	r24, Y+6	; 0x06
    18e0:	9f 81       	ldd	r25, Y+7	; 0x07
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	91 05       	cpc	r25, r1
    18e6:	81 f0       	breq	.+32     	; 0x1908 <DIO_uint8SetDirectionPort+0x7a>
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <DIO_uint8SetDirectionPort+0x84>
				{
					case PORT_A:DDRA=PORT_OUTPUT;break;
    18ea:	ea e3       	ldi	r30, 0x3A	; 58
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	80 83       	st	Z, r24
    18f2:	49 c0       	rjmp	.+146    	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_B:DDRB=PORT_OUTPUT;break;
    18f4:	e7 e3       	ldi	r30, 0x37	; 55
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	80 83       	st	Z, r24
    18fc:	44 c0       	rjmp	.+136    	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_C:DDRC=PORT_OUTPUT;break;
    18fe:	e4 e3       	ldi	r30, 0x34	; 52
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	80 83       	st	Z, r24
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_D:DDRD=PORT_OUTPUT;break;
    1908:	e1 e3       	ldi	r30, 0x31	; 49
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	80 83       	st	Z, r24
    1910:	3a c0       	rjmp	.+116    	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
					default: DIO_L_ErrorCode=1;break;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	37 c0       	rjmp	.+110    	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
				}
			}
		else if (Copy_Dir==PORT_INPUT)
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	88 23       	and	r24, r24
    191c:	91 f5       	brne	.+100    	; 0x1982 <DIO_uint8SetDirectionPort+0xf4>
			{
				switch(Copy_Port)
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	3d 83       	std	Y+5, r19	; 0x05
    1926:	2c 83       	std	Y+4, r18	; 0x04
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	91 05       	cpc	r25, r1
    1930:	c9 f0       	breq	.+50     	; 0x1964 <DIO_uint8SetDirectionPort+0xd6>
    1932:	2c 81       	ldd	r18, Y+4	; 0x04
    1934:	3d 81       	ldd	r19, Y+5	; 0x05
    1936:	22 30       	cpi	r18, 0x02	; 2
    1938:	31 05       	cpc	r19, r1
    193a:	2c f4       	brge	.+10     	; 0x1946 <DIO_uint8SetDirectionPort+0xb8>
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	61 f0       	breq	.+24     	; 0x195c <DIO_uint8SetDirectionPort+0xce>
    1944:	1b c0       	rjmp	.+54     	; 0x197c <DIO_uint8SetDirectionPort+0xee>
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	71 f0       	breq	.+28     	; 0x196c <DIO_uint8SetDirectionPort+0xde>
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	9d 81       	ldd	r25, Y+5	; 0x05
    1954:	83 30       	cpi	r24, 0x03	; 3
    1956:	91 05       	cpc	r25, r1
    1958:	69 f0       	breq	.+26     	; 0x1974 <DIO_uint8SetDirectionPort+0xe6>
    195a:	10 c0       	rjmp	.+32     	; 0x197c <DIO_uint8SetDirectionPort+0xee>
				{
					case PORT_A: DDRA=PORT_INPUT;break;
    195c:	ea e3       	ldi	r30, 0x3A	; 58
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	10 82       	st	Z, r1
    1962:	11 c0       	rjmp	.+34     	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_B: DDRB=PORT_INPUT;break;
    1964:	e7 e3       	ldi	r30, 0x37	; 55
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	10 82       	st	Z, r1
    196a:	0d c0       	rjmp	.+26     	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_C: DDRC=PORT_INPUT;break;
    196c:	e4 e3       	ldi	r30, 0x34	; 52
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	10 82       	st	Z, r1
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_D: DDRD=PORT_INPUT;break;
    1974:	e1 e3       	ldi	r30, 0x31	; 49
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	10 82       	st	Z, r1
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
					default: DIO_L_ErrorCode=1;break;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <DIO_uint8SetDirectionPort+0xf8>
				}
			}
		else
			DIO_L_ErrorCode=1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	89 83       	std	Y+1, r24	; 0x01
	}
    1986:	27 96       	adiw	r28, 0x07	; 7
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <DIO_uint8SetValuePIN>:


/*---------------------------------------------------------------------------------------------*/

void DIO_uint8SetValuePIN(PORT_NAME Copy_Port,PIN_NAME Copy_Pin,PIN_VALUE Copy_Value)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	28 97       	sbiw	r28, 0x08	; 8
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	8a 83       	std	Y+2, r24	; 0x02
    19ae:	6b 83       	std	Y+3, r22	; 0x03
    19b0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 DIO_L_ErrorCode;
	if (Copy_Pin>=0 && Copy_Pin<=7)
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <DIO_uint8SetValuePIN+0x22>
    19b8:	f4 c0       	rjmp	.+488    	; 0x1ba2 <DIO_uint8SetValuePIN+0x20a>
	{
		if (Copy_Value==PIN_HIGH)
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	09 f0       	breq	.+2      	; 0x19c2 <DIO_uint8SetValuePIN+0x2a>
    19c0:	72 c0       	rjmp	.+228    	; 0x1aa6 <DIO_uint8SetValuePIN+0x10e>
			{
				switch(Copy_Port)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	38 87       	std	Y+8, r19	; 0x08
    19ca:	2f 83       	std	Y+7, r18	; 0x07
    19cc:	8f 81       	ldd	r24, Y+7	; 0x07
    19ce:	98 85       	ldd	r25, Y+8	; 0x08
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	91 05       	cpc	r25, r1
    19d4:	49 f1       	breq	.+82     	; 0x1a28 <DIO_uint8SetValuePIN+0x90>
    19d6:	2f 81       	ldd	r18, Y+7	; 0x07
    19d8:	38 85       	ldd	r19, Y+8	; 0x08
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	2c f4       	brge	.+10     	; 0x19ea <DIO_uint8SetValuePIN+0x52>
    19e0:	8f 81       	ldd	r24, Y+7	; 0x07
    19e2:	98 85       	ldd	r25, Y+8	; 0x08
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <DIO_uint8SetValuePIN+0x68>
    19e8:	5b c0       	rjmp	.+182    	; 0x1aa0 <DIO_uint8SetValuePIN+0x108>
    19ea:	2f 81       	ldd	r18, Y+7	; 0x07
    19ec:	38 85       	ldd	r19, Y+8	; 0x08
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	71 f1       	breq	.+92     	; 0x1a50 <DIO_uint8SetValuePIN+0xb8>
    19f4:	8f 81       	ldd	r24, Y+7	; 0x07
    19f6:	98 85       	ldd	r25, Y+8	; 0x08
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	91 05       	cpc	r25, r1
    19fc:	e9 f1       	breq	.+122    	; 0x1a78 <DIO_uint8SetValuePIN+0xe0>
    19fe:	50 c0       	rjmp	.+160    	; 0x1aa0 <DIO_uint8SetValuePIN+0x108>
				{
					case PORT_A: SET_BIT(PORTA,Copy_Pin);break;
    1a00:	ab e3       	ldi	r26, 0x3B	; 59
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	eb e3       	ldi	r30, 0x3B	; 59
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_uint8SetValuePIN+0x86>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <DIO_uint8SetValuePIN+0x82>
    1a22:	84 2b       	or	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	bf c0       	rjmp	.+382    	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
					case PORT_B: SET_BIT(PORTB,Copy_Pin);break;
    1a28:	a8 e3       	ldi	r26, 0x38	; 56
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e8 e3       	ldi	r30, 0x38	; 56
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <DIO_uint8SetValuePIN+0xae>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <DIO_uint8SetValuePIN+0xaa>
    1a4a:	84 2b       	or	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	ab c0       	rjmp	.+342    	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
					case PORT_C: SET_BIT(PORTC,Copy_Pin);break;
    1a50:	a5 e3       	ldi	r26, 0x35	; 53
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e3       	ldi	r30, 0x35	; 53
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <DIO_uint8SetValuePIN+0xd6>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <DIO_uint8SetValuePIN+0xd2>
    1a72:	84 2b       	or	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	97 c0       	rjmp	.+302    	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
					case PORT_D: SET_BIT(PORTD,Copy_Pin);break;
    1a78:	a2 e3       	ldi	r26, 0x32	; 50
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e2 e3       	ldi	r30, 0x32	; 50
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_uint8SetValuePIN+0xfe>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <DIO_uint8SetValuePIN+0xfa>
    1a9a:	84 2b       	or	r24, r20
    1a9c:	8c 93       	st	X, r24
    1a9e:	83 c0       	rjmp	.+262    	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	80 c0       	rjmp	.+256    	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
				}
			}
		else if (Copy_Value==PIN_LOW)
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <DIO_uint8SetValuePIN+0x116>
    1aac:	77 c0       	rjmp	.+238    	; 0x1b9c <DIO_uint8SetValuePIN+0x204>
			{
				switch(Copy_Port)
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3e 83       	std	Y+6, r19	; 0x06
    1ab6:	2d 83       	std	Y+5, r18	; 0x05
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	59 f1       	breq	.+86     	; 0x1b18 <DIO_uint8SetValuePIN+0x180>
    1ac2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <DIO_uint8SetValuePIN+0x13e>
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	69 f0       	breq	.+26     	; 0x1aee <DIO_uint8SetValuePIN+0x156>
    1ad4:	60 c0       	rjmp	.+192    	; 0x1b96 <DIO_uint8SetValuePIN+0x1fe>
    1ad6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad8:	3e 81       	ldd	r19, Y+6	; 0x06
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	89 f1       	breq	.+98     	; 0x1b42 <DIO_uint8SetValuePIN+0x1aa>
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	83 30       	cpi	r24, 0x03	; 3
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <DIO_uint8SetValuePIN+0x154>
    1aea:	40 c0       	rjmp	.+128    	; 0x1b6c <DIO_uint8SetValuePIN+0x1d4>
    1aec:	54 c0       	rjmp	.+168    	; 0x1b96 <DIO_uint8SetValuePIN+0x1fe>
				{
					case PORT_A: CLEAR_BIT(PORTA,Copy_Pin);break;
    1aee:	ab e3       	ldi	r26, 0x3B	; 59
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	eb e3       	ldi	r30, 0x3B	; 59
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	48 2f       	mov	r20, r24
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 2e       	mov	r0, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_uint8SetValuePIN+0x174>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_uint8SetValuePIN+0x170>
    1b10:	80 95       	com	r24
    1b12:	84 23       	and	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	47 c0       	rjmp	.+142    	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
					case PORT_B: CLEAR_BIT(PORTB,Copy_Pin);break;
    1b18:	a8 e3       	ldi	r26, 0x38	; 56
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e8 e3       	ldi	r30, 0x38	; 56
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_uint8SetValuePIN+0x19e>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_uint8SetValuePIN+0x19a>
    1b3a:	80 95       	com	r24
    1b3c:	84 23       	and	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	32 c0       	rjmp	.+100    	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
					case PORT_C: CLEAR_BIT(PORTC,Copy_Pin);break;
    1b42:	a5 e3       	ldi	r26, 0x35	; 53
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e5 e3       	ldi	r30, 0x35	; 53
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_uint8SetValuePIN+0x1c8>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_uint8SetValuePIN+0x1c4>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	1d c0       	rjmp	.+58     	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
					case PORT_D: CLEAR_BIT(PORTD,Copy_Pin);break;
    1b6c:	a2 e3       	ldi	r26, 0x32	; 50
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e2 e3       	ldi	r30, 0x32	; 50
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_uint8SetValuePIN+0x1f2>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_uint8SetValuePIN+0x1ee>
    1b8e:	80 95       	com	r24
    1b90:	84 23       	and	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	08 c0       	rjmp	.+16     	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
				}
			}
		else
			DIO_L_ErrorCode=1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <DIO_uint8SetValuePIN+0x20e>
	}
	else
	{
		DIO_L_ErrorCode=1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	}
}
    1ba6:	28 96       	adiw	r28, 0x08	; 8
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <DIO_uint8SetValuePort>:

/*-------------------------------------------------------------------------------------*/

void DIO_uint8SetValuePort(PORT_NAME Copy_Port,PORT_VALUE Copy_Value)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	27 97       	sbiw	r28, 0x07	; 7
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
    1bce:	6b 83       	std	Y+3, r22	; 0x03
		uint8 DIO_L_ErrorCode;
		if (Copy_Value==PORT_HIGH)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd4:	b1 f5       	brne	.+108    	; 0x1c42 <DIO_uint8SetValuePort+0x8a>
			{
				switch(Copy_Port)
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3f 83       	std	Y+7, r19	; 0x07
    1bde:	2e 83       	std	Y+6, r18	; 0x06
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	91 05       	cpc	r25, r1
    1be8:	d1 f0       	breq	.+52     	; 0x1c1e <DIO_uint8SetValuePort+0x66>
    1bea:	2e 81       	ldd	r18, Y+6	; 0x06
    1bec:	3f 81       	ldd	r19, Y+7	; 0x07
    1bee:	22 30       	cpi	r18, 0x02	; 2
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <DIO_uint8SetValuePort+0x46>
    1bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	61 f0       	breq	.+24     	; 0x1c14 <DIO_uint8SetValuePort+0x5c>
    1bfc:	1f c0       	rjmp	.+62     	; 0x1c3c <DIO_uint8SetValuePort+0x84>
    1bfe:	2e 81       	ldd	r18, Y+6	; 0x06
    1c00:	3f 81       	ldd	r19, Y+7	; 0x07
    1c02:	22 30       	cpi	r18, 0x02	; 2
    1c04:	31 05       	cpc	r19, r1
    1c06:	81 f0       	breq	.+32     	; 0x1c28 <DIO_uint8SetValuePort+0x70>
    1c08:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0c:	83 30       	cpi	r24, 0x03	; 3
    1c0e:	91 05       	cpc	r25, r1
    1c10:	81 f0       	breq	.+32     	; 0x1c32 <DIO_uint8SetValuePort+0x7a>
    1c12:	14 c0       	rjmp	.+40     	; 0x1c3c <DIO_uint8SetValuePort+0x84>
				{
					case PORT_A:PORTA=PORT_HIGH;break;
    1c14:	eb e3       	ldi	r30, 0x3B	; 59
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
    1c1a:	80 83       	st	Z, r24
    1c1c:	49 c0       	rjmp	.+146    	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
					case PORT_B:PORTB=PORT_HIGH;break;
    1c1e:	e8 e3       	ldi	r30, 0x38	; 56
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	80 83       	st	Z, r24
    1c26:	44 c0       	rjmp	.+136    	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
					case PORT_C:PORTC=PORT_HIGH;break;
    1c28:	e5 e3       	ldi	r30, 0x35	; 53
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	80 83       	st	Z, r24
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
					case PORT_D:PORTD=PORT_HIGH;break;
    1c32:	e2 e3       	ldi	r30, 0x32	; 50
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	8f ef       	ldi	r24, 0xFF	; 255
    1c38:	80 83       	st	Z, r24
    1c3a:	3a c0       	rjmp	.+116    	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
					default: DIO_L_ErrorCode=1;break;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	37 c0       	rjmp	.+110    	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
				}
			}
		else if (Copy_Value==PORT_LOW)
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	88 23       	and	r24, r24
    1c46:	91 f5       	brne	.+100    	; 0x1cac <DIO_uint8SetValuePort+0xf4>
			{
				switch(Copy_Port)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	3d 83       	std	Y+5, r19	; 0x05
    1c50:	2c 83       	std	Y+4, r18	; 0x04
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	91 05       	cpc	r25, r1
    1c5a:	c9 f0       	breq	.+50     	; 0x1c8e <DIO_uint8SetValuePort+0xd6>
    1c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <DIO_uint8SetValuePort+0xb8>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	61 f0       	breq	.+24     	; 0x1c86 <DIO_uint8SetValuePort+0xce>
    1c6e:	1b c0       	rjmp	.+54     	; 0x1ca6 <DIO_uint8SetValuePort+0xee>
    1c70:	2c 81       	ldd	r18, Y+4	; 0x04
    1c72:	3d 81       	ldd	r19, Y+5	; 0x05
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	71 f0       	breq	.+28     	; 0x1c96 <DIO_uint8SetValuePort+0xde>
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	91 05       	cpc	r25, r1
    1c82:	69 f0       	breq	.+26     	; 0x1c9e <DIO_uint8SetValuePort+0xe6>
    1c84:	10 c0       	rjmp	.+32     	; 0x1ca6 <DIO_uint8SetValuePort+0xee>
				{
					case PORT_A: PORTA=PORT_LOW;break;
    1c86:	eb e3       	ldi	r30, 0x3B	; 59
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	10 82       	st	Z, r1
    1c8c:	11 c0       	rjmp	.+34     	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
					case PORT_B: PORTB=PORT_LOW;break;
    1c8e:	e8 e3       	ldi	r30, 0x38	; 56
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	10 82       	st	Z, r1
    1c94:	0d c0       	rjmp	.+26     	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
					case PORT_C: PORTC=PORT_LOW;break;
    1c96:	e5 e3       	ldi	r30, 0x35	; 53
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	10 82       	st	Z, r1
    1c9c:	09 c0       	rjmp	.+18     	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
					case PORT_D: PORTD=PORT_LOW;break;
    1c9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	10 82       	st	Z, r1
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
					default: DIO_L_ErrorCode=1;break;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <DIO_uint8SetValuePort+0xf8>
				}
			}
		else
			DIO_L_ErrorCode=1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	89 83       	std	Y+1, r24	; 0x01
}
    1cb0:	27 96       	adiw	r28, 0x07	; 7
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <DIO_uint8Set_SpecificValue_Port>:

/*-------------------------------------------------------------------------------------*/

void DIO_uint8Set_SpecificValue_Port(PORT_NAME Copy_Port,uint8 Copy_Value)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <DIO_uint8Set_SpecificValue_Port+0x6>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <DIO_uint8Set_SpecificValue_Port+0x8>
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	8a 83       	std	Y+2, r24	; 0x02
    1cd2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 DIO_L_ErrorCode;
	/* Check on the Required PORT Number */
	switch(Copy_Port)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3d 83       	std	Y+5, r19	; 0x05
    1cdc:	2c 83       	std	Y+4, r18	; 0x04
    1cde:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	d1 f0       	breq	.+52     	; 0x1d1c <DIO_uint8Set_SpecificValue_Port+0x5a>
    1ce8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cea:	3d 81       	ldd	r19, Y+5	; 0x05
    1cec:	22 30       	cpi	r18, 0x02	; 2
    1cee:	31 05       	cpc	r19, r1
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <DIO_uint8Set_SpecificValue_Port+0x3a>
    1cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	61 f0       	breq	.+24     	; 0x1d12 <DIO_uint8Set_SpecificValue_Port+0x50>
    1cfa:	1f c0       	rjmp	.+62     	; 0x1d3a <DIO_uint8Set_SpecificValue_Port+0x78>
    1cfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1d00:	22 30       	cpi	r18, 0x02	; 2
    1d02:	31 05       	cpc	r19, r1
    1d04:	81 f0       	breq	.+32     	; 0x1d26 <DIO_uint8Set_SpecificValue_Port+0x64>
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0a:	83 30       	cpi	r24, 0x03	; 3
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	81 f0       	breq	.+32     	; 0x1d30 <DIO_uint8Set_SpecificValue_Port+0x6e>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <DIO_uint8Set_SpecificValue_Port+0x78>
	{
		case PORT_A:PORTA=Copy_Value;break;
    1d12:	eb e3       	ldi	r30, 0x3B	; 59
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	80 83       	st	Z, r24
    1d1a:	11 c0       	rjmp	.+34     	; 0x1d3e <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_B:PORTB=Copy_Value;break;
    1d1c:	e8 e3       	ldi	r30, 0x38	; 56
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	80 83       	st	Z, r24
    1d24:	0c c0       	rjmp	.+24     	; 0x1d3e <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_C:PORTC=Copy_Value;break;
    1d26:	e5 e3       	ldi	r30, 0x35	; 53
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	80 83       	st	Z, r24
    1d2e:	07 c0       	rjmp	.+14     	; 0x1d3e <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_D:PORTD=Copy_Value;break;
    1d30:	e2 e3       	ldi	r30, 0x32	; 50
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	80 83       	st	Z, r24
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_uint8Set_SpecificValue_Port+0x7c>
		default: DIO_L_ErrorCode=1;break;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	}

}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <DIO_uint8Set_SpecificValue_Port_Direction>:

/*------------------------------------------------------------------------*/

void DIO_uint8Set_SpecificValue_Port_Direction(PORT_NAME Copy_Port,uint8 Copy_Dir)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <DIO_uint8Set_SpecificValue_Port_Direction+0x6>
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <DIO_uint8Set_SpecificValue_Port_Direction+0x8>
    1d56:	0f 92       	push	r0
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
    1d5e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 DIO_L_ErrorCode;
		/* Check on the Required PORT Number */
		switch(Copy_Port)
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	3d 83       	std	Y+5, r19	; 0x05
    1d68:	2c 83       	std	Y+4, r18	; 0x04
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	91 05       	cpc	r25, r1
    1d72:	d1 f0       	breq	.+52     	; 0x1da8 <DIO_uint8Set_SpecificValue_Port_Direction+0x5a>
    1d74:	2c 81       	ldd	r18, Y+4	; 0x04
    1d76:	3d 81       	ldd	r19, Y+5	; 0x05
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <DIO_uint8Set_SpecificValue_Port_Direction+0x3a>
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	9d 81       	ldd	r25, Y+5	; 0x05
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	61 f0       	breq	.+24     	; 0x1d9e <DIO_uint8Set_SpecificValue_Port_Direction+0x50>
    1d86:	1f c0       	rjmp	.+62     	; 0x1dc6 <DIO_uint8Set_SpecificValue_Port_Direction+0x78>
    1d88:	2c 81       	ldd	r18, Y+4	; 0x04
    1d8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8c:	22 30       	cpi	r18, 0x02	; 2
    1d8e:	31 05       	cpc	r19, r1
    1d90:	81 f0       	breq	.+32     	; 0x1db2 <DIO_uint8Set_SpecificValue_Port_Direction+0x64>
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	9d 81       	ldd	r25, Y+5	; 0x05
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <DIO_uint8Set_SpecificValue_Port_Direction+0x6e>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <DIO_uint8Set_SpecificValue_Port_Direction+0x78>
		{
			case PORT_A:DDRA=Copy_Dir;break;
    1d9e:	ea e3       	ldi	r30, 0x3A	; 58
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	80 83       	st	Z, r24
    1da6:	11 c0       	rjmp	.+34     	; 0x1dca <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_B:DDRB=Copy_Dir;break;
    1da8:	e7 e3       	ldi	r30, 0x37	; 55
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	80 83       	st	Z, r24
    1db0:	0c c0       	rjmp	.+24     	; 0x1dca <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_C:DDRC=Copy_Dir;break;
    1db2:	e4 e3       	ldi	r30, 0x34	; 52
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	80 83       	st	Z, r24
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_D:DDRD=Copy_Dir;break;
    1dbc:	e1 e3       	ldi	r30, 0x31	; 49
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	80 83       	st	Z, r24
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			default: DIO_L_ErrorCode=1;break;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
		}
}
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <DIO_uint8Read_PIN>:

/*------------------------------------------------------------------------*/

PIN_VALUE DIO_uint8Read_PIN(PIN_Reg_NAME Copy_Port,PIN_NAME Copy_Pin)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <DIO_uint8Read_PIN+0x6>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <DIO_uint8Read_PIN+0x8>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <DIO_uint8Read_PIN+0xa>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	8b 83       	std	Y+3, r24	; 0x03
    1dea:	6c 83       	std	Y+4, r22	; 0x04
	PIN_VALUE Copy_Value;
	uint8 DIO_L_ErrorCode;

	if(Copy_Port <= PIN_D && Copy_Pin <= PIN_7)
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	08 f0       	brcs	.+2      	; 0x1df4 <DIO_uint8Read_PIN+0x1a>
    1df2:	6f c0       	rjmp	.+222    	; 0x1ed2 <DIO_uint8Read_PIN+0xf8>
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	88 30       	cpi	r24, 0x08	; 8
    1df8:	08 f0       	brcs	.+2      	; 0x1dfc <DIO_uint8Read_PIN+0x22>
    1dfa:	6b c0       	rjmp	.+214    	; 0x1ed2 <DIO_uint8Read_PIN+0xf8>
	{
		switch(Copy_Port)
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	3e 83       	std	Y+6, r19	; 0x06
    1e04:	2d 83       	std	Y+5, r18	; 0x05
    1e06:	4d 81       	ldd	r20, Y+5	; 0x05
    1e08:	5e 81       	ldd	r21, Y+6	; 0x06
    1e0a:	41 30       	cpi	r20, 0x01	; 1
    1e0c:	51 05       	cpc	r21, r1
    1e0e:	41 f1       	breq	.+80     	; 0x1e60 <DIO_uint8Read_PIN+0x86>
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	91 05       	cpc	r25, r1
    1e18:	34 f4       	brge	.+12     	; 0x1e26 <DIO_uint8Read_PIN+0x4c>
    1e1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e1e:	21 15       	cp	r18, r1
    1e20:	31 05       	cpc	r19, r1
    1e22:	61 f0       	breq	.+24     	; 0x1e3c <DIO_uint8Read_PIN+0x62>
    1e24:	53 c0       	rjmp	.+166    	; 0x1ecc <DIO_uint8Read_PIN+0xf2>
    1e26:	4d 81       	ldd	r20, Y+5	; 0x05
    1e28:	5e 81       	ldd	r21, Y+6	; 0x06
    1e2a:	42 30       	cpi	r20, 0x02	; 2
    1e2c:	51 05       	cpc	r21, r1
    1e2e:	51 f1       	breq	.+84     	; 0x1e84 <DIO_uint8Read_PIN+0xaa>
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	91 05       	cpc	r25, r1
    1e38:	b9 f1       	breq	.+110    	; 0x1ea8 <DIO_uint8Read_PIN+0xce>
    1e3a:	48 c0       	rjmp	.+144    	; 0x1ecc <DIO_uint8Read_PIN+0xf2>
			{
				case PIN_A:Copy_Value = GET_BIT(PINA,Copy_Pin); break;
    1e3c:	e9 e3       	ldi	r30, 0x39	; 57
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a9 01       	movw	r20, r18
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <DIO_uint8Read_PIN+0x7a>
    1e50:	55 95       	asr	r21
    1e52:	47 95       	ror	r20
    1e54:	8a 95       	dec	r24
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <DIO_uint8Read_PIN+0x76>
    1e58:	ca 01       	movw	r24, r20
    1e5a:	81 70       	andi	r24, 0x01	; 1
    1e5c:	8a 83       	std	Y+2, r24	; 0x02
    1e5e:	3b c0       	rjmp	.+118    	; 0x1ed6 <DIO_uint8Read_PIN+0xfc>
				case PIN_B:Copy_Value = GET_BIT(PINB,Copy_Pin); break;
    1e60:	e6 e3       	ldi	r30, 0x36	; 54
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a9 01       	movw	r20, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_uint8Read_PIN+0x9e>
    1e74:	55 95       	asr	r21
    1e76:	47 95       	ror	r20
    1e78:	8a 95       	dec	r24
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_uint8Read_PIN+0x9a>
    1e7c:	ca 01       	movw	r24, r20
    1e7e:	81 70       	andi	r24, 0x01	; 1
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	29 c0       	rjmp	.+82     	; 0x1ed6 <DIO_uint8Read_PIN+0xfc>
				case PIN_C:Copy_Value = GET_BIT(PINC,Copy_Pin); break;
    1e84:	e3 e3       	ldi	r30, 0x33	; 51
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a9 01       	movw	r20, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_uint8Read_PIN+0xc2>
    1e98:	55 95       	asr	r21
    1e9a:	47 95       	ror	r20
    1e9c:	8a 95       	dec	r24
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_uint8Read_PIN+0xbe>
    1ea0:	ca 01       	movw	r24, r20
    1ea2:	81 70       	andi	r24, 0x01	; 1
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
    1ea6:	17 c0       	rjmp	.+46     	; 0x1ed6 <DIO_uint8Read_PIN+0xfc>
				case PIN_D:Copy_Value = GET_BIT(PIND,Copy_Pin); break;
    1ea8:	e0 e3       	ldi	r30, 0x30	; 48
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a9 01       	movw	r20, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <DIO_uint8Read_PIN+0xe6>
    1ebc:	55 95       	asr	r21
    1ebe:	47 95       	ror	r20
    1ec0:	8a 95       	dec	r24
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <DIO_uint8Read_PIN+0xe2>
    1ec4:	ca 01       	movw	r24, r20
    1ec6:	81 70       	andi	r24, 0x01	; 1
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
    1eca:	05 c0       	rjmp	.+10     	; 0x1ed6 <DIO_uint8Read_PIN+0xfc>
				default: DIO_L_ErrorCode=1; break;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <DIO_uint8Read_PIN+0xfc>
			}
	}
	else
	{
		DIO_L_ErrorCode=1;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Copy_Value;
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1ed8:	26 96       	adiw	r28, 0x06	; 6
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <ULTRASONIC_Init>:


static volatile uint16 t1,t2,flag=0,c=0;

void ULTRASONIC_Init(void)
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
	/****you can use timer in another mode except modes using ICR as top but take care do not reset timer****/
	//Timer1_Init(TIMER1_FASTPWM_OCRA_TOP_MODE,TIMER1_SCALER_8,OCRA_DISCONNECTED,OCRB_NON_INVERTING);
	//OCR1A = 20000;
	Timer1_OVF_SetCallBack(Func_OVF);
    1ef2:	8a e1       	ldi	r24, 0x1A	; 26
    1ef4:	93 e1       	ldi	r25, 0x13	; 19
    1ef6:	0e 94 23 0a 	call	0x1446	; 0x1446 <Timer1_OVF_SetCallBack>
	Timer1_ICU_SetCallBack(Func_ICU);
    1efa:	8b ed       	ldi	r24, 0xDB	; 219
    1efc:	92 e1       	ldi	r25, 0x12	; 18
    1efe:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <Timer1_ICU_SetCallBack>

}
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <ULTRASONIC_GetDistance>:

uint8 ULTRASONIC_GetDistance(PORT_NAME ultrasonic_port , PIN_NAME ultrasonic_pin)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	6d 97       	sbiw	r28, 0x1d	; 29
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	8c 8f       	std	Y+28, r24	; 0x1c
    1f1e:	6d 8f       	std	Y+29, r22	; 0x1d
	uint8 distance;
	uint16 time;
	//TCNT1=0;	// do not reset timer to not affect the Servo motor
	c=0;
    1f20:	10 92 77 00 	sts	0x0077, r1
    1f24:	10 92 76 00 	sts	0x0076, r1
	flag=0;
    1f28:	10 92 75 00 	sts	0x0075, r1
    1f2c:	10 92 74 00 	sts	0x0074, r1


	DIO_uint8SetValuePIN(ultrasonic_port , ultrasonic_pin , PIN_HIGH);
    1f30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f32:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_uint8SetValuePIN>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e2       	ldi	r26, 0x20	; 32
    1f40:	b1 e4       	ldi	r27, 0x41	; 65
    1f42:	8d 8b       	std	Y+21, r24	; 0x15
    1f44:	9e 8b       	std	Y+22, r25	; 0x16
    1f46:	af 8b       	std	Y+23, r26	; 0x17
    1f48:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f50:	98 8d       	ldd	r25, Y+24	; 0x18
    1f52:	2b ea       	ldi	r18, 0xAB	; 171
    1f54:	3a ea       	ldi	r19, 0xAA	; 170
    1f56:	4a e2       	ldi	r20, 0x2A	; 42
    1f58:	50 e4       	ldi	r21, 0x40	; 64
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	89 8b       	std	Y+17, r24	; 0x11
    1f64:	9a 8b       	std	Y+18, r25	; 0x12
    1f66:	ab 8b       	std	Y+19, r26	; 0x13
    1f68:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f6a:	69 89       	ldd	r22, Y+17	; 0x11
    1f6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f70:	9c 89       	ldd	r25, Y+20	; 0x14
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	1c f4       	brge	.+6      	; 0x1f88 <ULTRASONIC_GetDistance+0x80>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	88 8b       	std	Y+16, r24	; 0x10
    1f86:	91 c0       	rjmp	.+290    	; 0x20aa <ULTRASONIC_GetDistance+0x1a2>
	else if (__tmp > 255)
    1f88:	69 89       	ldd	r22, Y+17	; 0x11
    1f8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4f e7       	ldi	r20, 0x7F	; 127
    1f96:	53 e4       	ldi	r21, 0x43	; 67
    1f98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f9c:	18 16       	cp	r1, r24
    1f9e:	0c f0       	brlt	.+2      	; 0x1fa2 <ULTRASONIC_GetDistance+0x9a>
    1fa0:	7b c0       	rjmp	.+246    	; 0x2098 <ULTRASONIC_GetDistance+0x190>
	{
		_delay_ms(__us / 1000.0);
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4a e7       	ldi	r20, 0x7A	; 122
    1fb0:	54 e4       	ldi	r21, 0x44	; 68
    1fb2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	8c 87       	std	Y+12, r24	; 0x0c
    1fbc:	9d 87       	std	Y+13, r25	; 0x0d
    1fbe:	ae 87       	std	Y+14, r26	; 0x0e
    1fc0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fc4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a ef       	ldi	r20, 0xFA	; 250
    1fd0:	54 e4       	ldi	r21, 0x44	; 68
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	88 87       	std	Y+8, r24	; 0x08
    1fdc:	99 87       	std	Y+9, r25	; 0x09
    1fde:	aa 87       	std	Y+10, r26	; 0x0a
    1fe0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fe2:	68 85       	ldd	r22, Y+8	; 0x08
    1fe4:	79 85       	ldd	r23, Y+9	; 0x09
    1fe6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <ULTRASONIC_GetDistance+0xfc>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9f 83       	std	Y+7, r25	; 0x07
    2000:	8e 83       	std	Y+6, r24	; 0x06
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <ULTRASONIC_GetDistance+0x17a>
	else if (__tmp > 65535)
    2004:	68 85       	ldd	r22, Y+8	; 0x08
    2006:	79 85       	ldd	r23, Y+9	; 0x09
    2008:	8a 85       	ldd	r24, Y+10	; 0x0a
    200a:	9b 85       	ldd	r25, Y+11	; 0x0b
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <ULTRASONIC_GetDistance+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6c 85       	ldd	r22, Y+12	; 0x0c
    201e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2020:	8e 85       	ldd	r24, Y+14	; 0x0e
    2022:	9f 85       	ldd	r25, Y+15	; 0x0f
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9f 83       	std	Y+7, r25	; 0x07
    2042:	8e 83       	std	Y+6, r24	; 0x06
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <ULTRASONIC_GetDistance+0x15c>
    2046:	88 ec       	ldi	r24, 0xC8	; 200
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9d 83       	std	Y+5, r25	; 0x05
    204c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	9d 81       	ldd	r25, Y+5	; 0x05
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <ULTRASONIC_GetDistance+0x14a>
    2056:	9d 83       	std	Y+5, r25	; 0x05
    2058:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	8e 81       	ldd	r24, Y+6	; 0x06
    205c:	9f 81       	ldd	r25, Y+7	; 0x07
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9f 83       	std	Y+7, r25	; 0x07
    2062:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	8e 81       	ldd	r24, Y+6	; 0x06
    2066:	9f 81       	ldd	r25, Y+7	; 0x07
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <ULTRASONIC_GetDistance+0x13e>
    206c:	24 c0       	rjmp	.+72     	; 0x20b6 <ULTRASONIC_GetDistance+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	68 85       	ldd	r22, Y+8	; 0x08
    2070:	79 85       	ldd	r23, Y+9	; 0x09
    2072:	8a 85       	ldd	r24, Y+10	; 0x0a
    2074:	9b 85       	ldd	r25, Y+11	; 0x0b
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9f 83       	std	Y+7, r25	; 0x07
    2080:	8e 83       	std	Y+6, r24	; 0x06
    2082:	8e 81       	ldd	r24, Y+6	; 0x06
    2084:	9f 81       	ldd	r25, Y+7	; 0x07
    2086:	9b 83       	std	Y+3, r25	; 0x03
    2088:	8a 83       	std	Y+2, r24	; 0x02
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	9b 81       	ldd	r25, Y+3	; 0x03
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <ULTRASONIC_GetDistance+0x186>
    2092:	9b 83       	std	Y+3, r25	; 0x03
    2094:	8a 83       	std	Y+2, r24	; 0x02
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <ULTRASONIC_GetDistance+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2098:	69 89       	ldd	r22, Y+17	; 0x11
    209a:	7a 89       	ldd	r23, Y+18	; 0x12
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	88 8b       	std	Y+16, r24	; 0x10
    20aa:	88 89       	ldd	r24, Y+16	; 0x10
    20ac:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	8a 95       	dec	r24
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <ULTRASONIC_GetDistance+0x1a8>
    20b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_uint8SetValuePIN(ultrasonic_port , ultrasonic_pin , PIN_LOW);
    20b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20b8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_uint8SetValuePIN>

	Timer1_InputCaptureEdge(RISING);
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	0e 94 94 09 	call	0x1328	; 0x1328 <Timer1_InputCaptureEdge>
	Timer1_ICU_InterruptEnable();
    20c6:	0e 94 b3 09 	call	0x1366	; 0x1366 <Timer1_ICU_InterruptEnable>

	Timer1_OVF_InterruptEnable();
    20ca:	0e 94 cf 09 	call	0x139e	; 0x139e <Timer1_OVF_InterruptEnable>

	while (flag<2);
    20ce:	80 91 74 00 	lds	r24, 0x0074
    20d2:	90 91 75 00 	lds	r25, 0x0075
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	91 05       	cpc	r25, r1
    20da:	c8 f3       	brcs	.-14     	; 0x20ce <ULTRASONIC_GetDistance+0x1c6>
	time=t2-t1+((uint32)c*20000); // not 65535 because we use OCR1A = 20000 as top , so timer OVF when reaches 20000
    20dc:	20 91 7a 00 	lds	r18, 0x007A
    20e0:	30 91 7b 00 	lds	r19, 0x007B
    20e4:	80 91 78 00 	lds	r24, 0x0078
    20e8:	90 91 79 00 	lds	r25, 0x0079
    20ec:	a9 01       	movw	r20, r18
    20ee:	48 1b       	sub	r20, r24
    20f0:	59 0b       	sbc	r21, r25
    20f2:	20 91 76 00 	lds	r18, 0x0076
    20f6:	30 91 77 00 	lds	r19, 0x0077
    20fa:	80 e2       	ldi	r24, 0x20	; 32
    20fc:	9e e4       	ldi	r25, 0x4E	; 78
    20fe:	bc 01       	movw	r22, r24
    2100:	26 9f       	mul	r18, r22
    2102:	c0 01       	movw	r24, r0
    2104:	27 9f       	mul	r18, r23
    2106:	90 0d       	add	r25, r0
    2108:	36 9f       	mul	r19, r22
    210a:	90 0d       	add	r25, r0
    210c:	11 24       	eor	r1, r1
    210e:	84 0f       	add	r24, r20
    2110:	95 1f       	adc	r25, r21
    2112:	9a 8f       	std	Y+26, r25	; 0x1a
    2114:	89 8f       	std	Y+25, r24	; 0x19
	distance=time/58;
    2116:	89 8d       	ldd	r24, Y+25	; 0x19
    2118:	9a 8d       	ldd	r25, Y+26	; 0x1a
    211a:	2a e3       	ldi	r18, 0x3A	; 58
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	b9 01       	movw	r22, r18
    2120:	0e 94 4e 13 	call	0x269c	; 0x269c <__udivmodhi4>
    2124:	cb 01       	movw	r24, r22
    2126:	8b 8f       	std	Y+27, r24	; 0x1b

	return distance;
    2128:	8b 8d       	ldd	r24, Y+27	; 0x1b

}
    212a:	6d 96       	adiw	r28, 0x1d	; 29
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <ULTRASONIC_Start>:
void ULTRASONIC_Start(PORT_NAME ultrasonic_port , PIN_NAME ultrasonic_pin)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	6a 97       	sbiw	r28, 0x1a	; 26
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	89 8f       	std	Y+25, r24	; 0x19
    2152:	6a 8f       	std	Y+26, r22	; 0x1a
		if(flag==0)
    2154:	80 91 74 00 	lds	r24, 0x0074
    2158:	90 91 75 00 	lds	r25, 0x0075
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	09 f0       	breq	.+2      	; 0x2162 <ULTRASONIC_Start+0x26>
    2160:	cf c0       	rjmp	.+414    	; 0x2300 <ULTRASONIC_Start+0x1c4>
		{
			DIO_uint8SetValuePIN(ultrasonic_port , ultrasonic_pin , PIN_HIGH);
    2162:	89 8d       	ldd	r24, Y+25	; 0x19
    2164:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_uint8SetValuePIN>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a0 e2       	ldi	r26, 0x20	; 32
    2172:	b1 e4       	ldi	r27, 0x41	; 65
    2174:	8d 8b       	std	Y+21, r24	; 0x15
    2176:	9e 8b       	std	Y+22, r25	; 0x16
    2178:	af 8b       	std	Y+23, r26	; 0x17
    217a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    217c:	6d 89       	ldd	r22, Y+21	; 0x15
    217e:	7e 89       	ldd	r23, Y+22	; 0x16
    2180:	8f 89       	ldd	r24, Y+23	; 0x17
    2182:	98 8d       	ldd	r25, Y+24	; 0x18
    2184:	2b ea       	ldi	r18, 0xAB	; 171
    2186:	3a ea       	ldi	r19, 0xAA	; 170
    2188:	4a e2       	ldi	r20, 0x2A	; 42
    218a:	50 e4       	ldi	r21, 0x40	; 64
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	89 8b       	std	Y+17, r24	; 0x11
    2196:	9a 8b       	std	Y+18, r25	; 0x12
    2198:	ab 8b       	std	Y+19, r26	; 0x13
    219a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    219c:	69 89       	ldd	r22, Y+17	; 0x11
    219e:	7a 89       	ldd	r23, Y+18	; 0x12
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	1c f4       	brge	.+6      	; 0x21ba <ULTRASONIC_Start+0x7e>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	88 8b       	std	Y+16, r24	; 0x10
    21b8:	91 c0       	rjmp	.+290    	; 0x22dc <ULTRASONIC_Start+0x1a0>
	else if (__tmp > 255)
    21ba:	69 89       	ldd	r22, Y+17	; 0x11
    21bc:	7a 89       	ldd	r23, Y+18	; 0x12
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	53 e4       	ldi	r21, 0x43	; 67
    21ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	0c f0       	brlt	.+2      	; 0x21d4 <ULTRASONIC_Start+0x98>
    21d2:	7b c0       	rjmp	.+246    	; 0x22ca <ULTRASONIC_Start+0x18e>
	{
		_delay_ms(__us / 1000.0);
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a e7       	ldi	r20, 0x7A	; 122
    21e2:	54 e4       	ldi	r21, 0x44	; 68
    21e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8c 87       	std	Y+12, r24	; 0x0c
    21ee:	9d 87       	std	Y+13, r25	; 0x0d
    21f0:	ae 87       	std	Y+14, r26	; 0x0e
    21f2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    21f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    21f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4a ef       	ldi	r20, 0xFA	; 250
    2202:	54 e4       	ldi	r21, 0x44	; 68
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	88 87       	std	Y+8, r24	; 0x08
    220e:	99 87       	std	Y+9, r25	; 0x09
    2210:	aa 87       	std	Y+10, r26	; 0x0a
    2212:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2214:	68 85       	ldd	r22, Y+8	; 0x08
    2216:	79 85       	ldd	r23, Y+9	; 0x09
    2218:	8a 85       	ldd	r24, Y+10	; 0x0a
    221a:	9b 85       	ldd	r25, Y+11	; 0x0b
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e8       	ldi	r20, 0x80	; 128
    2222:	5f e3       	ldi	r21, 0x3F	; 63
    2224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2228:	88 23       	and	r24, r24
    222a:	2c f4       	brge	.+10     	; 0x2236 <ULTRASONIC_Start+0xfa>
		__ticks = 1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9f 83       	std	Y+7, r25	; 0x07
    2232:	8e 83       	std	Y+6, r24	; 0x06
    2234:	3f c0       	rjmp	.+126    	; 0x22b4 <ULTRASONIC_Start+0x178>
	else if (__tmp > 65535)
    2236:	68 85       	ldd	r22, Y+8	; 0x08
    2238:	79 85       	ldd	r23, Y+9	; 0x09
    223a:	8a 85       	ldd	r24, Y+10	; 0x0a
    223c:	9b 85       	ldd	r25, Y+11	; 0x0b
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	3f ef       	ldi	r19, 0xFF	; 255
    2242:	4f e7       	ldi	r20, 0x7F	; 127
    2244:	57 e4       	ldi	r21, 0x47	; 71
    2246:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224a:	18 16       	cp	r1, r24
    224c:	4c f5       	brge	.+82     	; 0x22a0 <ULTRASONIC_Start+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2250:	7d 85       	ldd	r23, Y+13	; 0x0d
    2252:	8e 85       	ldd	r24, Y+14	; 0x0e
    2254:	9f 85       	ldd	r25, Y+15	; 0x0f
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e2       	ldi	r20, 0x20	; 32
    225c:	51 e4       	ldi	r21, 0x41	; 65
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9f 83       	std	Y+7, r25	; 0x07
    2274:	8e 83       	std	Y+6, r24	; 0x06
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <ULTRASONIC_Start+0x15a>
    2278:	88 ec       	ldi	r24, 0xC8	; 200
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9d 83       	std	Y+5, r25	; 0x05
    227e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	9d 81       	ldd	r25, Y+5	; 0x05
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <ULTRASONIC_Start+0x148>
    2288:	9d 83       	std	Y+5, r25	; 0x05
    228a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228c:	8e 81       	ldd	r24, Y+6	; 0x06
    228e:	9f 81       	ldd	r25, Y+7	; 0x07
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	9f 83       	std	Y+7, r25	; 0x07
    2294:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2296:	8e 81       	ldd	r24, Y+6	; 0x06
    2298:	9f 81       	ldd	r25, Y+7	; 0x07
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	69 f7       	brne	.-38     	; 0x2278 <ULTRASONIC_Start+0x13c>
    229e:	24 c0       	rjmp	.+72     	; 0x22e8 <ULTRASONIC_Start+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a0:	68 85       	ldd	r22, Y+8	; 0x08
    22a2:	79 85       	ldd	r23, Y+9	; 0x09
    22a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9f 83       	std	Y+7, r25	; 0x07
    22b2:	8e 83       	std	Y+6, r24	; 0x06
    22b4:	8e 81       	ldd	r24, Y+6	; 0x06
    22b6:	9f 81       	ldd	r25, Y+7	; 0x07
    22b8:	9b 83       	std	Y+3, r25	; 0x03
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	9b 81       	ldd	r25, Y+3	; 0x03
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <ULTRASONIC_Start+0x184>
    22c4:	9b 83       	std	Y+3, r25	; 0x03
    22c6:	8a 83       	std	Y+2, r24	; 0x02
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <ULTRASONIC_Start+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ca:	69 89       	ldd	r22, Y+17	; 0x11
    22cc:	7a 89       	ldd	r23, Y+18	; 0x12
    22ce:	8b 89       	ldd	r24, Y+19	; 0x13
    22d0:	9c 89       	ldd	r25, Y+20	; 0x14
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	88 8b       	std	Y+16, r24	; 0x10
    22dc:	88 89       	ldd	r24, Y+16	; 0x10
    22de:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	8a 95       	dec	r24
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <ULTRASONIC_Start+0x1a6>
    22e6:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_uint8SetValuePIN(ultrasonic_port , ultrasonic_pin , PIN_LOW);
    22e8:	89 8d       	ldd	r24, Y+25	; 0x19
    22ea:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_uint8SetValuePIN>
			Timer1_InputCaptureEdge(RISING);
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	0e 94 94 09 	call	0x1328	; 0x1328 <Timer1_InputCaptureEdge>
			Timer1_ICU_InterruptEnable();
    22f8:	0e 94 b3 09 	call	0x1366	; 0x1366 <Timer1_ICU_InterruptEnable>
			Timer1_OVF_InterruptEnable();
    22fc:	0e 94 cf 09 	call	0x139e	; 0x139e <Timer1_OVF_InterruptEnable>
		}

}
    2300:	6a 96       	adiw	r28, 0x1a	; 26
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <ULTRASONIC_GetDistanceNoBlock>:
uint8 ULTRASONIC_GetDistanceNoBlock(uint8 *Pdistance)
{
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	00 d0       	rcall	.+0      	; 0x231c <ULTRASONIC_GetDistanceNoBlock+0xa>
    231c:	00 d0       	rcall	.+0      	; 0x231e <ULTRASONIC_GetDistanceNoBlock+0xc>
    231e:	00 d0       	rcall	.+0      	; 0x2320 <ULTRASONIC_GetDistanceNoBlock+0xe>
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	9d 83       	std	Y+5, r25	; 0x05
    2326:	8c 83       	std	Y+4, r24	; 0x04
	uint8 distance;
	uint16 time;
	if (flag==2)
    2328:	80 91 74 00 	lds	r24, 0x0074
    232c:	90 91 75 00 	lds	r25, 0x0075
    2330:	82 30       	cpi	r24, 0x02	; 2
    2332:	91 05       	cpc	r25, r1
    2334:	b1 f5       	brne	.+108    	; 0x23a2 <ULTRASONIC_GetDistanceNoBlock+0x90>
	{
		time=t2-t1+((uint32)c*65535);
    2336:	20 91 7a 00 	lds	r18, 0x007A
    233a:	30 91 7b 00 	lds	r19, 0x007B
    233e:	80 91 78 00 	lds	r24, 0x0078
    2342:	90 91 79 00 	lds	r25, 0x0079
    2346:	89 01       	movw	r16, r18
    2348:	08 1b       	sub	r16, r24
    234a:	19 0b       	sbc	r17, r25
    234c:	80 91 76 00 	lds	r24, 0x0076
    2350:	90 91 77 00 	lds	r25, 0x0077
    2354:	cc 01       	movw	r24, r24
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	2f ef       	ldi	r18, 0xFF	; 255
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 2f 13 	call	0x265e	; 0x265e <__mulsi3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	80 0f       	add	r24, r16
    2370:	91 1f       	adc	r25, r17
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
		distance=time/58;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	2a e3       	ldi	r18, 0x3A	; 58
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	b9 01       	movw	r22, r18
    2380:	0e 94 4e 13 	call	0x269c	; 0x269c <__udivmodhi4>
    2384:	cb 01       	movw	r24, r22
    2386:	8b 83       	std	Y+3, r24	; 0x03
		*Pdistance=distance;
    2388:	ec 81       	ldd	r30, Y+4	; 0x04
    238a:	fd 81       	ldd	r31, Y+5	; 0x05
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	80 83       	st	Z, r24
		Timer1_OVF_InterruptEnable();
    2390:	0e 94 cf 09 	call	0x139e	; 0x139e <Timer1_OVF_InterruptEnable>
		flag=0;
    2394:	10 92 75 00 	sts	0x0075, r1
    2398:	10 92 74 00 	sts	0x0074, r1
		return 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	8e 83       	std	Y+6, r24	; 0x06
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <ULTRASONIC_GetDistanceNoBlock+0x92>
	}
	return 0;
    23a2:	1e 82       	std	Y+6, r1	; 0x06
    23a4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    23a6:	26 96       	adiw	r28, 0x06	; 6
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	08 95       	ret

000023bc <ULTRASONIC_GetDistance2>:
uint8 ULTRASONIC_GetDistance2(PORT_NAME ultrasonic_port , PIN_NAME ultrasonic_pin)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	6d 97       	sbiw	r28, 0x1d	; 29
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	8c 8f       	std	Y+28, r24	; 0x1c
    23d2:	6d 8f       	std	Y+29, r22	; 0x1d
	uint8 distance;
	uint16 time;
	DIO_uint8SetValuePIN(ultrasonic_port , ultrasonic_pin , PIN_HIGH);
    23d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_uint8SetValuePIN>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a0 e2       	ldi	r26, 0x20	; 32
    23e4:	b1 e4       	ldi	r27, 0x41	; 65
    23e6:	8d 8b       	std	Y+21, r24	; 0x15
    23e8:	9e 8b       	std	Y+22, r25	; 0x16
    23ea:	af 8b       	std	Y+23, r26	; 0x17
    23ec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23ee:	6d 89       	ldd	r22, Y+21	; 0x15
    23f0:	7e 89       	ldd	r23, Y+22	; 0x16
    23f2:	8f 89       	ldd	r24, Y+23	; 0x17
    23f4:	98 8d       	ldd	r25, Y+24	; 0x18
    23f6:	2b ea       	ldi	r18, 0xAB	; 171
    23f8:	3a ea       	ldi	r19, 0xAA	; 170
    23fa:	4a e2       	ldi	r20, 0x2A	; 42
    23fc:	50 e4       	ldi	r21, 0x40	; 64
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	89 8b       	std	Y+17, r24	; 0x11
    2408:	9a 8b       	std	Y+18, r25	; 0x12
    240a:	ab 8b       	std	Y+19, r26	; 0x13
    240c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    240e:	69 89       	ldd	r22, Y+17	; 0x11
    2410:	7a 89       	ldd	r23, Y+18	; 0x12
    2412:	8b 89       	ldd	r24, Y+19	; 0x13
    2414:	9c 89       	ldd	r25, Y+20	; 0x14
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	1c f4       	brge	.+6      	; 0x242c <ULTRASONIC_GetDistance2+0x70>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	88 8b       	std	Y+16, r24	; 0x10
    242a:	91 c0       	rjmp	.+290    	; 0x254e <ULTRASONIC_GetDistance2+0x192>
	else if (__tmp > 255)
    242c:	69 89       	ldd	r22, Y+17	; 0x11
    242e:	7a 89       	ldd	r23, Y+18	; 0x12
    2430:	8b 89       	ldd	r24, Y+19	; 0x13
    2432:	9c 89       	ldd	r25, Y+20	; 0x14
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	53 e4       	ldi	r21, 0x43	; 67
    243c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	0c f0       	brlt	.+2      	; 0x2446 <ULTRASONIC_GetDistance2+0x8a>
    2444:	7b c0       	rjmp	.+246    	; 0x253c <ULTRASONIC_GetDistance2+0x180>
	{
		_delay_ms(__us / 1000.0);
    2446:	6d 89       	ldd	r22, Y+21	; 0x15
    2448:	7e 89       	ldd	r23, Y+22	; 0x16
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a e7       	ldi	r20, 0x7A	; 122
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8c 87       	std	Y+12, r24	; 0x0c
    2460:	9d 87       	std	Y+13, r25	; 0x0d
    2462:	ae 87       	std	Y+14, r26	; 0x0e
    2464:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2466:	6c 85       	ldd	r22, Y+12	; 0x0c
    2468:	7d 85       	ldd	r23, Y+13	; 0x0d
    246a:	8e 85       	ldd	r24, Y+14	; 0x0e
    246c:	9f 85       	ldd	r25, Y+15	; 0x0f
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a ef       	ldi	r20, 0xFA	; 250
    2474:	54 e4       	ldi	r21, 0x44	; 68
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	88 87       	std	Y+8, r24	; 0x08
    2480:	99 87       	std	Y+9, r25	; 0x09
    2482:	aa 87       	std	Y+10, r26	; 0x0a
    2484:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2486:	68 85       	ldd	r22, Y+8	; 0x08
    2488:	79 85       	ldd	r23, Y+9	; 0x09
    248a:	8a 85       	ldd	r24, Y+10	; 0x0a
    248c:	9b 85       	ldd	r25, Y+11	; 0x0b
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e8       	ldi	r20, 0x80	; 128
    2494:	5f e3       	ldi	r21, 0x3F	; 63
    2496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249a:	88 23       	and	r24, r24
    249c:	2c f4       	brge	.+10     	; 0x24a8 <ULTRASONIC_GetDistance2+0xec>
		__ticks = 1;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9f 83       	std	Y+7, r25	; 0x07
    24a4:	8e 83       	std	Y+6, r24	; 0x06
    24a6:	3f c0       	rjmp	.+126    	; 0x2526 <ULTRASONIC_GetDistance2+0x16a>
	else if (__tmp > 65535)
    24a8:	68 85       	ldd	r22, Y+8	; 0x08
    24aa:	79 85       	ldd	r23, Y+9	; 0x09
    24ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	3f ef       	ldi	r19, 0xFF	; 255
    24b4:	4f e7       	ldi	r20, 0x7F	; 127
    24b6:	57 e4       	ldi	r21, 0x47	; 71
    24b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24bc:	18 16       	cp	r1, r24
    24be:	4c f5       	brge	.+82     	; 0x2512 <ULTRASONIC_GetDistance2+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    24c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    24c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9f 83       	std	Y+7, r25	; 0x07
    24e6:	8e 83       	std	Y+6, r24	; 0x06
    24e8:	0f c0       	rjmp	.+30     	; 0x2508 <ULTRASONIC_GetDistance2+0x14c>
    24ea:	88 ec       	ldi	r24, 0xC8	; 200
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9d 83       	std	Y+5, r25	; 0x05
    24f0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	9d 81       	ldd	r25, Y+5	; 0x05
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <ULTRASONIC_GetDistance2+0x13a>
    24fa:	9d 83       	std	Y+5, r25	; 0x05
    24fc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2500:	9f 81       	ldd	r25, Y+7	; 0x07
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	9f 83       	std	Y+7, r25	; 0x07
    2506:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2508:	8e 81       	ldd	r24, Y+6	; 0x06
    250a:	9f 81       	ldd	r25, Y+7	; 0x07
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	69 f7       	brne	.-38     	; 0x24ea <ULTRASONIC_GetDistance2+0x12e>
    2510:	24 c0       	rjmp	.+72     	; 0x255a <ULTRASONIC_GetDistance2+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2512:	68 85       	ldd	r22, Y+8	; 0x08
    2514:	79 85       	ldd	r23, Y+9	; 0x09
    2516:	8a 85       	ldd	r24, Y+10	; 0x0a
    2518:	9b 85       	ldd	r25, Y+11	; 0x0b
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9f 83       	std	Y+7, r25	; 0x07
    2524:	8e 83       	std	Y+6, r24	; 0x06
    2526:	8e 81       	ldd	r24, Y+6	; 0x06
    2528:	9f 81       	ldd	r25, Y+7	; 0x07
    252a:	9b 83       	std	Y+3, r25	; 0x03
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	9b 81       	ldd	r25, Y+3	; 0x03
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <ULTRASONIC_GetDistance2+0x176>
    2536:	9b 83       	std	Y+3, r25	; 0x03
    2538:	8a 83       	std	Y+2, r24	; 0x02
    253a:	0f c0       	rjmp	.+30     	; 0x255a <ULTRASONIC_GetDistance2+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    253c:	69 89       	ldd	r22, Y+17	; 0x11
    253e:	7a 89       	ldd	r23, Y+18	; 0x12
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	88 8b       	std	Y+16, r24	; 0x10
    254e:	88 89       	ldd	r24, Y+16	; 0x10
    2550:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	8a 95       	dec	r24
    2556:	f1 f7       	brne	.-4      	; 0x2554 <ULTRASONIC_GetDistance2+0x198>
    2558:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_uint8SetValuePIN(ultrasonic_port , ultrasonic_pin , PIN_LOW);
    255a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    255c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_uint8SetValuePIN>

	while (!DIO_uint8Read_PIN(PORT_D,PIN_6));
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	66 e0       	ldi	r22, 0x06	; 6
    2568:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <DIO_uint8Read_PIN>
    256c:	88 23       	and	r24, r24
    256e:	d1 f3       	breq	.-12     	; 0x2564 <ULTRASONIC_GetDistance2+0x1a8>
	TCNT1=0;
    2570:	ec e4       	ldi	r30, 0x4C	; 76
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	11 82       	std	Z+1, r1	; 0x01
    2576:	10 82       	st	Z, r1
	while (DIO_uint8Read_PIN(PORT_D,PIN_6));
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	66 e0       	ldi	r22, 0x06	; 6
    257c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <DIO_uint8Read_PIN>
    2580:	88 23       	and	r24, r24
    2582:	d1 f7       	brne	.-12     	; 0x2578 <ULTRASONIC_GetDistance2+0x1bc>
	time=TCNT1;
    2584:	ec e4       	ldi	r30, 0x4C	; 76
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	9a 8f       	std	Y+26, r25	; 0x1a
    258e:	89 8f       	std	Y+25, r24	; 0x19
	distance=time/58;
    2590:	89 8d       	ldd	r24, Y+25	; 0x19
    2592:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2594:	2a e3       	ldi	r18, 0x3A	; 58
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	b9 01       	movw	r22, r18
    259a:	0e 94 4e 13 	call	0x269c	; 0x269c <__udivmodhi4>
    259e:	cb 01       	movw	r24, r22
    25a0:	8b 8f       	std	Y+27, r24	; 0x1b
	return distance;
    25a2:	8b 8d       	ldd	r24, Y+27	; 0x1b

}
    25a4:	6d 96       	adiw	r28, 0x1d	; 29
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <Func_ICU>:

static void Func_ICU(void)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
	if(flag==0)
    25be:	80 91 74 00 	lds	r24, 0x0074
    25c2:	90 91 75 00 	lds	r25, 0x0075
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	b1 f4       	brne	.+44     	; 0x25f6 <Func_ICU+0x40>
	{
		c=0;
    25ca:	10 92 77 00 	sts	0x0077, r1
    25ce:	10 92 76 00 	sts	0x0076, r1
		t1=ICR1;
    25d2:	e6 e4       	ldi	r30, 0x46	; 70
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	90 93 79 00 	sts	0x0079, r25
    25de:	80 93 78 00 	sts	0x0078, r24
		flag=1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	90 93 75 00 	sts	0x0075, r25
    25ea:	80 93 74 00 	sts	0x0074, r24
		Timer1_InputCaptureEdge(FALLING);
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	0e 94 94 09 	call	0x1328	; 0x1328 <Timer1_InputCaptureEdge>
    25f4:	1c c0       	rjmp	.+56     	; 0x262e <Func_ICU+0x78>
	}
	else if (flag==1)
    25f6:	80 91 74 00 	lds	r24, 0x0074
    25fa:	90 91 75 00 	lds	r25, 0x0075
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	91 05       	cpc	r25, r1
    2602:	a9 f4       	brne	.+42     	; 0x262e <Func_ICU+0x78>
	{
		t2=ICR1;
    2604:	e6 e4       	ldi	r30, 0x46	; 70
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	90 93 7b 00 	sts	0x007B, r25
    2610:	80 93 7a 00 	sts	0x007A, r24
		flag=2;
    2614:	82 e0       	ldi	r24, 0x02	; 2
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	90 93 75 00 	sts	0x0075, r25
    261c:	80 93 74 00 	sts	0x0074, r24
		Timer1_InputCaptureEdge(RISING);
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	0e 94 94 09 	call	0x1328	; 0x1328 <Timer1_InputCaptureEdge>
		Timer1_OVF_InterruptDisable();
    2626:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Timer1_OVF_InterruptDisable>
		Timer1_ICU_InterruptDisable();
    262a:	0e 94 c1 09 	call	0x1382	; 0x1382 <Timer1_ICU_InterruptDisable>
	}
}
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <Func_OVF>:

static void Func_OVF(void)
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
	c++;
    263c:	80 91 76 00 	lds	r24, 0x0076
    2640:	90 91 77 00 	lds	r25, 0x0077
    2644:	01 96       	adiw	r24, 0x01	; 1
    2646:	90 93 77 00 	sts	0x0077, r25
    264a:	80 93 76 00 	sts	0x0076, r24
}
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <main>:


#include "Ultrasonic.h"

void main()
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	ff cf       	rjmp	.-2      	; 0x265c <main+0x8>

0000265e <__mulsi3>:
    265e:	62 9f       	mul	r22, r18
    2660:	d0 01       	movw	r26, r0
    2662:	73 9f       	mul	r23, r19
    2664:	f0 01       	movw	r30, r0
    2666:	82 9f       	mul	r24, r18
    2668:	e0 0d       	add	r30, r0
    266a:	f1 1d       	adc	r31, r1
    266c:	64 9f       	mul	r22, r20
    266e:	e0 0d       	add	r30, r0
    2670:	f1 1d       	adc	r31, r1
    2672:	92 9f       	mul	r25, r18
    2674:	f0 0d       	add	r31, r0
    2676:	83 9f       	mul	r24, r19
    2678:	f0 0d       	add	r31, r0
    267a:	74 9f       	mul	r23, r20
    267c:	f0 0d       	add	r31, r0
    267e:	65 9f       	mul	r22, r21
    2680:	f0 0d       	add	r31, r0
    2682:	99 27       	eor	r25, r25
    2684:	72 9f       	mul	r23, r18
    2686:	b0 0d       	add	r27, r0
    2688:	e1 1d       	adc	r30, r1
    268a:	f9 1f       	adc	r31, r25
    268c:	63 9f       	mul	r22, r19
    268e:	b0 0d       	add	r27, r0
    2690:	e1 1d       	adc	r30, r1
    2692:	f9 1f       	adc	r31, r25
    2694:	bd 01       	movw	r22, r26
    2696:	cf 01       	movw	r24, r30
    2698:	11 24       	eor	r1, r1
    269a:	08 95       	ret

0000269c <__udivmodhi4>:
    269c:	aa 1b       	sub	r26, r26
    269e:	bb 1b       	sub	r27, r27
    26a0:	51 e1       	ldi	r21, 0x11	; 17
    26a2:	07 c0       	rjmp	.+14     	; 0x26b2 <__udivmodhi4_ep>

000026a4 <__udivmodhi4_loop>:
    26a4:	aa 1f       	adc	r26, r26
    26a6:	bb 1f       	adc	r27, r27
    26a8:	a6 17       	cp	r26, r22
    26aa:	b7 07       	cpc	r27, r23
    26ac:	10 f0       	brcs	.+4      	; 0x26b2 <__udivmodhi4_ep>
    26ae:	a6 1b       	sub	r26, r22
    26b0:	b7 0b       	sbc	r27, r23

000026b2 <__udivmodhi4_ep>:
    26b2:	88 1f       	adc	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	5a 95       	dec	r21
    26b8:	a9 f7       	brne	.-22     	; 0x26a4 <__udivmodhi4_loop>
    26ba:	80 95       	com	r24
    26bc:	90 95       	com	r25
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	08 95       	ret

000026c4 <__prologue_saves__>:
    26c4:	2f 92       	push	r2
    26c6:	3f 92       	push	r3
    26c8:	4f 92       	push	r4
    26ca:	5f 92       	push	r5
    26cc:	6f 92       	push	r6
    26ce:	7f 92       	push	r7
    26d0:	8f 92       	push	r8
    26d2:	9f 92       	push	r9
    26d4:	af 92       	push	r10
    26d6:	bf 92       	push	r11
    26d8:	cf 92       	push	r12
    26da:	df 92       	push	r13
    26dc:	ef 92       	push	r14
    26de:	ff 92       	push	r15
    26e0:	0f 93       	push	r16
    26e2:	1f 93       	push	r17
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	ca 1b       	sub	r28, r26
    26ee:	db 0b       	sbc	r29, r27
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	09 94       	ijmp

000026fc <__epilogue_restores__>:
    26fc:	2a 88       	ldd	r2, Y+18	; 0x12
    26fe:	39 88       	ldd	r3, Y+17	; 0x11
    2700:	48 88       	ldd	r4, Y+16	; 0x10
    2702:	5f 84       	ldd	r5, Y+15	; 0x0f
    2704:	6e 84       	ldd	r6, Y+14	; 0x0e
    2706:	7d 84       	ldd	r7, Y+13	; 0x0d
    2708:	8c 84       	ldd	r8, Y+12	; 0x0c
    270a:	9b 84       	ldd	r9, Y+11	; 0x0b
    270c:	aa 84       	ldd	r10, Y+10	; 0x0a
    270e:	b9 84       	ldd	r11, Y+9	; 0x09
    2710:	c8 84       	ldd	r12, Y+8	; 0x08
    2712:	df 80       	ldd	r13, Y+7	; 0x07
    2714:	ee 80       	ldd	r14, Y+6	; 0x06
    2716:	fd 80       	ldd	r15, Y+5	; 0x05
    2718:	0c 81       	ldd	r16, Y+4	; 0x04
    271a:	1b 81       	ldd	r17, Y+3	; 0x03
    271c:	aa 81       	ldd	r26, Y+2	; 0x02
    271e:	b9 81       	ldd	r27, Y+1	; 0x01
    2720:	ce 0f       	add	r28, r30
    2722:	d1 1d       	adc	r29, r1
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	ed 01       	movw	r28, r26
    2730:	08 95       	ret

00002732 <_exit>:
    2732:	f8 94       	cli

00002734 <__stop_program>:
    2734:	ff cf       	rjmp	.-2      	; 0x2734 <__stop_program>
