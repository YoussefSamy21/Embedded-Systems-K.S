
STM32F103C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b7c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000cac  08000cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cd0  08000cd0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd0  08000cd0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd0  08000cd0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd0  08000cd0  00010cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000008  08000ce0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000ce0  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fef  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004eb  00000000  00000000  00021020  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009e0  00000000  00000000  0002150b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00021ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  00022088  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000338  00000000  00000000  000221d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000007e7  00000000  00000000  00022510  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000051cb  00000000  00000000  00022cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00027ec2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000051c  00000000  00000000  00027f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c94 	.word	0x08000c94

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000c94 	.word	0x08000c94

08000170 <waitMs>:

#include "LCD_interface.h"

/* Make a delay function */
static void waitMs(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0 ; i< time ;i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <waitMs+0x26>
		for(j=0 ; j< 255 ;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <waitMs+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <waitMs+0x14>
	for(i=0 ; i< time ;i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <waitMs+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_init>:

uint8_t DATA_Pins[8] = DATA_PINS;

void LCD_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t Pin_Confg;
	uint8_t i;

	// Configure RS,RW,EN Pins as Output
	Pin_Confg.GPIO_PinNumber = RS;
 80001ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001b2:	803b      	strh	r3, [r7, #0]
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b4:	2304      	movs	r3, #4
 80001b6:	70bb      	strb	r3, [r7, #2]
	Pin_Confg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001b8:	2301      	movs	r3, #1
 80001ba:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(PORT_CONTROL, &Pin_Confg);
 80001bc:	463b      	mov	r3, r7
 80001be:	4619      	mov	r1, r3
 80001c0:	4823      	ldr	r0, [pc, #140]	; (8000250 <LCD_init+0xa8>)
 80001c2:	f000 fc12 	bl	80009ea <MCAL_GPIO_Init>

	Pin_Confg.GPIO_PinNumber = RW;
 80001c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001ca:	803b      	strh	r3, [r7, #0]
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001cc:	2304      	movs	r3, #4
 80001ce:	70bb      	strb	r3, [r7, #2]
	Pin_Confg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d0:	2301      	movs	r3, #1
 80001d2:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(PORT_CONTROL, &Pin_Confg);
 80001d4:	463b      	mov	r3, r7
 80001d6:	4619      	mov	r1, r3
 80001d8:	481d      	ldr	r0, [pc, #116]	; (8000250 <LCD_init+0xa8>)
 80001da:	f000 fc06 	bl	80009ea <MCAL_GPIO_Init>

	Pin_Confg.GPIO_PinNumber = EN;
 80001de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e2:	803b      	strh	r3, [r7, #0]
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e4:	2304      	movs	r3, #4
 80001e6:	70bb      	strb	r3, [r7, #2]
	Pin_Confg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e8:	2301      	movs	r3, #1
 80001ea:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(PORT_CONTROL, &Pin_Confg);
 80001ec:	463b      	mov	r3, r7
 80001ee:	4619      	mov	r1, r3
 80001f0:	4817      	ldr	r0, [pc, #92]	; (8000250 <LCD_init+0xa8>)
 80001f2:	f000 fbfa 	bl	80009ea <MCAL_GPIO_Init>

	waitMs(30);
 80001f6:	201e      	movs	r0, #30
 80001f8:	f7ff ffba 	bl	8000170 <waitMs>

	//Configure ALL DATA Pins as output
	for(i=0 ; i<8 ; i++)
 80001fc:	2300      	movs	r3, #0
 80001fe:	71fb      	strb	r3, [r7, #7]
 8000200:	e010      	b.n	8000224 <LCD_init+0x7c>
	{
		Pin_Confg.GPIO_PinNumber = DATA_Pins[i];
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4a13      	ldr	r2, [pc, #76]	; (8000254 <LCD_init+0xac>)
 8000206:	5cd3      	ldrb	r3, [r2, r3]
 8000208:	b29b      	uxth	r3, r3
 800020a:	803b      	strh	r3, [r7, #0]
		Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800020c:	2304      	movs	r3, #4
 800020e:	70bb      	strb	r3, [r7, #2]
		Pin_Confg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000210:	2301      	movs	r3, #1
 8000212:	70fb      	strb	r3, [r7, #3]
		MCAL_GPIO_Init(PORT_DATA, &Pin_Confg);
 8000214:	463b      	mov	r3, r7
 8000216:	4619      	mov	r1, r3
 8000218:	480d      	ldr	r0, [pc, #52]	; (8000250 <LCD_init+0xa8>)
 800021a:	f000 fbe6 	bl	80009ea <MCAL_GPIO_Init>
	for(i=0 ; i<8 ; i++)
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	3301      	adds	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	2b07      	cmp	r3, #7
 8000228:	d9eb      	bls.n	8000202 <LCD_init+0x5a>
	}

	LCD_SEND_COMMAND(lcd_Home);
 800022a:	2002      	movs	r0, #2
 800022c:	f000 f814 	bl	8000258 <LCD_SEND_COMMAND>

	LCD_SEND_COMMAND(FUN_SET_8BIT_2LINE);
 8000230:	2038      	movs	r0, #56	; 0x38
 8000232:	f000 f811 	bl	8000258 <LCD_SEND_COMMAND>

	LCD_SEND_COMMAND(DisplayOn_CursorOn);
 8000236:	200e      	movs	r0, #14
 8000238:	f000 f80e 	bl	8000258 <LCD_SEND_COMMAND>

	LCD_SEND_COMMAND(Clear_Display);
 800023c:	2001      	movs	r0, #1
 800023e:	f000 f80b 	bl	8000258 <LCD_SEND_COMMAND>

	LCD_SEND_COMMAND(Entry_Mode);
 8000242:	2006      	movs	r0, #6
 8000244:	f000 f808 	bl	8000258 <LCD_SEND_COMMAND>

}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40010800 	.word	0x40010800
 8000254:	20000000 	.word	0x20000000

08000258 <LCD_SEND_COMMAND>:

/*-------------------------------------------------------------------------------------*/

void LCD_SEND_COMMAND(Commands copy_command)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(PORT_CONTROL, RS, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000268:	4816      	ldr	r0, [pc, #88]	; (80002c4 <LCD_SEND_COMMAND+0x6c>)
 800026a:	f000 fc3d 	bl	8000ae8 <MCAL_GPIO_WritePin>

	MCAL_GPIO_WritePin(PORT_CONTROL, RW, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000274:	4813      	ldr	r0, [pc, #76]	; (80002c4 <LCD_SEND_COMMAND+0x6c>)
 8000276:	f000 fc37 	bl	8000ae8 <MCAL_GPIO_WritePin>

	PORT_DATA->ODR = (PORT_DATA->ODR & 0xFF00) | copy_command;
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <LCD_SEND_COMMAND+0x6c>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	490f      	ldr	r1, [pc, #60]	; (80002c4 <LCD_SEND_COMMAND+0x6c>)
 8000286:	4313      	orrs	r3, r2
 8000288:	60cb      	str	r3, [r1, #12]

	// giving a PULSE to the EN pin
	MCAL_GPIO_WritePin(PORT_CONTROL , EN , GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LCD_SEND_COMMAND+0x6c>)
 8000292:	f000 fc29 	bl	8000ae8 <MCAL_GPIO_WritePin>
	waitMs(50);
 8000296:	2032      	movs	r0, #50	; 0x32
 8000298:	f7ff ff6a 	bl	8000170 <waitMs>

	MCAL_GPIO_WritePin(PORT_CONTROL , EN , GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a2:	4808      	ldr	r0, [pc, #32]	; (80002c4 <LCD_SEND_COMMAND+0x6c>)
 80002a4:	f000 fc20 	bl	8000ae8 <MCAL_GPIO_WritePin>
	waitMs(50);
 80002a8:	2032      	movs	r0, #50	; 0x32
 80002aa:	f7ff ff61 	bl	8000170 <waitMs>

	MCAL_GPIO_WritePin(PORT_CONTROL , EN , GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <LCD_SEND_COMMAND+0x6c>)
 80002b6:	f000 fc17 	bl	8000ae8 <MCAL_GPIO_WritePin>

}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010800 	.word	0x40010800

080002c8 <LCD_SEND_DATA_8bit>:

/*-------------------------------------------------------------------------------------*/

void LCD_SEND_DATA_8bit(uint8_t DATA)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(PORT_CONTROL, RS, GPIO_PIN_SET);
 80002d2:	2201      	movs	r2, #1
 80002d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d8:	4819      	ldr	r0, [pc, #100]	; (8000340 <LCD_SEND_DATA_8bit+0x78>)
 80002da:	f000 fc05 	bl	8000ae8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(PORT_CONTROL, RW, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e4:	4816      	ldr	r0, [pc, #88]	; (8000340 <LCD_SEND_DATA_8bit+0x78>)
 80002e6:	f000 fbff 	bl	8000ae8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(PORT_CONTROL, EN, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <LCD_SEND_DATA_8bit+0x78>)
 80002f2:	f000 fbf9 	bl	8000ae8 <MCAL_GPIO_WritePin>

	PORT_DATA->ODR = (PORT_DATA->ODR & 0xFF00) | DATA;
 80002f6:	4b12      	ldr	r3, [pc, #72]	; (8000340 <LCD_SEND_DATA_8bit+0x78>)
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	490f      	ldr	r1, [pc, #60]	; (8000340 <LCD_SEND_DATA_8bit+0x78>)
 8000302:	4313      	orrs	r3, r2
 8000304:	60cb      	str	r3, [r1, #12]

	// giving a PULSE to the EN pin
	MCAL_GPIO_WritePin(PORT_CONTROL , EN , GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <LCD_SEND_DATA_8bit+0x78>)
 800030e:	f000 fbeb 	bl	8000ae8 <MCAL_GPIO_WritePin>
	waitMs(50);
 8000312:	2032      	movs	r0, #50	; 0x32
 8000314:	f7ff ff2c 	bl	8000170 <waitMs>

	MCAL_GPIO_WritePin(PORT_CONTROL , EN , GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031e:	4808      	ldr	r0, [pc, #32]	; (8000340 <LCD_SEND_DATA_8bit+0x78>)
 8000320:	f000 fbe2 	bl	8000ae8 <MCAL_GPIO_WritePin>
	waitMs(50);
 8000324:	2032      	movs	r0, #50	; 0x32
 8000326:	f7ff ff23 	bl	8000170 <waitMs>

	MCAL_GPIO_WritePin(PORT_CONTROL , EN , GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000330:	4803      	ldr	r0, [pc, #12]	; (8000340 <LCD_SEND_DATA_8bit+0x78>)
 8000332:	f000 fbd9 	bl	8000ae8 <MCAL_GPIO_WritePin>
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800

08000344 <LCD_SEND_STRING>:
}

/*-------------------------------------------------------------------------------------*/

void LCD_SEND_STRING(uint8_t *ptr)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
	while(ptr[i] != '\0')
 8000350:	e009      	b.n	8000366 <LCD_SEND_STRING+0x22>
	{
		LCD_SEND_DATA_8bit(ptr[i]);
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4413      	add	r3, r2
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffb4 	bl	80002c8 <LCD_SEND_DATA_8bit>
		i++;
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	3301      	adds	r3, #1
 8000364:	73fb      	strb	r3, [r7, #15]
	while(ptr[i] != '\0')
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d1ef      	bne.n	8000352 <LCD_SEND_STRING+0xe>
	}

}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <NVIC_ENABLE>:
						(Port==GPIOD)?3:0)

/**************************************** Private Functions *****************************************/
// Switching on the EXTI_Line to enable/disable the NVIC IRQ
void NVIC_ENABLE(uint8_t EXTI_LINE)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	switch(EXTI_LINE)
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b0f      	cmp	r3, #15
 800038a:	d854      	bhi.n	8000436 <NVIC_ENABLE+0xba>
 800038c:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <NVIC_ENABLE+0x18>)
 800038e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000392:	bf00      	nop
 8000394:	080003d5 	.word	0x080003d5
 8000398:	080003e3 	.word	0x080003e3
 800039c:	080003f1 	.word	0x080003f1
 80003a0:	080003ff 	.word	0x080003ff
 80003a4:	0800040d 	.word	0x0800040d
 80003a8:	0800041b 	.word	0x0800041b
 80003ac:	0800041b 	.word	0x0800041b
 80003b0:	0800041b 	.word	0x0800041b
 80003b4:	0800041b 	.word	0x0800041b
 80003b8:	0800041b 	.word	0x0800041b
 80003bc:	08000429 	.word	0x08000429
 80003c0:	08000429 	.word	0x08000429
 80003c4:	08000429 	.word	0x08000429
 80003c8:	08000429 	.word	0x08000429
 80003cc:	08000429 	.word	0x08000429
 80003d0:	08000429 	.word	0x08000429
	{
		case 0:
			NVIC_IRQ6_EXTI0_ENABLE();      break;
 80003d4:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <NVIC_ENABLE+0xc4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a19      	ldr	r2, [pc, #100]	; (8000440 <NVIC_ENABLE+0xc4>)
 80003da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003de:	6013      	str	r3, [r2, #0]
 80003e0:	e029      	b.n	8000436 <NVIC_ENABLE+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_ENABLE();      break;
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <NVIC_ENABLE+0xc4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a16      	ldr	r2, [pc, #88]	; (8000440 <NVIC_ENABLE+0xc4>)
 80003e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ec:	6013      	str	r3, [r2, #0]
 80003ee:	e022      	b.n	8000436 <NVIC_ENABLE+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_ENABLE();      break;
 80003f0:	4b13      	ldr	r3, [pc, #76]	; (8000440 <NVIC_ENABLE+0xc4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a12      	ldr	r2, [pc, #72]	; (8000440 <NVIC_ENABLE+0xc4>)
 80003f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fa:	6013      	str	r3, [r2, #0]
 80003fc:	e01b      	b.n	8000436 <NVIC_ENABLE+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_ENABLE();      break;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <NVIC_ENABLE+0xc4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <NVIC_ENABLE+0xc4>)
 8000404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	e014      	b.n	8000436 <NVIC_ENABLE+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_ENABLE();     break;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <NVIC_ENABLE+0xc4>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <NVIC_ENABLE+0xc4>)
 8000412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	e00d      	b.n	8000436 <NVIC_ENABLE+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI9_5_ENABLE();   break;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <NVIC_ENABLE+0xc4>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a08      	ldr	r2, [pc, #32]	; (8000440 <NVIC_ENABLE+0xc4>)
 8000420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000424:	6013      	str	r3, [r2, #0]
 8000426:	e006      	b.n	8000436 <NVIC_ENABLE+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI15_10_ENABLE(); break;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <NVIC_ENABLE+0xc8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <NVIC_ENABLE+0xc8>)
 800042e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000432:	6013      	str	r3, [r2, #0]
 8000434:	bf00      	nop
	}
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	e000e100 	.word	0xe000e100
 8000444:	e000e110 	.word	0xe000e110

08000448 <NVIC_DISABLE>:

void NVIC_DISABLE(uint8_t EXTI_LINE)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
	switch(EXTI_LINE)
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b0f      	cmp	r3, #15
 8000456:	d854      	bhi.n	8000502 <NVIC_DISABLE+0xba>
 8000458:	a201      	add	r2, pc, #4	; (adr r2, 8000460 <NVIC_DISABLE+0x18>)
 800045a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800045e:	bf00      	nop
 8000460:	080004a1 	.word	0x080004a1
 8000464:	080004af 	.word	0x080004af
 8000468:	080004bd 	.word	0x080004bd
 800046c:	080004cb 	.word	0x080004cb
 8000470:	080004d9 	.word	0x080004d9
 8000474:	080004e7 	.word	0x080004e7
 8000478:	080004e7 	.word	0x080004e7
 800047c:	080004e7 	.word	0x080004e7
 8000480:	080004e7 	.word	0x080004e7
 8000484:	080004e7 	.word	0x080004e7
 8000488:	080004f5 	.word	0x080004f5
 800048c:	080004f5 	.word	0x080004f5
 8000490:	080004f5 	.word	0x080004f5
 8000494:	080004f5 	.word	0x080004f5
 8000498:	080004f5 	.word	0x080004f5
 800049c:	080004f5 	.word	0x080004f5
	{
		case 0:
			NVIC_IRQ6_EXTI0_DISABLE();      break;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <NVIC_DISABLE+0xc4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a19      	ldr	r2, [pc, #100]	; (800050c <NVIC_DISABLE+0xc4>)
 80004a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004aa:	6013      	str	r3, [r2, #0]
 80004ac:	e029      	b.n	8000502 <NVIC_DISABLE+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_DISABLE();      break;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <NVIC_DISABLE+0xc4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a16      	ldr	r2, [pc, #88]	; (800050c <NVIC_DISABLE+0xc4>)
 80004b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b8:	6013      	str	r3, [r2, #0]
 80004ba:	e022      	b.n	8000502 <NVIC_DISABLE+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_DISABLE();      break;
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <NVIC_DISABLE+0xc4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a12      	ldr	r2, [pc, #72]	; (800050c <NVIC_DISABLE+0xc4>)
 80004c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004c6:	6013      	str	r3, [r2, #0]
 80004c8:	e01b      	b.n	8000502 <NVIC_DISABLE+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_DISABLE();      break;
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <NVIC_DISABLE+0xc4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a0f      	ldr	r2, [pc, #60]	; (800050c <NVIC_DISABLE+0xc4>)
 80004d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d4:	6013      	str	r3, [r2, #0]
 80004d6:	e014      	b.n	8000502 <NVIC_DISABLE+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_DISABLE();     break;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <NVIC_DISABLE+0xc4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <NVIC_DISABLE+0xc4>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
 80004e4:	e00d      	b.n	8000502 <NVIC_DISABLE+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI9_5_DISABLE();   break;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <NVIC_DISABLE+0xc4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a08      	ldr	r2, [pc, #32]	; (800050c <NVIC_DISABLE+0xc4>)
 80004ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004f0:	6013      	str	r3, [r2, #0]
 80004f2:	e006      	b.n	8000502 <NVIC_DISABLE+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI15_10_DISABLE(); break;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <NVIC_DISABLE+0xc8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <NVIC_DISABLE+0xc8>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	bf00      	nop
	}
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	e000e300 	.word	0xe000e300
 8000510:	e000e310 	.word	0xe000e310

08000514 <Update_EXTI>:


void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	/****************** 1- Configure GPIO Pin to be alternate input floating  ******************/
	GPIO_PinConfig_t pinCfg;
	pinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	7a1b      	ldrb	r3, [r3, #8]
 8000520:	b29b      	uxth	r3, r3
 8000522:	813b      	strh	r3, [r7, #8]
	pinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000524:	2308      	movs	r3, #8
 8000526:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.EXTI_GPIO, &pinCfg);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	f107 0208 	add.w	r2, r7, #8
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fa59 	bl	80009ea <MCAL_GPIO_Init>


	/***************** 2- Select the EXTI Line in AFIO Registers *********************/
	// Smart and Short Method (using math equations) for determining the EXTI Line instead of Long Code by Conditioning
	uint8_t AFIO_EXTICR_Index = (EXTI_Config->EXTI_PIN.EXTI_LINE) / 4;				// To get the register that contain the EXTI_LINE
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	089b      	lsrs	r3, r3, #2
 800053e:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_BitPosition = ((EXTI_Config->EXTI_PIN.EXTI_LINE) % 4) * 4;	// To get the position of the bits for specified EXTI_LINE
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	f003 0303 	and.w	r3, r3, #3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	73bb      	strb	r3, [r7, #14]

	// First Clear (Mask) the bits of the specified EXTI_LINE
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xf<<AFIO_EXTICR_BitPosition);
 800054e:	4a60      	ldr	r2, [pc, #384]	; (80006d0 <Update_EXTI+0x1bc>)
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	3302      	adds	r3, #2
 8000554:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	210f      	movs	r1, #15
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	495a      	ldr	r1, [pc, #360]	; (80006d0 <Update_EXTI+0x1bc>)
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	4002      	ands	r2, r0
 800056a:	3302      	adds	r3, #2
 800056c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// Configure the EXTI_LINE according to the port
	AFIO->EXTICR[AFIO_EXTICR_Index] |= (AFIO_GPIO_PORT_MAPPING(EXTI_Config->EXTI_PIN.EXTI_GPIO)<<AFIO_EXTICR_BitPosition);
 8000570:	4a57      	ldr	r2, [pc, #348]	; (80006d0 <Update_EXTI+0x1bc>)
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	3302      	adds	r3, #2
 8000576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	4955      	ldr	r1, [pc, #340]	; (80006d4 <Update_EXTI+0x1c0>)
 8000580:	428b      	cmp	r3, r1
 8000582:	d016      	beq.n	80005b2 <Update_EXTI+0x9e>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4953      	ldr	r1, [pc, #332]	; (80006d8 <Update_EXTI+0x1c4>)
 800058a:	428b      	cmp	r3, r1
 800058c:	d00f      	beq.n	80005ae <Update_EXTI+0x9a>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4952      	ldr	r1, [pc, #328]	; (80006dc <Update_EXTI+0x1c8>)
 8000594:	428b      	cmp	r3, r1
 8000596:	d008      	beq.n	80005aa <Update_EXTI+0x96>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4950      	ldr	r1, [pc, #320]	; (80006e0 <Update_EXTI+0x1cc>)
 800059e:	428b      	cmp	r3, r1
 80005a0:	d101      	bne.n	80005a6 <Update_EXTI+0x92>
 80005a2:	2303      	movs	r3, #3
 80005a4:	e006      	b.n	80005b4 <Update_EXTI+0xa0>
 80005a6:	2300      	movs	r3, #0
 80005a8:	e004      	b.n	80005b4 <Update_EXTI+0xa0>
 80005aa:	2302      	movs	r3, #2
 80005ac:	e002      	b.n	80005b4 <Update_EXTI+0xa0>
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <Update_EXTI+0xa0>
 80005b2:	2300      	movs	r3, #0
 80005b4:	7bb9      	ldrb	r1, [r7, #14]
 80005b6:	408b      	lsls	r3, r1
 80005b8:	4618      	mov	r0, r3
 80005ba:	4945      	ldr	r1, [pc, #276]	; (80006d0 <Update_EXTI+0x1bc>)
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4302      	orrs	r2, r0
 80005c0:	3302      	adds	r3, #2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	/***************** 3- Select the Trigger method of the external interrupt from EXTI Registers *****************/
	// First Reset the rising and falling edge configurations because this function we will use it in the update function too
	CLEAR_BIT(EXTI->RTSR,EXTI_Config->EXTI_PIN.EXTI_LINE);
 80005c6:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <Update_EXTI+0x1d0>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	4611      	mov	r1, r2
 80005d0:	2201      	movs	r2, #1
 80005d2:	408a      	lsls	r2, r1
 80005d4:	43d2      	mvns	r2, r2
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a42      	ldr	r2, [pc, #264]	; (80006e4 <Update_EXTI+0x1d0>)
 80005da:	400b      	ands	r3, r1
 80005dc:	6093      	str	r3, [r2, #8]
	CLEAR_BIT(EXTI->FTSR,EXTI_Config->EXTI_PIN.EXTI_LINE);
 80005de:	4b41      	ldr	r3, [pc, #260]	; (80006e4 <Update_EXTI+0x1d0>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7812      	ldrb	r2, [r2, #0]
 80005e6:	4611      	mov	r1, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	408a      	lsls	r2, r1
 80005ec:	43d2      	mvns	r2, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a3c      	ldr	r2, [pc, #240]	; (80006e4 <Update_EXTI+0x1d0>)
 80005f2:	400b      	ands	r3, r1
 80005f4:	60d3      	str	r3, [r2, #12]

	// Set the trigger case of the specified EXTI_LINE
	switch(EXTI_Config->Trigger_Case)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7b1b      	ldrb	r3, [r3, #12]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d00f      	beq.n	800061e <Update_EXTI+0x10a>
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d019      	beq.n	8000636 <Update_EXTI+0x122>
 8000602:	2b00      	cmp	r3, #0
 8000604:	d12e      	bne.n	8000664 <Update_EXTI+0x150>
	{
		case EXTI_TRIGGER_RISING:
			SET_BIT(EXTI->RTSR,EXTI_Config->EXTI_PIN.EXTI_LINE);
 8000606:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <Update_EXTI+0x1d0>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <Update_EXTI+0x1d0>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6093      	str	r3, [r2, #8]
			break;
 800061c:	e022      	b.n	8000664 <Update_EXTI+0x150>
		case EXTI_TRIGGER_FALLING:
			SET_BIT(EXTI->FTSR,EXTI_Config->EXTI_PIN.EXTI_LINE);
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <Update_EXTI+0x1d0>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	4611      	mov	r1, r2
 8000628:	2201      	movs	r2, #1
 800062a:	408a      	lsls	r2, r1
 800062c:	4611      	mov	r1, r2
 800062e:	4a2d      	ldr	r2, [pc, #180]	; (80006e4 <Update_EXTI+0x1d0>)
 8000630:	430b      	orrs	r3, r1
 8000632:	60d3      	str	r3, [r2, #12]
			break;
 8000634:	e016      	b.n	8000664 <Update_EXTI+0x150>
		case EXTI_TRIGGER_RISING_AND_FALLING:
			SET_BIT(EXTI->RTSR,EXTI_Config->EXTI_PIN.EXTI_LINE);
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <Update_EXTI+0x1d0>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	2201      	movs	r2, #1
 8000642:	408a      	lsls	r2, r1
 8000644:	4611      	mov	r1, r2
 8000646:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <Update_EXTI+0x1d0>)
 8000648:	430b      	orrs	r3, r1
 800064a:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR,EXTI_Config->EXTI_PIN.EXTI_LINE);
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <Update_EXTI+0x1d0>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	4611      	mov	r1, r2
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <Update_EXTI+0x1d0>)
 800065e:	430b      	orrs	r3, r1
 8000660:	60d3      	str	r3, [r2, #12]
			break;
 8000662:	bf00      	nop
	}

	/******************** 4- Initilizing the call back function sent by the user ************************/
	GP_IRQ_CallBackFunc[EXTI_Config->EXTI_PIN.EXTI_LINE] = EXTI_Config->P_IRQ_CallBack;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <Update_EXTI+0x1d4>)
 8000670:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/******************** Enable/Disable the interrupt & Enable NVIC Controller for this interrupt *************************/
	/* Enable/disable EXTI */
	switch (EXTI_Config->IRQ_EN)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7b5b      	ldrb	r3, [r3, #13]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d013      	beq.n	80006a4 <Update_EXTI+0x190>
 800067c:	2b01      	cmp	r3, #1
 800067e:	d000      	beq.n	8000682 <Update_EXTI+0x16e>
			CLEAR_BIT(EXTI->IMR,EXTI_Config->EXTI_PIN.EXTI_LINE);
			/* Enable NVIC Controller */
			NVIC_DISABLE(EXTI_Config->EXTI_PIN.EXTI_LINE);
			break;
	}
}
 8000680:	e022      	b.n	80006c8 <Update_EXTI+0x1b4>
			SET_BIT(EXTI->IMR,EXTI_Config->EXTI_PIN.EXTI_LINE);
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <Update_EXTI+0x1d0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	4611      	mov	r1, r2
 800068c:	2201      	movs	r2, #1
 800068e:	408a      	lsls	r2, r1
 8000690:	4611      	mov	r1, r2
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <Update_EXTI+0x1d0>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6013      	str	r3, [r2, #0]
			NVIC_ENABLE(EXTI_Config->EXTI_PIN.EXTI_LINE);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fe6d 	bl	800037c <NVIC_ENABLE>
			break;
 80006a2:	e011      	b.n	80006c8 <Update_EXTI+0x1b4>
			CLEAR_BIT(EXTI->IMR,EXTI_Config->EXTI_PIN.EXTI_LINE);
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <Update_EXTI+0x1d0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7812      	ldrb	r2, [r2, #0]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	43d2      	mvns	r2, r2
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <Update_EXTI+0x1d0>)
 80006b8:	400b      	ands	r3, r1
 80006ba:	6013      	str	r3, [r2, #0]
			NVIC_DISABLE(EXTI_Config->EXTI_PIN.EXTI_LINE);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fec1 	bl	8000448 <NVIC_DISABLE>
			break;
 80006c6:	bf00      	nop
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40010000 	.word	0x40010000
 80006d4:	40010800 	.word	0x40010800
 80006d8:	40010c00 	.word	0x40010c00
 80006dc:	40011000 	.word	0x40011000
 80006e0:	40011400 	.word	0x40011400
 80006e4:	40010400 	.word	0x40010400
 80006e8:	20000024 	.word	0x20000024

080006ec <MCAL_EXTI_GPIO_Init>:
 * 				    @ref EXTI_PIN_define, EXTI_TRIGGER_define, EXTI_STATE_define
 * @RetVal		:	None
 * @Note		:	Enable RCC Clock for AFIO and the coressponding GPIO
 *========================================================================================================*/
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff0d 	bl	8000514 <Update_EXTI>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <EXTI0_IRQHandler>:

/******************************************************************************
 * 								ISR Functions
 * ****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	// First Clear the pending flag to avoid infinite IRQ Handler (Clear by write 1)
	SET_BIT(EXTI->PR,0);
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <EXTI0_IRQHandler+0x1c>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <EXTI0_IRQHandler+0x1c>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6153      	str	r3, [r2, #20]

	// Calling the pointer to function that assigned by the user
	GP_IRQ_CallBackFunc[0]();
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <EXTI0_IRQHandler+0x20>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4798      	blx	r3
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40010400 	.word	0x40010400
 8000724:	20000024 	.word	0x20000024

08000728 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,1);
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <EXTI1_IRQHandler+0x1c>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <EXTI1_IRQHandler+0x1c>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBackFunc[1]();
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <EXTI1_IRQHandler+0x20>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4798      	blx	r3
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010400 	.word	0x40010400
 8000748:	20000024 	.word	0x20000024

0800074c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,2);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <EXTI2_IRQHandler+0x1c>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <EXTI2_IRQHandler+0x1c>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBackFunc[2]();
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <EXTI2_IRQHandler+0x20>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	4798      	blx	r3
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40010400 	.word	0x40010400
 800076c:	20000024 	.word	0x20000024

08000770 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,3);
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <EXTI3_IRQHandler+0x1c>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <EXTI3_IRQHandler+0x1c>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBackFunc[3]();
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <EXTI3_IRQHandler+0x20>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	4798      	blx	r3
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40010400 	.word	0x40010400
 8000790:	20000024 	.word	0x20000024

08000794 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,4);
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <EXTI4_IRQHandler+0x1c>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <EXTI4_IRQHandler+0x1c>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBackFunc[4]();
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <EXTI4_IRQHandler+0x20>)
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	4798      	blx	r3
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010400 	.word	0x40010400
 80007b4:	20000024 	.word	0x20000024

080007b8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	// Determining which IRQ occured (5-9) ...  by checking the Pending Register bits of 5-9
	if(EXTI->PR & (1<<5)) {	SET_BIT(EXTI->PR,5); GP_IRQ_CallBackFunc[5](); }
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	f003 0320 	and.w	r3, r3, #32
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d008      	beq.n	80007da <EXTI9_5_IRQHandler+0x22>
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4a22      	ldr	r2, [pc, #136]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	6153      	str	r3, [r2, #20]
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <EXTI9_5_IRQHandler+0xa4>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {	SET_BIT(EXTI->PR,6); GP_IRQ_CallBackFunc[6](); }
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <EXTI9_5_IRQHandler+0x40>
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <EXTI9_5_IRQHandler+0xa4>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {	SET_BIT(EXTI->PR,7); GP_IRQ_CallBackFunc[7](); }
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000800:	2b00      	cmp	r3, #0
 8000802:	d008      	beq.n	8000816 <EXTI9_5_IRQHandler+0x5e>
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 800080a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080e:	6153      	str	r3, [r2, #20]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <EXTI9_5_IRQHandler+0xa4>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) { SET_BIT(EXTI->PR,8); GP_IRQ_CallBackFunc[8](); }
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800081e:	2b00      	cmp	r3, #0
 8000820:	d008      	beq.n	8000834 <EXTI9_5_IRQHandler+0x7c>
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 8000828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <EXTI9_5_IRQHandler+0xa4>)
 8000830:	6a1b      	ldr	r3, [r3, #32]
 8000832:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) { SET_BIT(EXTI->PR,9); GP_IRQ_CallBackFunc[9](); }
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800083c:	2b00      	cmp	r3, #0
 800083e:	d008      	beq.n	8000852 <EXTI9_5_IRQHandler+0x9a>
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <EXTI9_5_IRQHandler+0xa0>)
 8000846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084a:	6153      	str	r3, [r2, #20]
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <EXTI9_5_IRQHandler+0xa4>)
 800084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000850:	4798      	blx	r3
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40010400 	.word	0x40010400
 800085c:	20000024 	.word	0x20000024

08000860 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	// Determining which IRQ occured (10-15) ...  by checking the Pending Register bits of 10-15
	if(EXTI->PR & (1<<10)) { SET_BIT(EXTI->PR,10); GP_IRQ_CallBackFunc[10](); }
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800086c:	2b00      	cmp	r3, #0
 800086e:	d008      	beq.n	8000882 <EXTI15_10_IRQHandler+0x22>
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a29      	ldr	r2, [pc, #164]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 8000876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800087a:	6153      	str	r3, [r2, #20]
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <EXTI15_10_IRQHandler+0xc0>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) { SET_BIT(EXTI->PR,11); GP_IRQ_CallBackFunc[11](); }
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800088a:	2b00      	cmp	r3, #0
 800088c:	d008      	beq.n	80008a0 <EXTI15_10_IRQHandler+0x40>
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a22      	ldr	r2, [pc, #136]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 8000894:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <EXTI15_10_IRQHandler+0xc0>)
 800089c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089e:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) { SET_BIT(EXTI->PR,12); GP_IRQ_CallBackFunc[12](); }
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d008      	beq.n	80008be <EXTI15_10_IRQHandler+0x5e>
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a1a      	ldr	r2, [pc, #104]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b6:	6153      	str	r3, [r2, #20]
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <EXTI15_10_IRQHandler+0xc0>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) { SET_BIT(EXTI->PR,13); GP_IRQ_CallBackFunc[13](); }
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d008      	beq.n	80008dc <EXTI15_10_IRQHandler+0x7c>
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <EXTI15_10_IRQHandler+0xc0>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008da:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) { SET_BIT(EXTI->PR,14); GP_IRQ_CallBackFunc[14](); }
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d008      	beq.n	80008fa <EXTI15_10_IRQHandler+0x9a>
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f2:	6153      	str	r3, [r2, #20]
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <EXTI15_10_IRQHandler+0xc0>)
 80008f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f8:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) { SET_BIT(EXTI->PR,15); GP_IRQ_CallBackFunc[15](); }
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d008      	beq.n	8000918 <EXTI15_10_IRQHandler+0xb8>
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a04      	ldr	r2, [pc, #16]	; (800091c <EXTI15_10_IRQHandler+0xbc>)
 800090c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b03      	ldr	r3, [pc, #12]	; (8000920 <EXTI15_10_IRQHandler+0xc0>)
 8000914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000916:	4798      	blx	r3
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40010400 	.word	0x40010400
 8000920:	20000024 	.word	0x20000024

08000924 <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber) // For Bits 0 -> 7 : we use CRL Register & For Bits 8 -> 15: we use CRH Register
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	2b80      	cmp	r3, #128	; 0x80
 8000932:	d042      	beq.n	80009ba <Get_CRLH_Position+0x96>
 8000934:	2b80      	cmp	r3, #128	; 0x80
 8000936:	dc11      	bgt.n	800095c <Get_CRLH_Position+0x38>
 8000938:	2b08      	cmp	r3, #8
 800093a:	d036      	beq.n	80009aa <Get_CRLH_Position+0x86>
 800093c:	2b08      	cmp	r3, #8
 800093e:	dc06      	bgt.n	800094e <Get_CRLH_Position+0x2a>
 8000940:	2b02      	cmp	r3, #2
 8000942:	d02e      	beq.n	80009a2 <Get_CRLH_Position+0x7e>
 8000944:	2b04      	cmp	r3, #4
 8000946:	d02e      	beq.n	80009a6 <Get_CRLH_Position+0x82>
 8000948:	2b01      	cmp	r3, #1
 800094a:	d028      	beq.n	800099e <Get_CRLH_Position+0x7a>
 800094c:	e047      	b.n	80009de <Get_CRLH_Position+0xba>
 800094e:	2b20      	cmp	r3, #32
 8000950:	d02f      	beq.n	80009b2 <Get_CRLH_Position+0x8e>
 8000952:	2b40      	cmp	r3, #64	; 0x40
 8000954:	d02f      	beq.n	80009b6 <Get_CRLH_Position+0x92>
 8000956:	2b10      	cmp	r3, #16
 8000958:	d029      	beq.n	80009ae <Get_CRLH_Position+0x8a>
 800095a:	e040      	b.n	80009de <Get_CRLH_Position+0xba>
 800095c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000960:	d033      	beq.n	80009ca <Get_CRLH_Position+0xa6>
 8000962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000966:	dc09      	bgt.n	800097c <Get_CRLH_Position+0x58>
 8000968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800096c:	d029      	beq.n	80009c2 <Get_CRLH_Position+0x9e>
 800096e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000972:	d028      	beq.n	80009c6 <Get_CRLH_Position+0xa2>
 8000974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000978:	d021      	beq.n	80009be <Get_CRLH_Position+0x9a>
 800097a:	e030      	b.n	80009de <Get_CRLH_Position+0xba>
 800097c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000980:	d027      	beq.n	80009d2 <Get_CRLH_Position+0xae>
 8000982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000986:	dc03      	bgt.n	8000990 <Get_CRLH_Position+0x6c>
 8000988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800098c:	d01f      	beq.n	80009ce <Get_CRLH_Position+0xaa>
 800098e:	e026      	b.n	80009de <Get_CRLH_Position+0xba>
 8000990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000994:	d01f      	beq.n	80009d6 <Get_CRLH_Position+0xb2>
 8000996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800099a:	d01e      	beq.n	80009da <Get_CRLH_Position+0xb6>
 800099c:	e01f      	b.n	80009de <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 800099e:	2300      	movs	r3, #0
 80009a0:	e01e      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_1:
		return 4 ;
 80009a2:	2304      	movs	r3, #4
 80009a4:	e01c      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 80009a6:	2308      	movs	r3, #8
 80009a8:	e01a      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 80009aa:	230c      	movs	r3, #12
 80009ac:	e018      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80009ae:	2310      	movs	r3, #16
 80009b0:	e016      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_5:
		return 20 ;
 80009b2:	2314      	movs	r3, #20
 80009b4:	e014      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80009b6:	2318      	movs	r3, #24
 80009b8:	e012      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80009ba:	231c      	movs	r3, #28
 80009bc:	e010      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 80009be:	2300      	movs	r3, #0
 80009c0:	e00e      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80009c2:	2304      	movs	r3, #4
 80009c4:	e00c      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80009c6:	2308      	movs	r3, #8
 80009c8:	e00a      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80009ca:	230c      	movs	r3, #12
 80009cc:	e008      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80009ce:	2310      	movs	r3, #16
 80009d0:	e006      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80009d2:	2314      	movs	r3, #20
 80009d4:	e004      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80009d6:	2318      	movs	r3, #24
 80009d8:	e002      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80009da:	231c      	movs	r3, #28
 80009dc:	e000      	b.n	80009e0 <Get_CRLH_Position+0xbc>
		break ;
	}

	return 0 ;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 80009ea:	b590      	push	{r4, r7, lr}
 80009ec:	b085      	sub	sp, #20
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	2bff      	cmp	r3, #255	; 0xff
 8000a02:	d801      	bhi.n	8000a08 <MCAL_GPIO_Init+0x1e>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	e001      	b.n	8000a0c <MCAL_GPIO_Init+0x22>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ff86 	bl	8000924 <Get_CRLH_Position>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	4093      	lsls	r3, r2
 8000a20:	43da      	mvns	r2, r3
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	401a      	ands	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	2b07      	cmp	r3, #7
 8000a32:	d00b      	beq.n	8000a4c <MCAL_GPIO_Init+0x62>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	789b      	ldrb	r3, [r3, #2]
 8000a38:	2b06      	cmp	r3, #6
 8000a3a:	d007      	beq.n	8000a4c <MCAL_GPIO_Init+0x62>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	2b05      	cmp	r3, #5
 8000a42:	d003      	beq.n	8000a4c <MCAL_GPIO_Init+0x62>
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	789b      	ldrb	r3, [r3, #2]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d10e      	bne.n	8000a6a <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	3b04      	subs	r3, #4
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	b25a      	sxtb	r2, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	78db      	ldrb	r3, [r3, #3]
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e02c      	b.n	8000ac4 <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d003      	beq.n	8000a7a <MCAL_GPIO_Init+0x90>
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	789b      	ldrb	r3, [r3, #2]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d107      	bne.n	8000a8a <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	789b      	ldrb	r3, [r3, #2]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e01c      	b.n	8000ac4 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	789b      	ldrb	r3, [r3, #2]
 8000a8e:	2b08      	cmp	r3, #8
 8000a90:	d102      	bne.n	8000a98 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 8000a92:	2304      	movs	r3, #4
 8000a94:	73fb      	strb	r3, [r7, #15]
 8000a96:	e015      	b.n	8000ac4 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	789b      	ldrb	r3, [r3, #2]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d107      	bne.n	8000ab4 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	e007      	b.n	8000ac4 <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	8812      	ldrh	r2, [r2, #0]
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	401a      	ands	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	60da      	str	r2, [r3, #12]

		}

	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 8000ac4:	7bfc      	ldrb	r4, [r7, #15]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff2a 	bl	8000924 <Get_CRLH_Position>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	fa04 f203 	lsl.w	r2, r4, r3
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	431a      	orrs	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	601a      	str	r2, [r3, #0]

}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}

08000ae8 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	807b      	strh	r3, [r7, #2]
 8000af4:	4613      	mov	r3, r2
 8000af6:	707b      	strb	r3, [r7, #1]
	if ( Value !=  GPIO_PIN_RESET )
 8000af8:	787b      	ldrb	r3, [r7, #1]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <MCAL_GPIO_WritePin+0x1e>
		//		or
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000afe:	887a      	ldrh	r2, [r7, #2]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	611a      	str	r2, [r3, #16]
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}

}
 8000b04:	e002      	b.n	8000b0c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000b06:	887a      	ldrh	r2, [r7, #2]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	615a      	str	r2, [r3, #20]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr

08000b16 <wait_ms>:
#include "STM32F103C6_EXTI_Driver.h"
#include "../HAL/LCD_Driver/LCD_Config.h"
#include "../HAL/LCD_Driver/LCD_interface.h"

void wait_ms(uint32_t time)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	for (i = 0; i < time; i++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	81fb      	strh	r3, [r7, #14]
 8000b22:	e00b      	b.n	8000b3c <wait_ms+0x26>
		for (j = 0; j < 255; j++);
 8000b24:	2300      	movs	r3, #0
 8000b26:	81bb      	strh	r3, [r7, #12]
 8000b28:	e002      	b.n	8000b30 <wait_ms+0x1a>
 8000b2a:	89bb      	ldrh	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	81bb      	strh	r3, [r7, #12]
 8000b30:	89bb      	ldrh	r3, [r7, #12]
 8000b32:	2bfe      	cmp	r3, #254	; 0xfe
 8000b34:	d9f9      	bls.n	8000b2a <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	81fb      	strh	r3, [r7, #14]
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8ef      	bhi.n	8000b24 <wait_ms+0xe>
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
	...

08000b50 <clock_init>:
void clock_init()
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <clock_init+0x30>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <clock_init+0x30>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <clock_init+0x30>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <clock_init+0x30>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <clock_init+0x30>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <clock_init+0x30>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6193      	str	r3, [r2, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000

08000b84 <EXTIB9_CallBack>:


void EXTIB9_CallBack(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	LCD_SEND_STRING("IRQ_9 _|-");
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <EXTIB9_CallBack+0x1c>)
 8000b8a:	f7ff fbdb 	bl	8000344 <LCD_SEND_STRING>
	wait_ms(400);
 8000b8e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b92:	f7ff ffc0 	bl	8000b16 <wait_ms>
	LCD_SEND_COMMAND(Clear_Display);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fb5e 	bl	8000258 <LCD_SEND_COMMAND>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08000cac 	.word	0x08000cac

08000ba4 <main>:

int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
	// Enable the clocks of used Peripherals
	clock_init();
 8000baa:	f7ff ffd1 	bl	8000b50 <clock_init>

	// Initialize the LCD
	LCD_init();
 8000bae:	f7ff fafb 	bl	80001a8 <LCD_init>
	LCD_SEND_COMMAND(Clear_Display);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff fb50 	bl	8000258 <LCD_SEND_COMMAND>

	// Configure the EXTI Pin
	EXTI_PinConfig_t PinCfg;
	PinCfg.EXTI_PIN = EXTI9PB9;
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <main+0x48>)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PinCfg.Trigger_Case = EXTI_TRIGGER_RISING;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	743b      	strb	r3, [r7, #16]
	PinCfg.P_IRQ_CallBack = EXTIB9_CallBack;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <main+0x4c>)
 8000bc8:	617b      	str	r3, [r7, #20]
	PinCfg.IRQ_EN = EXTI_STATE_ENABLE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&PinCfg);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd8b 	bl	80006ec <MCAL_EXTI_GPIO_Init>

	LCD_SEND_STRING("Hello ...");
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <main+0x50>)
 8000bd8:	f7ff fbb4 	bl	8000344 <LCD_SEND_STRING>
	wait_ms(500);
 8000bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be0:	f7ff ff99 	bl	8000b16 <wait_ms>
	LCD_SEND_COMMAND(Clear_Display);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fb37 	bl	8000258 <LCD_SEND_COMMAND>
	while (1)
 8000bea:	e7fe      	b.n	8000bea <main+0x46>
 8000bec:	08000cc4 	.word	0x08000cc4
 8000bf0:	08000b85 	.word	0x08000b85
 8000bf4:	08000cb8 	.word	0x08000cb8

08000bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bfc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c26:	f000 f811 	bl	8000c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff ffbb 	bl	8000ba4 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000c3c:	08000cd8 	.word	0x08000cd8
  ldr r2, =_sbss
 8000c40:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000c44:	20000064 	.word	0x20000064

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>
	...

08000c4c <__libc_init_array>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4e0c      	ldr	r6, [pc, #48]	; (8000c84 <__libc_init_array+0x38>)
 8000c52:	4c0d      	ldr	r4, [pc, #52]	; (8000c88 <__libc_init_array+0x3c>)
 8000c54:	1ba4      	subs	r4, r4, r6
 8000c56:	10a4      	asrs	r4, r4, #2
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	d109      	bne.n	8000c70 <__libc_init_array+0x24>
 8000c5c:	f000 f81a 	bl	8000c94 <_init>
 8000c60:	2500      	movs	r5, #0
 8000c62:	4e0a      	ldr	r6, [pc, #40]	; (8000c8c <__libc_init_array+0x40>)
 8000c64:	4c0a      	ldr	r4, [pc, #40]	; (8000c90 <__libc_init_array+0x44>)
 8000c66:	1ba4      	subs	r4, r4, r6
 8000c68:	10a4      	asrs	r4, r4, #2
 8000c6a:	42a5      	cmp	r5, r4
 8000c6c:	d105      	bne.n	8000c7a <__libc_init_array+0x2e>
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c74:	4798      	blx	r3
 8000c76:	3501      	adds	r5, #1
 8000c78:	e7ee      	b.n	8000c58 <__libc_init_array+0xc>
 8000c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c7e:	4798      	blx	r3
 8000c80:	3501      	adds	r5, #1
 8000c82:	e7f2      	b.n	8000c6a <__libc_init_array+0x1e>
 8000c84:	08000cd0 	.word	0x08000cd0
 8000c88:	08000cd0 	.word	0x08000cd0
 8000c8c:	08000cd0 	.word	0x08000cd0
 8000c90:	08000cd4 	.word	0x08000cd4

08000c94 <_init>:
 8000c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c96:	bf00      	nop
 8000c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9a:	bc08      	pop	{r3}
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	4770      	bx	lr

08000ca0 <_fini>:
 8000ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca2:	bf00      	nop
 8000ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca6:	bc08      	pop	{r3}
 8000ca8:	469e      	mov	lr, r3
 8000caa:	4770      	bx	lr
