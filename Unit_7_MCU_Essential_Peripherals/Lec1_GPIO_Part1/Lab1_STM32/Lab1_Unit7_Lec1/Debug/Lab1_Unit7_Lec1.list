
Lab1_Unit7_Lec1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800039c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800039c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000130  00000000  00000000  000103c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000bb  00000000  00000000  000104f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000110  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000060  00000000  00000000  000106c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  00010720  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000acf  00000000  00000000  00010768  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000014a  00000000  00000000  00011237  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00002f77  00000000  00000000  00011381  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000142f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  00014374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800037c 	.word	0x0800037c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800037c 	.word	0x0800037c

08000170 <Clock_init>:
#define GPIOB_ODR   *((vuint32_t*)(GPIOB_BASE + 0x0C))
#define GPIOB_IDR   *((vuint32_t*)(GPIOB_BASE + 0x08))


void Clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= (1<<2);      // Enable Clock for GPIOA
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <Clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <Clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= (1<<3);		// Enable Clock for GPIOB
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <Clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <Clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	GPIOA_CRL = 0x00;
 800019c:	4b24      	ldr	r3, [pc, #144]	; (8000230 <GPIO_init+0x98>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	GPIOB_CRL = 0x00;
 80001a2:	4b24      	ldr	r3, [pc, #144]	; (8000234 <GPIO_init+0x9c>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]

	GPIOA_CRH = 0;
 80001a8:	4b23      	ldr	r3, [pc, #140]	; (8000238 <GPIO_init+0xa0>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
	GPIOB_CRL = 0;
 80001ae:	4b21      	ldr	r3, [pc, #132]	; (8000234 <GPIO_init+0x9c>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
	GPIOB_CRH = 0;
 80001b4:	4b21      	ldr	r3, [pc, #132]	; (800023c <GPIO_init+0xa4>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
	GPIOA_ODR = 0;
 80001ba:	4b21      	ldr	r3, [pc, #132]	; (8000240 <GPIO_init+0xa8>)
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
	GPIOB_ODR = 0;
 80001c0:	4b20      	ldr	r3, [pc, #128]	; (8000244 <GPIO_init+0xac>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]

	// PA1 ==> I/P (Floating)
	GPIOA_CRL &= ~(0b11<<4); // Input Mode
 80001c6:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <GPIO_init+0x98>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a19      	ldr	r2, [pc, #100]	; (8000230 <GPIO_init+0x98>)
 80001cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001d0:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (0b1<<6); 	// "Floating" Input Mode
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <GPIO_init+0x98>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a16      	ldr	r2, [pc, #88]	; (8000230 <GPIO_init+0x98>)
 80001d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001dc:	6013      	str	r3, [r2, #0]

	// PA13 ==> I/P (Floating)
	GPIOA_CRH &= ~(0b11<<20); // Input Mode
 80001de:	4b16      	ldr	r3, [pc, #88]	; (8000238 <GPIO_init+0xa0>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a15      	ldr	r2, [pc, #84]	; (8000238 <GPIO_init+0xa0>)
 80001e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001e8:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= (0b01<<22); // "Floating" Input Mode
 80001ea:	4b13      	ldr	r3, [pc, #76]	; (8000238 <GPIO_init+0xa0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a12      	ldr	r2, [pc, #72]	; (8000238 <GPIO_init+0xa0>)
 80001f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001f4:	6013      	str	r3, [r2, #0]

	// PB1 ==> O/P (PushPull)
	GPIOB_CRL |= (0b01<<4);   // output mode with speed 10 MHZ
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <GPIO_init+0x9c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <GPIO_init+0x9c>)
 80001fc:	f043 0310 	orr.w	r3, r3, #16
 8000200:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &= ~(0b11<<6); //  Push-Pull output
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <GPIO_init+0x9c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <GPIO_init+0x9c>)
 8000208:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800020c:	6013      	str	r3, [r2, #0]

	// PB13 ==> O/P (PushPull)
	GPIOB_CRH |= (0b01<<20);  // output mode with speed 10 MHZ
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <GPIO_init+0xa4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <GPIO_init+0xa4>)
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(0b11<<22); // Push-Pull output
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <GPIO_init+0xa4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a07      	ldr	r2, [pc, #28]	; (800023c <GPIO_init+0xa4>)
 8000220:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000224:	6013      	str	r3, [r2, #0]

}
 8000226:	bf00      	nop
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40010800 	.word	0x40010800
 8000234:	40010c00 	.word	0x40010c00
 8000238:	40010804 	.word	0x40010804
 800023c:	40010c04 	.word	0x40010c04
 8000240:	4001080c 	.word	0x4001080c
 8000244:	40010c0c 	.word	0x40010c0c

08000248 <My_Wait>:

void My_Wait(uint32_t x) // Delay Function
{
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<x;i++)
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e00b      	b.n	800026e <My_Wait+0x26>
	{
		for(j=0;j<255;j++);
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
 800025a:	e002      	b.n	8000262 <My_Wait+0x1a>
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	3301      	adds	r3, #1
 8000260:	60bb      	str	r3, [r7, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	2bfe      	cmp	r3, #254	; 0xfe
 8000266:	d9f9      	bls.n	800025c <My_Wait+0x14>
	for(i=0;i<x;i++)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	3301      	adds	r3, #1
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	429a      	cmp	r2, r3
 8000274:	d3ef      	bcc.n	8000256 <My_Wait+0xe>
	}
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <main>:

void main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	Clock_init();
 8000284:	f7ff ff74 	bl	8000170 <Clock_init>
	GPIO_init();
 8000288:	f7ff ff86 	bl	8000198 <GPIO_init>

	while(1)
	{
		if(GET_BIT(GPIOA_IDR , 1) == 0)	// PULL UP Pin
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <main+0x58>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	085b      	lsrs	r3, r3, #1
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10d      	bne.n	80002b6 <main+0x36>
		{
			GPIOB_ODR ^= (1<<1);
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <main+0x5c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <main+0x5c>)
 80002a0:	f083 0302 	eor.w	r3, r3, #2
 80002a4:	6013      	str	r3, [r2, #0]
			while(GET_BIT(GPIOA_IDR , 1) == 0);
 80002a6:	bf00      	nop
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0x58>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	085b      	lsrs	r3, r3, #1
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f8      	beq.n	80002a8 <main+0x28>
		}

		if(GET_BIT(GPIOA_IDR , 13) == 1) // PULL Down Pin
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <main+0x58>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	0b5b      	lsrs	r3, r3, #13
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d1e3      	bne.n	800028c <main+0xc>
		{
			GPIOB_ODR ^= (1<<13);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <main+0x5c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <main+0x5c>)
 80002ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002ce:	6013      	str	r3, [r2, #0]
			My_Wait(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f7ff ffb9 	bl	8000248 <My_Wait>
		if(GET_BIT(GPIOA_IDR , 1) == 0)	// PULL UP Pin
 80002d6:	e7d9      	b.n	800028c <main+0xc>
 80002d8:	40010808 	.word	0x40010808
 80002dc:	40010c0c 	.word	0x40010c0c

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 f811 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ffb5 	bl	8000280 <main>

08000316 <LoopForever>:

LoopForever:
    b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_2_IRQHandler>
	...

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	2500      	movs	r5, #0
 8000338:	4e0c      	ldr	r6, [pc, #48]	; (800036c <__libc_init_array+0x38>)
 800033a:	4c0d      	ldr	r4, [pc, #52]	; (8000370 <__libc_init_array+0x3c>)
 800033c:	1ba4      	subs	r4, r4, r6
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	42a5      	cmp	r5, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	f000 f81a 	bl	800037c <_init>
 8000348:	2500      	movs	r5, #0
 800034a:	4e0a      	ldr	r6, [pc, #40]	; (8000374 <__libc_init_array+0x40>)
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <__libc_init_array+0x44>)
 800034e:	1ba4      	subs	r4, r4, r6
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	42a5      	cmp	r5, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800035c:	4798      	blx	r3
 800035e:	3501      	adds	r5, #1
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000366:	4798      	blx	r3
 8000368:	3501      	adds	r5, #1
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000394 	.word	0x08000394
 8000378:	08000398 	.word	0x08000398

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr
