
ATMega32_SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b80  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000bf4  2**0
                  ALLOC
  2 .stab         00000ea0  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000844  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b9 05 	call	0xb72	; 0xb72 <main>
  74:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_uint8SetDirectionPIN>:
 */

#include "DIO_INTERFACE.h"

void DIO_uint8SetDirectionPIN(PORT_NAME Copy_Port,PIN_NAME Copy_Pin,PIN_DIR Copy_Dir)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	uint8 DIO_L_ErrorCode;
	if (Copy_Pin>=0 && Copy_Pin<=7)
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_uint8SetDirectionPIN+0x22>
  9c:	f4 c0       	rjmp	.+488    	; 0x286 <DIO_uint8SetDirectionPIN+0x20a>
	{
		if (Copy_Dir==PIN_OUTPUT)
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_uint8SetDirectionPIN+0x2a>
  a4:	72 c0       	rjmp	.+228    	; 0x18a <DIO_uint8SetDirectionPIN+0x10e>
			{
				switch(Copy_Port)
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	38 87       	std	Y+8, r19	; 0x08
  ae:	2f 83       	std	Y+7, r18	; 0x07
  b0:	8f 81       	ldd	r24, Y+7	; 0x07
  b2:	98 85       	ldd	r25, Y+8	; 0x08
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	49 f1       	breq	.+82     	; 0x10c <DIO_uint8SetDirectionPIN+0x90>
  ba:	2f 81       	ldd	r18, Y+7	; 0x07
  bc:	38 85       	ldd	r19, Y+8	; 0x08
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	31 05       	cpc	r19, r1
  c2:	2c f4       	brge	.+10     	; 0xce <DIO_uint8SetDirectionPIN+0x52>
  c4:	8f 81       	ldd	r24, Y+7	; 0x07
  c6:	98 85       	ldd	r25, Y+8	; 0x08
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	61 f0       	breq	.+24     	; 0xe4 <DIO_uint8SetDirectionPIN+0x68>
  cc:	5b c0       	rjmp	.+182    	; 0x184 <DIO_uint8SetDirectionPIN+0x108>
  ce:	2f 81       	ldd	r18, Y+7	; 0x07
  d0:	38 85       	ldd	r19, Y+8	; 0x08
  d2:	22 30       	cpi	r18, 0x02	; 2
  d4:	31 05       	cpc	r19, r1
  d6:	71 f1       	breq	.+92     	; 0x134 <DIO_uint8SetDirectionPIN+0xb8>
  d8:	8f 81       	ldd	r24, Y+7	; 0x07
  da:	98 85       	ldd	r25, Y+8	; 0x08
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	e9 f1       	breq	.+122    	; 0x15c <DIO_uint8SetDirectionPIN+0xe0>
  e2:	50 c0       	rjmp	.+160    	; 0x184 <DIO_uint8SetDirectionPIN+0x108>
				{
					case PORT_A: SET_BIT(DDRA,Copy_Pin);break;
  e4:	aa e3       	ldi	r26, 0x3A	; 58
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ea e3       	ldi	r30, 0x3A	; 58
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	48 2f       	mov	r20, r24
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 2e       	mov	r0, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_uint8SetDirectionPIN+0x86>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_uint8SetDirectionPIN+0x82>
 106:	84 2b       	or	r24, r20
 108:	8c 93       	st	X, r24
 10a:	bf c0       	rjmp	.+382    	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_B: SET_BIT(DDRB,Copy_Pin);break;
 10c:	a7 e3       	ldi	r26, 0x37	; 55
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e7 e3       	ldi	r30, 0x37	; 55
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	48 2f       	mov	r20, r24
 118:	8b 81       	ldd	r24, Y+3	; 0x03
 11a:	28 2f       	mov	r18, r24
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 2e       	mov	r0, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_uint8SetDirectionPIN+0xae>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_uint8SetDirectionPIN+0xaa>
 12e:	84 2b       	or	r24, r20
 130:	8c 93       	st	X, r24
 132:	ab c0       	rjmp	.+342    	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_C: SET_BIT(DDRC,Copy_Pin);break;
 134:	a4 e3       	ldi	r26, 0x34	; 52
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e4 e3       	ldi	r30, 0x34	; 52
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	48 2f       	mov	r20, r24
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_uint8SetDirectionPIN+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_uint8SetDirectionPIN+0xd2>
 156:	84 2b       	or	r24, r20
 158:	8c 93       	st	X, r24
 15a:	97 c0       	rjmp	.+302    	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_D: SET_BIT(DDRD,Copy_Pin);break;
 15c:	a1 e3       	ldi	r26, 0x31	; 49
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e1 e3       	ldi	r30, 0x31	; 49
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	48 2f       	mov	r20, r24
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_uint8SetDirectionPIN+0xfe>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_uint8SetDirectionPIN+0xfa>
 17e:	84 2b       	or	r24, r20
 180:	8c 93       	st	X, r24
 182:	83 c0       	rjmp	.+262    	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	80 c0       	rjmp	.+256    	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
				}
			}
		else if (Copy_Dir==PIN_INPUT)
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	88 23       	and	r24, r24
 18e:	09 f0       	breq	.+2      	; 0x192 <DIO_uint8SetDirectionPIN+0x116>
 190:	77 c0       	rjmp	.+238    	; 0x280 <DIO_uint8SetDirectionPIN+0x204>
			{
				switch(Copy_Port)
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	3e 83       	std	Y+6, r19	; 0x06
 19a:	2d 83       	std	Y+5, r18	; 0x05
 19c:	8d 81       	ldd	r24, Y+5	; 0x05
 19e:	9e 81       	ldd	r25, Y+6	; 0x06
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	91 05       	cpc	r25, r1
 1a4:	59 f1       	breq	.+86     	; 0x1fc <DIO_uint8SetDirectionPIN+0x180>
 1a6:	2d 81       	ldd	r18, Y+5	; 0x05
 1a8:	3e 81       	ldd	r19, Y+6	; 0x06
 1aa:	22 30       	cpi	r18, 0x02	; 2
 1ac:	31 05       	cpc	r19, r1
 1ae:	2c f4       	brge	.+10     	; 0x1ba <DIO_uint8SetDirectionPIN+0x13e>
 1b0:	8d 81       	ldd	r24, Y+5	; 0x05
 1b2:	9e 81       	ldd	r25, Y+6	; 0x06
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	69 f0       	breq	.+26     	; 0x1d2 <DIO_uint8SetDirectionPIN+0x156>
 1b8:	60 c0       	rjmp	.+192    	; 0x27a <DIO_uint8SetDirectionPIN+0x1fe>
 1ba:	2d 81       	ldd	r18, Y+5	; 0x05
 1bc:	3e 81       	ldd	r19, Y+6	; 0x06
 1be:	22 30       	cpi	r18, 0x02	; 2
 1c0:	31 05       	cpc	r19, r1
 1c2:	89 f1       	breq	.+98     	; 0x226 <DIO_uint8SetDirectionPIN+0x1aa>
 1c4:	8d 81       	ldd	r24, Y+5	; 0x05
 1c6:	9e 81       	ldd	r25, Y+6	; 0x06
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	91 05       	cpc	r25, r1
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_uint8SetDirectionPIN+0x154>
 1ce:	40 c0       	rjmp	.+128    	; 0x250 <DIO_uint8SetDirectionPIN+0x1d4>
 1d0:	54 c0       	rjmp	.+168    	; 0x27a <DIO_uint8SetDirectionPIN+0x1fe>
				{
					case PORT_A: CLEAR_BIT(DDRA,Copy_Pin);break;
 1d2:	aa e3       	ldi	r26, 0x3A	; 58
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	ea e3       	ldi	r30, 0x3A	; 58
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_uint8SetDirectionPIN+0x174>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_uint8SetDirectionPIN+0x170>
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	47 c0       	rjmp	.+142    	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_B: CLEAR_BIT(DDRB,Copy_Pin);break;
 1fc:	a7 e3       	ldi	r26, 0x37	; 55
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e7 e3       	ldi	r30, 0x37	; 55
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_uint8SetDirectionPIN+0x19e>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_uint8SetDirectionPIN+0x19a>
 21e:	80 95       	com	r24
 220:	84 23       	and	r24, r20
 222:	8c 93       	st	X, r24
 224:	32 c0       	rjmp	.+100    	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_C: CLEAR_BIT(DDRC,Copy_Pin);break;
 226:	a4 e3       	ldi	r26, 0x34	; 52
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e4 e3       	ldi	r30, 0x34	; 52
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	48 2f       	mov	r20, r24
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 2e       	mov	r0, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_uint8SetDirectionPIN+0x1c8>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_uint8SetDirectionPIN+0x1c4>
 248:	80 95       	com	r24
 24a:	84 23       	and	r24, r20
 24c:	8c 93       	st	X, r24
 24e:	1d c0       	rjmp	.+58     	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_D: CLEAR_BIT(DDRD,Copy_Pin);break;
 250:	a1 e3       	ldi	r26, 0x31	; 49
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e1 e3       	ldi	r30, 0x31	; 49
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	48 2f       	mov	r20, r24
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_uint8SetDirectionPIN+0x1f2>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_uint8SetDirectionPIN+0x1ee>
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	8c 93       	st	X, r24
 278:	08 c0       	rjmp	.+16     	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	05 c0       	rjmp	.+10     	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
				}
			}
		else
			DIO_L_ErrorCode=1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_uint8SetDirectionPIN+0x20e>
	}
	else
	{
		DIO_L_ErrorCode=1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	89 83       	std	Y+1, r24	; 0x01
	}
}
 28a:	28 96       	adiw	r28, 0x08	; 8
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <DIO_uint8SetDirectionPort>:

/*----------------------------------------------------------------------------------*/

void DIO_uint8SetDirectionPort(PORT_NAME Copy_Port,PORT_DIR Copy_Dir)
{
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	27 97       	sbiw	r28, 0x07	; 7
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	8a 83       	std	Y+2, r24	; 0x02
 2b2:	6b 83       	std	Y+3, r22	; 0x03
		uint8 DIO_L_ErrorCode;
		if (Copy_Dir==PORT_OUTPUT)
 2b4:	8b 81       	ldd	r24, Y+3	; 0x03
 2b6:	8f 3f       	cpi	r24, 0xFF	; 255
 2b8:	b1 f5       	brne	.+108    	; 0x326 <DIO_uint8SetDirectionPort+0x8a>
			{
				switch(Copy_Port)
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	3f 83       	std	Y+7, r19	; 0x07
 2c2:	2e 83       	std	Y+6, r18	; 0x06
 2c4:	8e 81       	ldd	r24, Y+6	; 0x06
 2c6:	9f 81       	ldd	r25, Y+7	; 0x07
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	91 05       	cpc	r25, r1
 2cc:	d1 f0       	breq	.+52     	; 0x302 <DIO_uint8SetDirectionPort+0x66>
 2ce:	2e 81       	ldd	r18, Y+6	; 0x06
 2d0:	3f 81       	ldd	r19, Y+7	; 0x07
 2d2:	22 30       	cpi	r18, 0x02	; 2
 2d4:	31 05       	cpc	r19, r1
 2d6:	2c f4       	brge	.+10     	; 0x2e2 <DIO_uint8SetDirectionPort+0x46>
 2d8:	8e 81       	ldd	r24, Y+6	; 0x06
 2da:	9f 81       	ldd	r25, Y+7	; 0x07
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	61 f0       	breq	.+24     	; 0x2f8 <DIO_uint8SetDirectionPort+0x5c>
 2e0:	1f c0       	rjmp	.+62     	; 0x320 <DIO_uint8SetDirectionPort+0x84>
 2e2:	2e 81       	ldd	r18, Y+6	; 0x06
 2e4:	3f 81       	ldd	r19, Y+7	; 0x07
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	31 05       	cpc	r19, r1
 2ea:	81 f0       	breq	.+32     	; 0x30c <DIO_uint8SetDirectionPort+0x70>
 2ec:	8e 81       	ldd	r24, Y+6	; 0x06
 2ee:	9f 81       	ldd	r25, Y+7	; 0x07
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	91 05       	cpc	r25, r1
 2f4:	81 f0       	breq	.+32     	; 0x316 <DIO_uint8SetDirectionPort+0x7a>
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <DIO_uint8SetDirectionPort+0x84>
				{
					case PORT_A:DDRA=PORT_OUTPUT;break;
 2f8:	ea e3       	ldi	r30, 0x3A	; 58
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	80 83       	st	Z, r24
 300:	49 c0       	rjmp	.+146    	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_B:DDRB=PORT_OUTPUT;break;
 302:	e7 e3       	ldi	r30, 0x37	; 55
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	80 83       	st	Z, r24
 30a:	44 c0       	rjmp	.+136    	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_C:DDRC=PORT_OUTPUT;break;
 30c:	e4 e3       	ldi	r30, 0x34	; 52
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	80 83       	st	Z, r24
 314:	3f c0       	rjmp	.+126    	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_D:DDRD=PORT_OUTPUT;break;
 316:	e1 e3       	ldi	r30, 0x31	; 49
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	80 83       	st	Z, r24
 31e:	3a c0       	rjmp	.+116    	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
					default: DIO_L_ErrorCode=1;break;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	37 c0       	rjmp	.+110    	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
				}
			}
		else if (Copy_Dir==PORT_INPUT)
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	88 23       	and	r24, r24
 32a:	91 f5       	brne	.+100    	; 0x390 <DIO_uint8SetDirectionPort+0xf4>
			{
				switch(Copy_Port)
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	28 2f       	mov	r18, r24
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	3d 83       	std	Y+5, r19	; 0x05
 334:	2c 83       	std	Y+4, r18	; 0x04
 336:	8c 81       	ldd	r24, Y+4	; 0x04
 338:	9d 81       	ldd	r25, Y+5	; 0x05
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	91 05       	cpc	r25, r1
 33e:	c9 f0       	breq	.+50     	; 0x372 <DIO_uint8SetDirectionPort+0xd6>
 340:	2c 81       	ldd	r18, Y+4	; 0x04
 342:	3d 81       	ldd	r19, Y+5	; 0x05
 344:	22 30       	cpi	r18, 0x02	; 2
 346:	31 05       	cpc	r19, r1
 348:	2c f4       	brge	.+10     	; 0x354 <DIO_uint8SetDirectionPort+0xb8>
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	9d 81       	ldd	r25, Y+5	; 0x05
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	61 f0       	breq	.+24     	; 0x36a <DIO_uint8SetDirectionPort+0xce>
 352:	1b c0       	rjmp	.+54     	; 0x38a <DIO_uint8SetDirectionPort+0xee>
 354:	2c 81       	ldd	r18, Y+4	; 0x04
 356:	3d 81       	ldd	r19, Y+5	; 0x05
 358:	22 30       	cpi	r18, 0x02	; 2
 35a:	31 05       	cpc	r19, r1
 35c:	71 f0       	breq	.+28     	; 0x37a <DIO_uint8SetDirectionPort+0xde>
 35e:	8c 81       	ldd	r24, Y+4	; 0x04
 360:	9d 81       	ldd	r25, Y+5	; 0x05
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	91 05       	cpc	r25, r1
 366:	69 f0       	breq	.+26     	; 0x382 <DIO_uint8SetDirectionPort+0xe6>
 368:	10 c0       	rjmp	.+32     	; 0x38a <DIO_uint8SetDirectionPort+0xee>
				{
					case PORT_A: DDRA=PORT_INPUT;break;
 36a:	ea e3       	ldi	r30, 0x3A	; 58
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	10 82       	st	Z, r1
 370:	11 c0       	rjmp	.+34     	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_B: DDRB=PORT_INPUT;break;
 372:	e7 e3       	ldi	r30, 0x37	; 55
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	10 82       	st	Z, r1
 378:	0d c0       	rjmp	.+26     	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_C: DDRC=PORT_INPUT;break;
 37a:	e4 e3       	ldi	r30, 0x34	; 52
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	10 82       	st	Z, r1
 380:	09 c0       	rjmp	.+18     	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_D: DDRD=PORT_INPUT;break;
 382:	e1 e3       	ldi	r30, 0x31	; 49
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	10 82       	st	Z, r1
 388:	05 c0       	rjmp	.+10     	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
					default: DIO_L_ErrorCode=1;break;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_uint8SetDirectionPort+0xf8>
				}
			}
		else
			DIO_L_ErrorCode=1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	89 83       	std	Y+1, r24	; 0x01
	}
 394:	27 96       	adiw	r28, 0x07	; 7
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	cf 91       	pop	r28
 3a2:	df 91       	pop	r29
 3a4:	08 95       	ret

000003a6 <DIO_uint8SetValuePIN>:


/*---------------------------------------------------------------------------------------------*/

void DIO_uint8SetValuePIN(PORT_NAME Copy_Port,PIN_NAME Copy_Pin,PIN_VALUE Copy_Value)
{
 3a6:	df 93       	push	r29
 3a8:	cf 93       	push	r28
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	28 97       	sbiw	r28, 0x08	; 8
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
 3ba:	8a 83       	std	Y+2, r24	; 0x02
 3bc:	6b 83       	std	Y+3, r22	; 0x03
 3be:	4c 83       	std	Y+4, r20	; 0x04
	uint8 DIO_L_ErrorCode;
	if (Copy_Pin>=0 && Copy_Pin<=7)
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	88 30       	cpi	r24, 0x08	; 8
 3c4:	08 f0       	brcs	.+2      	; 0x3c8 <DIO_uint8SetValuePIN+0x22>
 3c6:	f4 c0       	rjmp	.+488    	; 0x5b0 <DIO_uint8SetValuePIN+0x20a>
	{
		if (Copy_Value==PIN_HIGH)
 3c8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <DIO_uint8SetValuePIN+0x2a>
 3ce:	72 c0       	rjmp	.+228    	; 0x4b4 <DIO_uint8SetValuePIN+0x10e>
			{
				switch(Copy_Port)
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	38 87       	std	Y+8, r19	; 0x08
 3d8:	2f 83       	std	Y+7, r18	; 0x07
 3da:	8f 81       	ldd	r24, Y+7	; 0x07
 3dc:	98 85       	ldd	r25, Y+8	; 0x08
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	91 05       	cpc	r25, r1
 3e2:	49 f1       	breq	.+82     	; 0x436 <DIO_uint8SetValuePIN+0x90>
 3e4:	2f 81       	ldd	r18, Y+7	; 0x07
 3e6:	38 85       	ldd	r19, Y+8	; 0x08
 3e8:	22 30       	cpi	r18, 0x02	; 2
 3ea:	31 05       	cpc	r19, r1
 3ec:	2c f4       	brge	.+10     	; 0x3f8 <DIO_uint8SetValuePIN+0x52>
 3ee:	8f 81       	ldd	r24, Y+7	; 0x07
 3f0:	98 85       	ldd	r25, Y+8	; 0x08
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	61 f0       	breq	.+24     	; 0x40e <DIO_uint8SetValuePIN+0x68>
 3f6:	5b c0       	rjmp	.+182    	; 0x4ae <DIO_uint8SetValuePIN+0x108>
 3f8:	2f 81       	ldd	r18, Y+7	; 0x07
 3fa:	38 85       	ldd	r19, Y+8	; 0x08
 3fc:	22 30       	cpi	r18, 0x02	; 2
 3fe:	31 05       	cpc	r19, r1
 400:	71 f1       	breq	.+92     	; 0x45e <DIO_uint8SetValuePIN+0xb8>
 402:	8f 81       	ldd	r24, Y+7	; 0x07
 404:	98 85       	ldd	r25, Y+8	; 0x08
 406:	83 30       	cpi	r24, 0x03	; 3
 408:	91 05       	cpc	r25, r1
 40a:	e9 f1       	breq	.+122    	; 0x486 <DIO_uint8SetValuePIN+0xe0>
 40c:	50 c0       	rjmp	.+160    	; 0x4ae <DIO_uint8SetValuePIN+0x108>
				{
					case PORT_A: SET_BIT(PORTA,Copy_Pin);break;
 40e:	ab e3       	ldi	r26, 0x3B	; 59
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	eb e3       	ldi	r30, 0x3B	; 59
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	48 2f       	mov	r20, r24
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 2e       	mov	r0, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_uint8SetValuePIN+0x86>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_uint8SetValuePIN+0x82>
 430:	84 2b       	or	r24, r20
 432:	8c 93       	st	X, r24
 434:	bf c0       	rjmp	.+382    	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
					case PORT_B: SET_BIT(PORTB,Copy_Pin);break;
 436:	a8 e3       	ldi	r26, 0x38	; 56
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e8 e3       	ldi	r30, 0x38	; 56
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	48 2f       	mov	r20, r24
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 2e       	mov	r0, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_uint8SetValuePIN+0xae>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_uint8SetValuePIN+0xaa>
 458:	84 2b       	or	r24, r20
 45a:	8c 93       	st	X, r24
 45c:	ab c0       	rjmp	.+342    	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
					case PORT_C: SET_BIT(PORTC,Copy_Pin);break;
 45e:	a5 e3       	ldi	r26, 0x35	; 53
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e3       	ldi	r30, 0x35	; 53
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	48 2f       	mov	r20, r24
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 2e       	mov	r0, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_uint8SetValuePIN+0xd6>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	0a 94       	dec	r0
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_uint8SetValuePIN+0xd2>
 480:	84 2b       	or	r24, r20
 482:	8c 93       	st	X, r24
 484:	97 c0       	rjmp	.+302    	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
					case PORT_D: SET_BIT(PORTD,Copy_Pin);break;
 486:	a2 e3       	ldi	r26, 0x32	; 50
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	e2 e3       	ldi	r30, 0x32	; 50
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	48 2f       	mov	r20, r24
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	28 2f       	mov	r18, r24
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 2e       	mov	r0, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_uint8SetValuePIN+0xfe>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	0a 94       	dec	r0
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_uint8SetValuePIN+0xfa>
 4a8:	84 2b       	or	r24, r20
 4aa:	8c 93       	st	X, r24
 4ac:	83 c0       	rjmp	.+262    	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	89 83       	std	Y+1, r24	; 0x01
 4b2:	80 c0       	rjmp	.+256    	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
				}
			}
		else if (Copy_Value==PIN_LOW)
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	88 23       	and	r24, r24
 4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_uint8SetValuePIN+0x116>
 4ba:	77 c0       	rjmp	.+238    	; 0x5aa <DIO_uint8SetValuePIN+0x204>
			{
				switch(Copy_Port)
 4bc:	8a 81       	ldd	r24, Y+2	; 0x02
 4be:	28 2f       	mov	r18, r24
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	3e 83       	std	Y+6, r19	; 0x06
 4c4:	2d 83       	std	Y+5, r18	; 0x05
 4c6:	8d 81       	ldd	r24, Y+5	; 0x05
 4c8:	9e 81       	ldd	r25, Y+6	; 0x06
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	91 05       	cpc	r25, r1
 4ce:	59 f1       	breq	.+86     	; 0x526 <DIO_uint8SetValuePIN+0x180>
 4d0:	2d 81       	ldd	r18, Y+5	; 0x05
 4d2:	3e 81       	ldd	r19, Y+6	; 0x06
 4d4:	22 30       	cpi	r18, 0x02	; 2
 4d6:	31 05       	cpc	r19, r1
 4d8:	2c f4       	brge	.+10     	; 0x4e4 <DIO_uint8SetValuePIN+0x13e>
 4da:	8d 81       	ldd	r24, Y+5	; 0x05
 4dc:	9e 81       	ldd	r25, Y+6	; 0x06
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	69 f0       	breq	.+26     	; 0x4fc <DIO_uint8SetValuePIN+0x156>
 4e2:	60 c0       	rjmp	.+192    	; 0x5a4 <DIO_uint8SetValuePIN+0x1fe>
 4e4:	2d 81       	ldd	r18, Y+5	; 0x05
 4e6:	3e 81       	ldd	r19, Y+6	; 0x06
 4e8:	22 30       	cpi	r18, 0x02	; 2
 4ea:	31 05       	cpc	r19, r1
 4ec:	89 f1       	breq	.+98     	; 0x550 <DIO_uint8SetValuePIN+0x1aa>
 4ee:	8d 81       	ldd	r24, Y+5	; 0x05
 4f0:	9e 81       	ldd	r25, Y+6	; 0x06
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	91 05       	cpc	r25, r1
 4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_uint8SetValuePIN+0x154>
 4f8:	40 c0       	rjmp	.+128    	; 0x57a <DIO_uint8SetValuePIN+0x1d4>
 4fa:	54 c0       	rjmp	.+168    	; 0x5a4 <DIO_uint8SetValuePIN+0x1fe>
				{
					case PORT_A: CLEAR_BIT(PORTA,Copy_Pin);break;
 4fc:	ab e3       	ldi	r26, 0x3B	; 59
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	eb e3       	ldi	r30, 0x3B	; 59
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	48 2f       	mov	r20, r24
 508:	8b 81       	ldd	r24, Y+3	; 0x03
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 2e       	mov	r0, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_uint8SetValuePIN+0x174>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_uint8SetValuePIN+0x170>
 51e:	80 95       	com	r24
 520:	84 23       	and	r24, r20
 522:	8c 93       	st	X, r24
 524:	47 c0       	rjmp	.+142    	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
					case PORT_B: CLEAR_BIT(PORTB,Copy_Pin);break;
 526:	a8 e3       	ldi	r26, 0x38	; 56
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e8 e3       	ldi	r30, 0x38	; 56
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	48 2f       	mov	r20, r24
 532:	8b 81       	ldd	r24, Y+3	; 0x03
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_uint8SetValuePIN+0x19e>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_uint8SetValuePIN+0x19a>
 548:	80 95       	com	r24
 54a:	84 23       	and	r24, r20
 54c:	8c 93       	st	X, r24
 54e:	32 c0       	rjmp	.+100    	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
					case PORT_C: CLEAR_BIT(PORTC,Copy_Pin);break;
 550:	a5 e3       	ldi	r26, 0x35	; 53
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	e5 e3       	ldi	r30, 0x35	; 53
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	48 2f       	mov	r20, r24
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 2e       	mov	r0, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_uint8SetValuePIN+0x1c8>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	0a 94       	dec	r0
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_uint8SetValuePIN+0x1c4>
 572:	80 95       	com	r24
 574:	84 23       	and	r24, r20
 576:	8c 93       	st	X, r24
 578:	1d c0       	rjmp	.+58     	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
					case PORT_D: CLEAR_BIT(PORTD,Copy_Pin);break;
 57a:	a2 e3       	ldi	r26, 0x32	; 50
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	e2 e3       	ldi	r30, 0x32	; 50
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	48 2f       	mov	r20, r24
 586:	8b 81       	ldd	r24, Y+3	; 0x03
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 2e       	mov	r0, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_uint8SetValuePIN+0x1f2>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_uint8SetValuePIN+0x1ee>
 59c:	80 95       	com	r24
 59e:	84 23       	and	r24, r20
 5a0:	8c 93       	st	X, r24
 5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	89 83       	std	Y+1, r24	; 0x01
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
				}
			}
		else
			DIO_L_ErrorCode=1;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	89 83       	std	Y+1, r24	; 0x01
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_uint8SetValuePIN+0x20e>
	}
	else
	{
		DIO_L_ErrorCode=1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	89 83       	std	Y+1, r24	; 0x01
	}
}
 5b4:	28 96       	adiw	r28, 0x08	; 8
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	f8 94       	cli
 5ba:	de bf       	out	0x3e, r29	; 62
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	cd bf       	out	0x3d, r28	; 61
 5c0:	cf 91       	pop	r28
 5c2:	df 91       	pop	r29
 5c4:	08 95       	ret

000005c6 <DIO_uint8SetValuePort>:

/*-------------------------------------------------------------------------------------*/

void DIO_uint8SetValuePort(PORT_NAME Copy_Port,PORT_VALUE Copy_Value)
{
 5c6:	df 93       	push	r29
 5c8:	cf 93       	push	r28
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	27 97       	sbiw	r28, 0x07	; 7
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	8a 83       	std	Y+2, r24	; 0x02
 5dc:	6b 83       	std	Y+3, r22	; 0x03
		uint8 DIO_L_ErrorCode;
		if (Copy_Value==PORT_HIGH)
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	8f 3f       	cpi	r24, 0xFF	; 255
 5e2:	b1 f5       	brne	.+108    	; 0x650 <DIO_uint8SetValuePort+0x8a>
			{
				switch(Copy_Port)
 5e4:	8a 81       	ldd	r24, Y+2	; 0x02
 5e6:	28 2f       	mov	r18, r24
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	3f 83       	std	Y+7, r19	; 0x07
 5ec:	2e 83       	std	Y+6, r18	; 0x06
 5ee:	8e 81       	ldd	r24, Y+6	; 0x06
 5f0:	9f 81       	ldd	r25, Y+7	; 0x07
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	91 05       	cpc	r25, r1
 5f6:	d1 f0       	breq	.+52     	; 0x62c <DIO_uint8SetValuePort+0x66>
 5f8:	2e 81       	ldd	r18, Y+6	; 0x06
 5fa:	3f 81       	ldd	r19, Y+7	; 0x07
 5fc:	22 30       	cpi	r18, 0x02	; 2
 5fe:	31 05       	cpc	r19, r1
 600:	2c f4       	brge	.+10     	; 0x60c <DIO_uint8SetValuePort+0x46>
 602:	8e 81       	ldd	r24, Y+6	; 0x06
 604:	9f 81       	ldd	r25, Y+7	; 0x07
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	61 f0       	breq	.+24     	; 0x622 <DIO_uint8SetValuePort+0x5c>
 60a:	1f c0       	rjmp	.+62     	; 0x64a <DIO_uint8SetValuePort+0x84>
 60c:	2e 81       	ldd	r18, Y+6	; 0x06
 60e:	3f 81       	ldd	r19, Y+7	; 0x07
 610:	22 30       	cpi	r18, 0x02	; 2
 612:	31 05       	cpc	r19, r1
 614:	81 f0       	breq	.+32     	; 0x636 <DIO_uint8SetValuePort+0x70>
 616:	8e 81       	ldd	r24, Y+6	; 0x06
 618:	9f 81       	ldd	r25, Y+7	; 0x07
 61a:	83 30       	cpi	r24, 0x03	; 3
 61c:	91 05       	cpc	r25, r1
 61e:	81 f0       	breq	.+32     	; 0x640 <DIO_uint8SetValuePort+0x7a>
 620:	14 c0       	rjmp	.+40     	; 0x64a <DIO_uint8SetValuePort+0x84>
				{
					case PORT_A:PORTA=PORT_HIGH;break;
 622:	eb e3       	ldi	r30, 0x3B	; 59
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	80 83       	st	Z, r24
 62a:	49 c0       	rjmp	.+146    	; 0x6be <DIO_uint8SetValuePort+0xf8>
					case PORT_B:PORTB=PORT_HIGH;break;
 62c:	e8 e3       	ldi	r30, 0x38	; 56
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	80 83       	st	Z, r24
 634:	44 c0       	rjmp	.+136    	; 0x6be <DIO_uint8SetValuePort+0xf8>
					case PORT_C:PORTC=PORT_HIGH;break;
 636:	e5 e3       	ldi	r30, 0x35	; 53
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	80 83       	st	Z, r24
 63e:	3f c0       	rjmp	.+126    	; 0x6be <DIO_uint8SetValuePort+0xf8>
					case PORT_D:PORTD=PORT_HIGH;break;
 640:	e2 e3       	ldi	r30, 0x32	; 50
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	8f ef       	ldi	r24, 0xFF	; 255
 646:	80 83       	st	Z, r24
 648:	3a c0       	rjmp	.+116    	; 0x6be <DIO_uint8SetValuePort+0xf8>
					default: DIO_L_ErrorCode=1;break;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	89 83       	std	Y+1, r24	; 0x01
 64e:	37 c0       	rjmp	.+110    	; 0x6be <DIO_uint8SetValuePort+0xf8>
				}
			}
		else if (Copy_Value==PORT_LOW)
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	88 23       	and	r24, r24
 654:	91 f5       	brne	.+100    	; 0x6ba <DIO_uint8SetValuePort+0xf4>
			{
				switch(Copy_Port)
 656:	8a 81       	ldd	r24, Y+2	; 0x02
 658:	28 2f       	mov	r18, r24
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	3d 83       	std	Y+5, r19	; 0x05
 65e:	2c 83       	std	Y+4, r18	; 0x04
 660:	8c 81       	ldd	r24, Y+4	; 0x04
 662:	9d 81       	ldd	r25, Y+5	; 0x05
 664:	81 30       	cpi	r24, 0x01	; 1
 666:	91 05       	cpc	r25, r1
 668:	c9 f0       	breq	.+50     	; 0x69c <DIO_uint8SetValuePort+0xd6>
 66a:	2c 81       	ldd	r18, Y+4	; 0x04
 66c:	3d 81       	ldd	r19, Y+5	; 0x05
 66e:	22 30       	cpi	r18, 0x02	; 2
 670:	31 05       	cpc	r19, r1
 672:	2c f4       	brge	.+10     	; 0x67e <DIO_uint8SetValuePort+0xb8>
 674:	8c 81       	ldd	r24, Y+4	; 0x04
 676:	9d 81       	ldd	r25, Y+5	; 0x05
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	61 f0       	breq	.+24     	; 0x694 <DIO_uint8SetValuePort+0xce>
 67c:	1b c0       	rjmp	.+54     	; 0x6b4 <DIO_uint8SetValuePort+0xee>
 67e:	2c 81       	ldd	r18, Y+4	; 0x04
 680:	3d 81       	ldd	r19, Y+5	; 0x05
 682:	22 30       	cpi	r18, 0x02	; 2
 684:	31 05       	cpc	r19, r1
 686:	71 f0       	breq	.+28     	; 0x6a4 <DIO_uint8SetValuePort+0xde>
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	9d 81       	ldd	r25, Y+5	; 0x05
 68c:	83 30       	cpi	r24, 0x03	; 3
 68e:	91 05       	cpc	r25, r1
 690:	69 f0       	breq	.+26     	; 0x6ac <DIO_uint8SetValuePort+0xe6>
 692:	10 c0       	rjmp	.+32     	; 0x6b4 <DIO_uint8SetValuePort+0xee>
				{
					case PORT_A: PORTA=PORT_LOW;break;
 694:	eb e3       	ldi	r30, 0x3B	; 59
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	10 82       	st	Z, r1
 69a:	11 c0       	rjmp	.+34     	; 0x6be <DIO_uint8SetValuePort+0xf8>
					case PORT_B: PORTB=PORT_LOW;break;
 69c:	e8 e3       	ldi	r30, 0x38	; 56
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	10 82       	st	Z, r1
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <DIO_uint8SetValuePort+0xf8>
					case PORT_C: PORTC=PORT_LOW;break;
 6a4:	e5 e3       	ldi	r30, 0x35	; 53
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	10 82       	st	Z, r1
 6aa:	09 c0       	rjmp	.+18     	; 0x6be <DIO_uint8SetValuePort+0xf8>
					case PORT_D: PORTD=PORT_LOW;break;
 6ac:	e2 e3       	ldi	r30, 0x32	; 50
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	10 82       	st	Z, r1
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <DIO_uint8SetValuePort+0xf8>
					default: DIO_L_ErrorCode=1;break;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_uint8SetValuePort+0xf8>
				}
			}
		else
			DIO_L_ErrorCode=1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	89 83       	std	Y+1, r24	; 0x01
}
 6be:	27 96       	adiw	r28, 0x07	; 7
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	cf 91       	pop	r28
 6cc:	df 91       	pop	r29
 6ce:	08 95       	ret

000006d0 <DIO_uint8Set_SpecificValue_Port>:

/*-------------------------------------------------------------------------------------*/

void DIO_uint8Set_SpecificValue_Port(PORT_NAME Copy_Port,uint8 Copy_Value)
{
 6d0:	df 93       	push	r29
 6d2:	cf 93       	push	r28
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <DIO_uint8Set_SpecificValue_Port+0x6>
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <DIO_uint8Set_SpecificValue_Port+0x8>
 6d8:	0f 92       	push	r0
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
 6de:	8a 83       	std	Y+2, r24	; 0x02
 6e0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 DIO_L_ErrorCode;
	/* Check on the Required PORT Number */
	switch(Copy_Port)
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	3d 83       	std	Y+5, r19	; 0x05
 6ea:	2c 83       	std	Y+4, r18	; 0x04
 6ec:	8c 81       	ldd	r24, Y+4	; 0x04
 6ee:	9d 81       	ldd	r25, Y+5	; 0x05
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	91 05       	cpc	r25, r1
 6f4:	d1 f0       	breq	.+52     	; 0x72a <DIO_uint8Set_SpecificValue_Port+0x5a>
 6f6:	2c 81       	ldd	r18, Y+4	; 0x04
 6f8:	3d 81       	ldd	r19, Y+5	; 0x05
 6fa:	22 30       	cpi	r18, 0x02	; 2
 6fc:	31 05       	cpc	r19, r1
 6fe:	2c f4       	brge	.+10     	; 0x70a <DIO_uint8Set_SpecificValue_Port+0x3a>
 700:	8c 81       	ldd	r24, Y+4	; 0x04
 702:	9d 81       	ldd	r25, Y+5	; 0x05
 704:	00 97       	sbiw	r24, 0x00	; 0
 706:	61 f0       	breq	.+24     	; 0x720 <DIO_uint8Set_SpecificValue_Port+0x50>
 708:	1f c0       	rjmp	.+62     	; 0x748 <DIO_uint8Set_SpecificValue_Port+0x78>
 70a:	2c 81       	ldd	r18, Y+4	; 0x04
 70c:	3d 81       	ldd	r19, Y+5	; 0x05
 70e:	22 30       	cpi	r18, 0x02	; 2
 710:	31 05       	cpc	r19, r1
 712:	81 f0       	breq	.+32     	; 0x734 <DIO_uint8Set_SpecificValue_Port+0x64>
 714:	8c 81       	ldd	r24, Y+4	; 0x04
 716:	9d 81       	ldd	r25, Y+5	; 0x05
 718:	83 30       	cpi	r24, 0x03	; 3
 71a:	91 05       	cpc	r25, r1
 71c:	81 f0       	breq	.+32     	; 0x73e <DIO_uint8Set_SpecificValue_Port+0x6e>
 71e:	14 c0       	rjmp	.+40     	; 0x748 <DIO_uint8Set_SpecificValue_Port+0x78>
	{
		case PORT_A:PORTA=Copy_Value;break;
 720:	eb e3       	ldi	r30, 0x3B	; 59
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	8b 81       	ldd	r24, Y+3	; 0x03
 726:	80 83       	st	Z, r24
 728:	11 c0       	rjmp	.+34     	; 0x74c <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_B:PORTB=Copy_Value;break;
 72a:	e8 e3       	ldi	r30, 0x38	; 56
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	80 83       	st	Z, r24
 732:	0c c0       	rjmp	.+24     	; 0x74c <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_C:PORTC=Copy_Value;break;
 734:	e5 e3       	ldi	r30, 0x35	; 53
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	80 83       	st	Z, r24
 73c:	07 c0       	rjmp	.+14     	; 0x74c <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_D:PORTD=Copy_Value;break;
 73e:	e2 e3       	ldi	r30, 0x32	; 50
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	80 83       	st	Z, r24
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_uint8Set_SpecificValue_Port+0x7c>
		default: DIO_L_ErrorCode=1;break;
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	89 83       	std	Y+1, r24	; 0x01
	}

}
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	cf 91       	pop	r28
 758:	df 91       	pop	r29
 75a:	08 95       	ret

0000075c <DIO_uint8Set_SpecificValue_Port_Direction>:

/*------------------------------------------------------------------------*/

void DIO_uint8Set_SpecificValue_Port_Direction(PORT_NAME Copy_Port,uint8 Copy_Dir)
{
 75c:	df 93       	push	r29
 75e:	cf 93       	push	r28
 760:	00 d0       	rcall	.+0      	; 0x762 <DIO_uint8Set_SpecificValue_Port_Direction+0x6>
 762:	00 d0       	rcall	.+0      	; 0x764 <DIO_uint8Set_SpecificValue_Port_Direction+0x8>
 764:	0f 92       	push	r0
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	8a 83       	std	Y+2, r24	; 0x02
 76c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 DIO_L_ErrorCode;
		/* Check on the Required PORT Number */
		switch(Copy_Port)
 76e:	8a 81       	ldd	r24, Y+2	; 0x02
 770:	28 2f       	mov	r18, r24
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	3d 83       	std	Y+5, r19	; 0x05
 776:	2c 83       	std	Y+4, r18	; 0x04
 778:	8c 81       	ldd	r24, Y+4	; 0x04
 77a:	9d 81       	ldd	r25, Y+5	; 0x05
 77c:	81 30       	cpi	r24, 0x01	; 1
 77e:	91 05       	cpc	r25, r1
 780:	d1 f0       	breq	.+52     	; 0x7b6 <DIO_uint8Set_SpecificValue_Port_Direction+0x5a>
 782:	2c 81       	ldd	r18, Y+4	; 0x04
 784:	3d 81       	ldd	r19, Y+5	; 0x05
 786:	22 30       	cpi	r18, 0x02	; 2
 788:	31 05       	cpc	r19, r1
 78a:	2c f4       	brge	.+10     	; 0x796 <DIO_uint8Set_SpecificValue_Port_Direction+0x3a>
 78c:	8c 81       	ldd	r24, Y+4	; 0x04
 78e:	9d 81       	ldd	r25, Y+5	; 0x05
 790:	00 97       	sbiw	r24, 0x00	; 0
 792:	61 f0       	breq	.+24     	; 0x7ac <DIO_uint8Set_SpecificValue_Port_Direction+0x50>
 794:	1f c0       	rjmp	.+62     	; 0x7d4 <DIO_uint8Set_SpecificValue_Port_Direction+0x78>
 796:	2c 81       	ldd	r18, Y+4	; 0x04
 798:	3d 81       	ldd	r19, Y+5	; 0x05
 79a:	22 30       	cpi	r18, 0x02	; 2
 79c:	31 05       	cpc	r19, r1
 79e:	81 f0       	breq	.+32     	; 0x7c0 <DIO_uint8Set_SpecificValue_Port_Direction+0x64>
 7a0:	8c 81       	ldd	r24, Y+4	; 0x04
 7a2:	9d 81       	ldd	r25, Y+5	; 0x05
 7a4:	83 30       	cpi	r24, 0x03	; 3
 7a6:	91 05       	cpc	r25, r1
 7a8:	81 f0       	breq	.+32     	; 0x7ca <DIO_uint8Set_SpecificValue_Port_Direction+0x6e>
 7aa:	14 c0       	rjmp	.+40     	; 0x7d4 <DIO_uint8Set_SpecificValue_Port_Direction+0x78>
		{
			case PORT_A:DDRA=Copy_Dir;break;
 7ac:	ea e3       	ldi	r30, 0x3A	; 58
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	80 83       	st	Z, r24
 7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_B:DDRB=Copy_Dir;break;
 7b6:	e7 e3       	ldi	r30, 0x37	; 55
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	8b 81       	ldd	r24, Y+3	; 0x03
 7bc:	80 83       	st	Z, r24
 7be:	0c c0       	rjmp	.+24     	; 0x7d8 <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_C:DDRC=Copy_Dir;break;
 7c0:	e4 e3       	ldi	r30, 0x34	; 52
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	80 83       	st	Z, r24
 7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_D:DDRD=Copy_Dir;break;
 7ca:	e1 e3       	ldi	r30, 0x31	; 49
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	8b 81       	ldd	r24, Y+3	; 0x03
 7d0:	80 83       	st	Z, r24
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			default: DIO_L_ErrorCode=1;break;
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	89 83       	std	Y+1, r24	; 0x01
		}
}
 7d8:	0f 90       	pop	r0
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	cf 91       	pop	r28
 7e4:	df 91       	pop	r29
 7e6:	08 95       	ret

000007e8 <DIO_uint8Read_PIN>:

/*------------------------------------------------------------------------*/

PIN_VALUE DIO_uint8Read_PIN(PIN_Reg_NAME Copy_Port,PIN_NAME Copy_Pin)
{
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	00 d0       	rcall	.+0      	; 0x7ee <DIO_uint8Read_PIN+0x6>
 7ee:	00 d0       	rcall	.+0      	; 0x7f0 <DIO_uint8Read_PIN+0x8>
 7f0:	00 d0       	rcall	.+0      	; 0x7f2 <DIO_uint8Read_PIN+0xa>
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	8b 83       	std	Y+3, r24	; 0x03
 7f8:	6c 83       	std	Y+4, r22	; 0x04
	PIN_VALUE Copy_Value;
	uint8 DIO_L_ErrorCode;

	if(Copy_Port <= PIN_D && Copy_Pin <= PIN_7)
 7fa:	8b 81       	ldd	r24, Y+3	; 0x03
 7fc:	84 30       	cpi	r24, 0x04	; 4
 7fe:	08 f0       	brcs	.+2      	; 0x802 <DIO_uint8Read_PIN+0x1a>
 800:	6f c0       	rjmp	.+222    	; 0x8e0 <__stack+0x81>
 802:	8c 81       	ldd	r24, Y+4	; 0x04
 804:	88 30       	cpi	r24, 0x08	; 8
 806:	08 f0       	brcs	.+2      	; 0x80a <DIO_uint8Read_PIN+0x22>
 808:	6b c0       	rjmp	.+214    	; 0x8e0 <__stack+0x81>
	{
		switch(Copy_Port)
 80a:	8b 81       	ldd	r24, Y+3	; 0x03
 80c:	28 2f       	mov	r18, r24
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	3e 83       	std	Y+6, r19	; 0x06
 812:	2d 83       	std	Y+5, r18	; 0x05
 814:	4d 81       	ldd	r20, Y+5	; 0x05
 816:	5e 81       	ldd	r21, Y+6	; 0x06
 818:	41 30       	cpi	r20, 0x01	; 1
 81a:	51 05       	cpc	r21, r1
 81c:	41 f1       	breq	.+80     	; 0x86e <__stack+0xf>
 81e:	8d 81       	ldd	r24, Y+5	; 0x05
 820:	9e 81       	ldd	r25, Y+6	; 0x06
 822:	82 30       	cpi	r24, 0x02	; 2
 824:	91 05       	cpc	r25, r1
 826:	34 f4       	brge	.+12     	; 0x834 <DIO_uint8Read_PIN+0x4c>
 828:	2d 81       	ldd	r18, Y+5	; 0x05
 82a:	3e 81       	ldd	r19, Y+6	; 0x06
 82c:	21 15       	cp	r18, r1
 82e:	31 05       	cpc	r19, r1
 830:	61 f0       	breq	.+24     	; 0x84a <DIO_uint8Read_PIN+0x62>
 832:	53 c0       	rjmp	.+166    	; 0x8da <__stack+0x7b>
 834:	4d 81       	ldd	r20, Y+5	; 0x05
 836:	5e 81       	ldd	r21, Y+6	; 0x06
 838:	42 30       	cpi	r20, 0x02	; 2
 83a:	51 05       	cpc	r21, r1
 83c:	51 f1       	breq	.+84     	; 0x892 <__stack+0x33>
 83e:	8d 81       	ldd	r24, Y+5	; 0x05
 840:	9e 81       	ldd	r25, Y+6	; 0x06
 842:	83 30       	cpi	r24, 0x03	; 3
 844:	91 05       	cpc	r25, r1
 846:	b9 f1       	breq	.+110    	; 0x8b6 <__stack+0x57>
 848:	48 c0       	rjmp	.+144    	; 0x8da <__stack+0x7b>
			{
				case PIN_A:Copy_Value = GET_BIT(PINA,Copy_Pin); break;
 84a:	e9 e3       	ldi	r30, 0x39	; 57
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	28 2f       	mov	r18, r24
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	8c 81       	ldd	r24, Y+4	; 0x04
 856:	88 2f       	mov	r24, r24
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	a9 01       	movw	r20, r18
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	55 95       	asr	r21
 860:	47 95       	ror	r20
 862:	8a 95       	dec	r24
 864:	e2 f7       	brpl	.-8      	; 0x85e <DIO_uint8Read_PIN+0x76>
 866:	ca 01       	movw	r24, r20
 868:	81 70       	andi	r24, 0x01	; 1
 86a:	8a 83       	std	Y+2, r24	; 0x02
 86c:	3b c0       	rjmp	.+118    	; 0x8e4 <__stack+0x85>
				case PIN_B:Copy_Value = GET_BIT(PINB,Copy_Pin); break;
 86e:	e6 e3       	ldi	r30, 0x36	; 54
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	28 2f       	mov	r18, r24
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	8c 81       	ldd	r24, Y+4	; 0x04
 87a:	88 2f       	mov	r24, r24
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	a9 01       	movw	r20, r18
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	55 95       	asr	r21
 884:	47 95       	ror	r20
 886:	8a 95       	dec	r24
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	ca 01       	movw	r24, r20
 88c:	81 70       	andi	r24, 0x01	; 1
 88e:	8a 83       	std	Y+2, r24	; 0x02
 890:	29 c0       	rjmp	.+82     	; 0x8e4 <__stack+0x85>
				case PIN_C:Copy_Value = GET_BIT(PINC,Copy_Pin); break;
 892:	e3 e3       	ldi	r30, 0x33	; 51
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	28 2f       	mov	r18, r24
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	8c 81       	ldd	r24, Y+4	; 0x04
 89e:	88 2f       	mov	r24, r24
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	a9 01       	movw	r20, r18
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	55 95       	asr	r21
 8a8:	47 95       	ror	r20
 8aa:	8a 95       	dec	r24
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	ca 01       	movw	r24, r20
 8b0:	81 70       	andi	r24, 0x01	; 1
 8b2:	8a 83       	std	Y+2, r24	; 0x02
 8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <__stack+0x85>
				case PIN_D:Copy_Value = GET_BIT(PIND,Copy_Pin); break;
 8b6:	e0 e3       	ldi	r30, 0x30	; 48
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	28 2f       	mov	r18, r24
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	8c 81       	ldd	r24, Y+4	; 0x04
 8c2:	88 2f       	mov	r24, r24
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	a9 01       	movw	r20, r18
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
 8ca:	55 95       	asr	r21
 8cc:	47 95       	ror	r20
 8ce:	8a 95       	dec	r24
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
 8d2:	ca 01       	movw	r24, r20
 8d4:	81 70       	andi	r24, 0x01	; 1
 8d6:	8a 83       	std	Y+2, r24	; 0x02
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <__stack+0x85>
				default: DIO_L_ErrorCode=1; break;
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	89 83       	std	Y+1, r24	; 0x01
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>
			}
	}
	else
	{
		DIO_L_ErrorCode=1;
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Copy_Value;
 8e4:	8a 81       	ldd	r24, Y+2	; 0x02

}
 8e6:	26 96       	adiw	r28, 0x06	; 6
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	f8 94       	cli
 8ec:	de bf       	out	0x3e, r29	; 62
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	cd bf       	out	0x3d, r28	; 61
 8f2:	cf 91       	pop	r28
 8f4:	df 91       	pop	r29
 8f6:	08 95       	ret

000008f8 <SPI_InitMaster>:
// Pointer used in Call Back function
static void (*SPI_Fptr)(void);


void SPI_InitMaster(void)
{
 8f8:	df 93       	push	r29
 8fa:	cf 93       	push	r28
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
	// Data Order
	#if SPI_DATA_ORDER == SPI_DATA_ORDER_LSB
		SET_BIT(SPCR, DORD);
	#elif SPI_DATA_ORDER == SPI_DATA_ORDER_MSB
		CLEAR_BIT(SPCR, DORD);
 900:	ad e2       	ldi	r26, 0x2D	; 45
 902:	b0 e0       	ldi	r27, 0x00	; 0
 904:	ed e2       	ldi	r30, 0x2D	; 45
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	8f 7d       	andi	r24, 0xDF	; 223
 90c:	8c 93       	st	X, r24
	#endif

	// Set Clock polarity
	#if SPI_CLOCK_PLOARITY == SPI_CPOL_LEADING_RISING
		CLEAR_BIT(SPCR, CPOL);
 90e:	ad e2       	ldi	r26, 0x2D	; 45
 910:	b0 e0       	ldi	r27, 0x00	; 0
 912:	ed e2       	ldi	r30, 0x2D	; 45
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	87 7f       	andi	r24, 0xF7	; 247
 91a:	8c 93       	st	X, r24
		SET_BIT(SPCR, CPOL);
	#endif

	// Set Clock phase
	#if SPI_CLOCK_PHASE == SPI_CPHA_LEADING_SAMPLE
		CLEAR_BIT(SPCR, CPHA);
 91c:	ad e2       	ldi	r26, 0x2D	; 45
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	ed e2       	ldi	r30, 0x2D	; 45
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	8b 7f       	andi	r24, 0xFB	; 251
 928:	8c 93       	st	X, r24
		SET_BIT(SPCR, CPHA);
	#endif

	// Double SPI Speed Bit
	#if SPI_SET_DOUBLE_SPEED == SPI_NO_DOUBLE_SPEED
		CLEAR_BIT(SPSR, SPI2X);
 92a:	ae e2       	ldi	r26, 0x2E	; 46
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	ee e2       	ldi	r30, 0x2E	; 46
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	8e 7f       	andi	r24, 0xFE	; 254
 936:	8c 93       	st	X, r24
	#elif SPI_SET_DOUBLE_SPEED == SPI_DOUBLE_SPEED
		SET_BIT(SPSR, SPI2X);
	#endif

	// SPI Clock Rate
	SPCR &= SPI_CLK_Rate_Masking;
 938:	ad e2       	ldi	r26, 0x2D	; 45
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	ed e2       	ldi	r30, 0x2D	; 45
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	8c 7f       	andi	r24, 0xFC	; 252
 944:	8c 93       	st	X, r24
	SPCR |= SPI_CLK_RATE;
 946:	ad e2       	ldi	r26, 0x2D	; 45
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	ed e2       	ldi	r30, 0x2D	; 45
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	8c 93       	st	X, r24

	// Select SPI Master Mode
	SET_BIT(SPCR, MSTR);
 952:	ad e2       	ldi	r26, 0x2D	; 45
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	ed e2       	ldi	r30, 0x2D	; 45
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	80 61       	ori	r24, 0x10	; 16
 95e:	8c 93       	st	X, r24

	// SPI Enable
	SET_BIT(SPCR, SPE);
 960:	ad e2       	ldi	r26, 0x2D	; 45
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	ed e2       	ldi	r30, 0x2D	; 45
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	80 64       	ori	r24, 0x40	; 64
 96c:	8c 93       	st	X, r24

	/****** Configuring SPI Master Pins (SS , MOSI , MISO , SClck) (PORT=> B , PINS (4,5,6,7)) ******/
	DIO_uint8SetDirectionPIN(PORT_B, PIN_4 , PIN_INPUT);     // SS Pin  : Output
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	64 e0       	ldi	r22, 0x04	; 4
 972:	40 e0       	ldi	r20, 0x00	; 0
 974:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_uint8SetDirectionPIN>
	DIO_uint8SetDirectionPIN(PORT_B, PIN_5 , PIN_OUTPUT);   // MOSI Pin : Output
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	65 e0       	ldi	r22, 0x05	; 5
 97c:	41 e0       	ldi	r20, 0x01	; 1
 97e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_uint8SetDirectionPIN>
	DIO_uint8SetDirectionPIN(PORT_B, PIN_6 , PIN_INPUT);   // MISO Pin  : Input
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	66 e0       	ldi	r22, 0x06	; 6
 986:	40 e0       	ldi	r20, 0x00	; 0
 988:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_uint8SetDirectionPIN>
	DIO_uint8SetDirectionPIN(PORT_B, PIN_7 , PIN_OUTPUT); // Sclck Pin  : Output
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	67 e0       	ldi	r22, 0x07	; 7
 990:	41 e0       	ldi	r20, 0x01	; 1
 992:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_uint8SetDirectionPIN>
}
 996:	cf 91       	pop	r28
 998:	df 91       	pop	r29
 99a:	08 95       	ret

0000099c <SPI_InitSlave>:


void SPI_InitSlave(void)
{
 99c:	df 93       	push	r29
 99e:	cf 93       	push	r28
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
	// Set data order
	#if SPI_DATA_ORDER == SPI_DATA_ORDER_LSB
		SET_BIT(SPCR, DORD);
	#elif SPI_DATA_ORDER == SPI_DATA_ORDER_MSB
		CLEAR_BIT(SPCR, DORD);
 9a4:	ad e2       	ldi	r26, 0x2D	; 45
 9a6:	b0 e0       	ldi	r27, 0x00	; 0
 9a8:	ed e2       	ldi	r30, 0x2D	; 45
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	80 81       	ld	r24, Z
 9ae:	8f 7d       	andi	r24, 0xDF	; 223
 9b0:	8c 93       	st	X, r24
	#endif

	// Set Clock polarity
	#if SPI_CLOCK_PLOARITY == SPI_CPOL_LEADING_RISING
		CLEAR_BIT(SPCR, CPOL);
 9b2:	ad e2       	ldi	r26, 0x2D	; 45
 9b4:	b0 e0       	ldi	r27, 0x00	; 0
 9b6:	ed e2       	ldi	r30, 0x2D	; 45
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	87 7f       	andi	r24, 0xF7	; 247
 9be:	8c 93       	st	X, r24
		SET_BIT(SPCR, CPOL);
	#endif

	// Set Clock phase
	#if SPI_CLOCK_PHASE == SPI_CPHA_LEADING_SAMPLE
		CLEAR_BIT(SPCR, CPHA);
 9c0:	ad e2       	ldi	r26, 0x2D	; 45
 9c2:	b0 e0       	ldi	r27, 0x00	; 0
 9c4:	ed e2       	ldi	r30, 0x2D	; 45
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
 9ca:	8b 7f       	andi	r24, 0xFB	; 251
 9cc:	8c 93       	st	X, r24
	#elif SPI_CLOCK_PHASE == SPI_CPHA_LEADING_SETUP
		SET_BIT(SPCR, CPHA);
	#endif

	// select SPI Slave mode
	CLEAR_BIT(SPCR, MSTR);
 9ce:	ad e2       	ldi	r26, 0x2D	; 45
 9d0:	b0 e0       	ldi	r27, 0x00	; 0
 9d2:	ed e2       	ldi	r30, 0x2D	; 45
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	8f 7e       	andi	r24, 0xEF	; 239
 9da:	8c 93       	st	X, r24

	// SPI Enable
	SET_BIT(SPCR, SPE);
 9dc:	ad e2       	ldi	r26, 0x2D	; 45
 9de:	b0 e0       	ldi	r27, 0x00	; 0
 9e0:	ed e2       	ldi	r30, 0x2D	; 45
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	80 64       	ori	r24, 0x40	; 64
 9e8:	8c 93       	st	X, r24

	/****** Configuring SPI Slave Pins (MOSI , MISO , SS , SClck) (PORT=> B , PINS (4,5,6,7)) ******/
	DIO_uint8SetDirectionPIN(PORT_B, PIN_4 , PIN_INPUT);      // SS Pin   : Input
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	64 e0       	ldi	r22, 0x04	; 4
 9ee:	40 e0       	ldi	r20, 0x00	; 0
 9f0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_uint8SetDirectionPIN>
	DIO_uint8SetDirectionPIN(PORT_B, PIN_5 , PIN_INPUT);     // MOSI Pin  : Input
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	65 e0       	ldi	r22, 0x05	; 5
 9f8:	40 e0       	ldi	r20, 0x00	; 0
 9fa:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_uint8SetDirectionPIN>
	DIO_uint8SetDirectionPIN(PORT_B, PIN_6 , PIN_OUTPUT);   // MISO Pin   : Output
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	66 e0       	ldi	r22, 0x06	; 6
 a02:	41 e0       	ldi	r20, 0x01	; 1
 a04:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_uint8SetDirectionPIN>
	DIO_uint8SetDirectionPIN(PORT_B, PIN_7 , PIN_INPUT);   // Sclck Pin   : Input
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	67 e0       	ldi	r22, 0x07	; 7
 a0c:	40 e0       	ldi	r20, 0x00	; 0
 a0e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_uint8SetDirectionPIN>
}
 a12:	cf 91       	pop	r28
 a14:	df 91       	pop	r29
 a16:	08 95       	ret

00000a18 <SPI_SendReceive>:


uint8 SPI_SendReceive(uint8 data)
{
 a18:	df 93       	push	r29
 a1a:	cf 93       	push	r28
 a1c:	0f 92       	push	r0
 a1e:	cd b7       	in	r28, 0x3d	; 61
 a20:	de b7       	in	r29, 0x3e	; 62
 a22:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
 a24:	ef e2       	ldi	r30, 0x2F	; 47
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
 a2c:	ee e2       	ldi	r30, 0x2E	; 46
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	88 23       	and	r24, r24
 a34:	dc f7       	brge	.-10     	; 0xa2c <SPI_SendReceive+0x14>
	return SPDR;
 a36:	ef e2       	ldi	r30, 0x2F	; 47
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	80 81       	ld	r24, Z
}
 a3c:	0f 90       	pop	r0
 a3e:	cf 91       	pop	r28
 a40:	df 91       	pop	r29
 a42:	08 95       	ret

00000a44 <SPI_Recieve_PeriodicCheck>:

uint8 SPI_Recieve_PeriodicCheck(uint8 *ptr_data)
{
 a44:	df 93       	push	r29
 a46:	cf 93       	push	r28
 a48:	00 d0       	rcall	.+0      	; 0xa4a <SPI_Recieve_PeriodicCheck+0x6>
 a4a:	0f 92       	push	r0
 a4c:	cd b7       	in	r28, 0x3d	; 61
 a4e:	de b7       	in	r29, 0x3e	; 62
 a50:	9a 83       	std	Y+2, r25	; 0x02
 a52:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(SPSR,SPIF))
 a54:	ee e2       	ldi	r30, 0x2E	; 46
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	80 81       	ld	r24, Z
 a5a:	88 23       	and	r24, r24
 a5c:	4c f4       	brge	.+18     	; 0xa70 <SPI_Recieve_PeriodicCheck+0x2c>
	{
		*ptr_data = SPDR;
 a5e:	ef e2       	ldi	r30, 0x2F	; 47
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	e9 81       	ldd	r30, Y+1	; 0x01
 a66:	fa 81       	ldd	r31, Y+2	; 0x02
 a68:	80 83       	st	Z, r24
		return 1;
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	8b 83       	std	Y+3, r24	; 0x03
 a6e:	01 c0       	rjmp	.+2      	; 0xa72 <SPI_Recieve_PeriodicCheck+0x2e>
	}
	else
	{
		return 0;
 a70:	1b 82       	std	Y+3, r1	; 0x03
 a72:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	cf 91       	pop	r28
 a7c:	df 91       	pop	r29
 a7e:	08 95       	ret

00000a80 <SPI_Send_NoBlock>:

void SPI_Send_NoBlock(uint8 data)
{
 a80:	df 93       	push	r29
 a82:	cf 93       	push	r28
 a84:	0f 92       	push	r0
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
 a8c:	ef e2       	ldi	r30, 0x2F	; 47
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	89 81       	ldd	r24, Y+1	; 0x01
 a92:	80 83       	st	Z, r24
}
 a94:	0f 90       	pop	r0
 a96:	cf 91       	pop	r28
 a98:	df 91       	pop	r29
 a9a:	08 95       	ret

00000a9c <SPI_Receive_NoBlock>:


uint8 SPI_Receive_NoBlock(void)
{
 a9c:	df 93       	push	r29
 a9e:	cf 93       	push	r28
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
 aa4:	ef e2       	ldi	r30, 0x2F	; 47
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	80 81       	ld	r24, Z
}
 aaa:	cf 91       	pop	r28
 aac:	df 91       	pop	r29
 aae:	08 95       	ret

00000ab0 <SPI_Interrupt_Enable>:

void SPI_Interrupt_Enable(void)
{
 ab0:	df 93       	push	r29
 ab2:	cf 93       	push	r28
 ab4:	cd b7       	in	r28, 0x3d	; 61
 ab6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR, SPIE);
 ab8:	ad e2       	ldi	r26, 0x2D	; 45
 aba:	b0 e0       	ldi	r27, 0x00	; 0
 abc:	ed e2       	ldi	r30, 0x2D	; 45
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	80 81       	ld	r24, Z
 ac2:	80 68       	ori	r24, 0x80	; 128
 ac4:	8c 93       	st	X, r24
}
 ac6:	cf 91       	pop	r28
 ac8:	df 91       	pop	r29
 aca:	08 95       	ret

00000acc <SPI_Interrupt_Disable>:

void SPI_Interrupt_Disable(void)
{
 acc:	df 93       	push	r29
 ace:	cf 93       	push	r28
 ad0:	cd b7       	in	r28, 0x3d	; 61
 ad2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SPCR, SPIE);
 ad4:	ad e2       	ldi	r26, 0x2D	; 45
 ad6:	b0 e0       	ldi	r27, 0x00	; 0
 ad8:	ed e2       	ldi	r30, 0x2D	; 45
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	80 81       	ld	r24, Z
 ade:	8f 77       	andi	r24, 0x7F	; 127
 ae0:	8c 93       	st	X, r24
}
 ae2:	cf 91       	pop	r28
 ae4:	df 91       	pop	r29
 ae6:	08 95       	ret

00000ae8 <SPI_Set_CallBack>:

void SPI_Set_CallBack(void (*LocalFptr)(void))
{
 ae8:	df 93       	push	r29
 aea:	cf 93       	push	r28
 aec:	00 d0       	rcall	.+0      	; 0xaee <SPI_Set_CallBack+0x6>
 aee:	cd b7       	in	r28, 0x3d	; 61
 af0:	de b7       	in	r29, 0x3e	; 62
 af2:	9a 83       	std	Y+2, r25	; 0x02
 af4:	89 83       	std	Y+1, r24	; 0x01
	SPI_Fptr = LocalFptr;
 af6:	89 81       	ldd	r24, Y+1	; 0x01
 af8:	9a 81       	ldd	r25, Y+2	; 0x02
 afa:	90 93 61 00 	sts	0x0061, r25
 afe:	80 93 60 00 	sts	0x0060, r24
}
 b02:	0f 90       	pop	r0
 b04:	0f 90       	pop	r0
 b06:	cf 91       	pop	r28
 b08:	df 91       	pop	r29
 b0a:	08 95       	ret

00000b0c <__vector_12>:

ISR(SPI_STC_vect)
{
 b0c:	1f 92       	push	r1
 b0e:	0f 92       	push	r0
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	0f 92       	push	r0
 b14:	11 24       	eor	r1, r1
 b16:	2f 93       	push	r18
 b18:	3f 93       	push	r19
 b1a:	4f 93       	push	r20
 b1c:	5f 93       	push	r21
 b1e:	6f 93       	push	r22
 b20:	7f 93       	push	r23
 b22:	8f 93       	push	r24
 b24:	9f 93       	push	r25
 b26:	af 93       	push	r26
 b28:	bf 93       	push	r27
 b2a:	ef 93       	push	r30
 b2c:	ff 93       	push	r31
 b2e:	df 93       	push	r29
 b30:	cf 93       	push	r28
 b32:	cd b7       	in	r28, 0x3d	; 61
 b34:	de b7       	in	r29, 0x3e	; 62
	if(SPI_Fptr != NULLPTR)
 b36:	80 91 60 00 	lds	r24, 0x0060
 b3a:	90 91 61 00 	lds	r25, 0x0061
 b3e:	00 97       	sbiw	r24, 0x00	; 0
 b40:	29 f0       	breq	.+10     	; 0xb4c <__vector_12+0x40>
	{
		SPI_Fptr();
 b42:	e0 91 60 00 	lds	r30, 0x0060
 b46:	f0 91 61 00 	lds	r31, 0x0061
 b4a:	09 95       	icall
	}
}
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	ff 91       	pop	r31
 b52:	ef 91       	pop	r30
 b54:	bf 91       	pop	r27
 b56:	af 91       	pop	r26
 b58:	9f 91       	pop	r25
 b5a:	8f 91       	pop	r24
 b5c:	7f 91       	pop	r23
 b5e:	6f 91       	pop	r22
 b60:	5f 91       	pop	r21
 b62:	4f 91       	pop	r20
 b64:	3f 91       	pop	r19
 b66:	2f 91       	pop	r18
 b68:	0f 90       	pop	r0
 b6a:	0f be       	out	0x3f, r0	; 63
 b6c:	0f 90       	pop	r0
 b6e:	1f 90       	pop	r1
 b70:	18 95       	reti

00000b72 <main>:
 */

#include "SPI_interface.h"

void main()
{
 b72:	df 93       	push	r29
 b74:	cf 93       	push	r28
 b76:	cd b7       	in	r28, 0x3d	; 61
 b78:	de b7       	in	r29, 0x3e	; 62
 b7a:	ff cf       	rjmp	.-2      	; 0xb7a <main+0x8>

00000b7c <_exit>:
 b7c:	f8 94       	cli

00000b7e <__stop_program>:
 b7e:	ff cf       	rjmp	.-2      	; 0xb7e <__stop_program>
