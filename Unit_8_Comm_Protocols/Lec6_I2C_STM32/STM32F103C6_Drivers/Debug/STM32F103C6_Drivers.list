
STM32F103C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e5c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fa4  08000fa4  00010fac  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa4  08000fa4  00010fac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa4  08000fac  00010fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa4  08000fa4  00010fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000000  08000fac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08000fac  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002415  00000000  00000000  00010fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000972  00000000  00000000  000133ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001290  00000000  00000000  00013d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002c8  00000000  00000000  00014ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  000152b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000677  00000000  00000000  00015508  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000df0  00000000  00000000  00015b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000818e  00000000  00000000  0001696f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001eafd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000960  00000000  00000000  0001eb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f74 	.word	0x08000f74

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f74 	.word	0x08000f74

08000170 <EXTI0_IRQHandler>:

/******************************************************************************
 * 								ISR Functions
 * ****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// First Clear the pending flag to avoid infinite IRQ Handler (Clear by write 1)
	SET_BIT(EXTI->PR,0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	// Calling the pointer to function that assigned by the user
	GP_IRQ_CallBackFunc[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000048 	.word	0x20000048

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBackFunc[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000048 	.word	0x20000048

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBackFunc[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000048 	.word	0x20000048

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBackFunc[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000048 	.word	0x20000048

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBackFunc[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000048 	.word	0x20000048

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	// Determining which IRQ occured (5-9) ...  by checking the Pending Register bits of 5-9
	if(EXTI->PR & (1<<5)) {	SET_BIT(EXTI->PR,5); GP_IRQ_CallBackFunc[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {	SET_BIT(EXTI->PR,6); GP_IRQ_CallBackFunc[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {	SET_BIT(EXTI->PR,7); GP_IRQ_CallBackFunc[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) { SET_BIT(EXTI->PR,8); GP_IRQ_CallBackFunc[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) { SET_BIT(EXTI->PR,9); GP_IRQ_CallBackFunc[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000048 	.word	0x20000048

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// Determining which IRQ occured (10-15) ...  by checking the Pending Register bits of 10-15
	if(EXTI->PR & (1<<10)) { SET_BIT(EXTI->PR,10); GP_IRQ_CallBackFunc[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) { SET_BIT(EXTI->PR,11); GP_IRQ_CallBackFunc[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) { SET_BIT(EXTI->PR,12); GP_IRQ_CallBackFunc[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) { SET_BIT(EXTI->PR,13); GP_IRQ_CallBackFunc[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) { SET_BIT(EXTI->PR,14); GP_IRQ_CallBackFunc[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) { SET_BIT(EXTI->PR,15); GP_IRQ_CallBackFunc[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000048 	.word	0x20000048

08000390 <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber) // For Bits 0 -> 7 : we use CRL Register & For Bits 8 -> 15: we use CRH Register
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_1:
		return 4 ;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_5:
		return 20 ;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	}

	return 0 ;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_Init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d10e      	bne.n	80004d6 <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e02c      	b.n	8000530 <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d003      	beq.n	80004e6 <MCAL_GPIO_Init+0x90>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d107      	bne.n	80004f6 <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e01c      	b.n	8000530 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d102      	bne.n	8000504 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 80004fe:	2304      	movs	r3, #4
 8000500:	73fb      	strb	r3, [r7, #15]
 8000502:	e015      	b.n	8000530 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 8000504:	2308      	movs	r3, #8
 8000506:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d107      	bne.n	8000520 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	e007      	b.n	8000530 <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	8812      	ldrh	r2, [r2, #0]
 8000528:	43d2      	mvns	r2, r2
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]

		}

	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 8000530:	7bfc      	ldrb	r4, [r7, #15]
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff2a 	bl	8000390 <Get_CRLH_Position>
 800053c:	4603      	mov	r3, r0
 800053e:	fa04 f203 	lsl.w	r2, r4, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	431a      	orrs	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	601a      	str	r2, [r3, #0]

}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <I2C1_EV_IRQHandler>:
		I2Cx->CR1 &= ~(I2C_CR1_ACK_Msk);
	}
}

void I2C1_EV_IRQHandler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <MCAL_RCC_GetSYS_CLCKFreq>:
// same idea as the above



uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	2b01      	cmp	r3, #1
 8000594:	d006      	beq.n	80005a4 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d302      	bcc.n	80005a0 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d004      	beq.n	80005a8 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 800059e:	e005      	b.n	80005ac <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80005a2:	e003      	b.n	80005ac <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo (Later) need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80005a6:	e001      	b.n	80005ac <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo (Later) need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80005aa:	e7ff      	b.n	80005ac <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	007a1200 	.word	0x007a1200
 80005bc:	00f42400 	.word	0x00f42400

080005c0 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	// Get HCLK source and Compute PCLK1 frequency
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  );
 80005c4:	f7ff ffde 	bl	8000584 <MCAL_RCC_GetSYS_CLCKFreq>
 80005c8:	4601      	mov	r1, r0
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MCAL_RCC_GetHCLKFreq+0x20>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80005d6:	5cd3      	ldrb	r3, [r2, r3]
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005dc:	4618      	mov	r0, r3
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	08000f94 	.word	0x08000f94

080005e8 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	// Get HCLK source and Compute PCLK1 frequency
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  );
 80005ec:	f7ff ffe8 	bl	80005c0 <MCAL_RCC_GetHCLKFreq>
 80005f0:	4601      	mov	r1, r0
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	f003 0307 	and.w	r3, r3, #7
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	08000f8c 	.word	0x08000f8c

08000610 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	// Get HCLK source and Compute PCLK2 frequency
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  );
 8000614:	f7ff ffd4 	bl	80005c0 <MCAL_RCC_GetHCLKFreq>
 8000618:	4601      	mov	r1, r0
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	0adb      	lsrs	r3, r3, #11
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	fa21 f303 	lsr.w	r3, r1, r3
}
 800062c:	4618      	mov	r0, r3
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	08000f8c 	.word	0x08000f8c

08000638 <MCAL_SPI_Init>:
 * @retval			- none
 * Note				- Support for SPI Full Duplex Master/Slave only & NSS HW/SW
 * 					- in case of Master you have to configure pins and drive it
 */
void MCAL_SPI_Init(SPI_TypeDef* SPIx, SPI_Config_t* SPI_Config)
{
 8000638:	b4b0      	push	{r4, r5, r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	// Doing all the Configurations in these Variables ... then assigning them to Registers ...
	// to prevent Beginning Communication during the Configuration
	uint16_t tmpReg_CR1 = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpReg_CR2 = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a4b      	ldr	r2, [pc, #300]	; (800077c <MCAL_SPI_Init+0x144>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d10e      	bne.n	8000670 <MCAL_SPI_Init+0x38>
	{
		Global_SPI_Config[SPI1_INDEX] = *SPI_Config;
 8000652:	4a4b      	ldr	r2, [pc, #300]	; (8000780 <MCAL_SPI_Init+0x148>)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	4614      	mov	r4, r2
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	682b      	ldr	r3, [r5, #0]
 8000660:	6023      	str	r3, [r4, #0]
		RCC_SPI1_CLK_EN();
 8000662:	4b48      	ldr	r3, [pc, #288]	; (8000784 <MCAL_SPI_Init+0x14c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a47      	ldr	r2, [pc, #284]	; (8000784 <MCAL_SPI_Init+0x14c>)
 8000668:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	e012      	b.n	8000696 <MCAL_SPI_Init+0x5e>
	}
	else if(SPIx == SPI2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a45      	ldr	r2, [pc, #276]	; (8000788 <MCAL_SPI_Init+0x150>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d10e      	bne.n	8000696 <MCAL_SPI_Init+0x5e>
	{
		Global_SPI_Config[SPI2_INDEX] = *SPI_Config;
 8000678:	4b41      	ldr	r3, [pc, #260]	; (8000780 <MCAL_SPI_Init+0x148>)
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	f103 0414 	add.w	r4, r3, #20
 8000680:	4615      	mov	r5, r2
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	682b      	ldr	r3, [r5, #0]
 8000688:	6023      	str	r3, [r4, #0]
		RCC_SPI2_CLK_EN();
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <MCAL_SPI_Init+0x14c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a3d      	ldr	r2, [pc, #244]	; (8000784 <MCAL_SPI_Init+0x14c>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	61d3      	str	r3, [r2, #28]
	}

	//Communication Mode
	tmpReg_CR1 |= SPI_Config->Communication_Mode;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	885a      	ldrh	r2, [r3, #2]
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	4313      	orrs	r3, r2
 800069e:	81fb      	strh	r3, [r7, #14]

	//Frame Format
	tmpReg_CR1 |= SPI_Config->Frame_Format;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	81fb      	strh	r3, [r7, #14]

	//Data Size
	tmpReg_CR1 |= SPI_Config->Data_Size;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	88da      	ldrh	r2, [r3, #6]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	81fb      	strh	r3, [r7, #14]

	//Clock Polarity
	tmpReg_CR1 |= SPI_Config->CLK_Polarity;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	7a1b      	ldrb	r3, [r3, #8]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	89fb      	ldrh	r3, [r7, #14]
 80006be:	4313      	orrs	r3, r2
 80006c0:	81fb      	strh	r3, [r7, #14]

	//Clock Phase
	tmpReg_CR1 |= SPI_Config->CLK_PHASE;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	7a5b      	ldrb	r3, [r3, #9]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	89fb      	ldrh	r3, [r7, #14]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	81fb      	strh	r3, [r7, #14]

	/* ========================== NSS (Slave Select) ========================== */
	if(SPI_Config->NSS == SPI_NSS_HW_Master_SS_output_Enable)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	895b      	ldrh	r3, [r3, #10]
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d105      	bne.n	80006e2 <MCAL_SPI_Init+0xaa>
	{
		tmpReg_CR2 |= SPI_Config->NSS;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	895a      	ldrh	r2, [r3, #10]
 80006da:	89bb      	ldrh	r3, [r7, #12]
 80006dc:	4313      	orrs	r3, r2
 80006de:	81bb      	strh	r3, [r7, #12]
 80006e0:	e00e      	b.n	8000700 <MCAL_SPI_Init+0xc8>
	}
	else if(SPI_Config->NSS == SPI_NSS_HW_Master_SS_output_Disable)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	895b      	ldrh	r3, [r3, #10]
 80006e6:	2bfb      	cmp	r3, #251	; 0xfb
 80006e8:	d105      	bne.n	80006f6 <MCAL_SPI_Init+0xbe>
	{
		tmpReg_CR2 &= SPI_Config->NSS;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	895a      	ldrh	r2, [r3, #10]
 80006ee:	89bb      	ldrh	r3, [r7, #12]
 80006f0:	4013      	ands	r3, r2
 80006f2:	81bb      	strh	r3, [r7, #12]
 80006f4:	e004      	b.n	8000700 <MCAL_SPI_Init+0xc8>
	}
	else
	{
		tmpReg_CR1 |= SPI_Config->NSS;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	895a      	ldrh	r2, [r3, #10]
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	81fb      	strh	r3, [r7, #14]
	}

	//Baud Rate only in Master mode
	if(SPI_Config->SPI_Mode == SPI_Mode_Master)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d105      	bne.n	8000714 <MCAL_SPI_Init+0xdc>
	{
		tmpReg_CR1 |= SPI_Config->Baud_Rate_PreSCLR;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	7b1b      	ldrb	r3, [r3, #12]
 800070c:	b29a      	uxth	r2, r3
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	4313      	orrs	r3, r2
 8000712:	81fb      	strh	r3, [r7, #14]
	}

	//Mode of SPI(Master or Slave)
	tmpReg_CR1 |= SPI_Config->SPI_Mode;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b29a      	uxth	r2, r3
 800071a:	89fb      	ldrh	r3, [r7, #14]
 800071c:	4313      	orrs	r3, r2
 800071e:	81fb      	strh	r3, [r7, #14]

	//Enable SPI
	tmpReg_CR1 |= (1<<6);
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000726:	81fb      	strh	r3, [r7, #14]

	//IRQ
	if(SPI_Config->IRQ_Enable != SPI_IRQ_NONE)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	7b5b      	ldrb	r3, [r3, #13]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d01a      	beq.n	8000766 <MCAL_SPI_Init+0x12e>
	{
		tmpReg_CR2 |= SPI_Config->IRQ_Enable;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	7b5b      	ldrb	r3, [r3, #13]
 8000734:	b29a      	uxth	r2, r3
 8000736:	89bb      	ldrh	r3, [r7, #12]
 8000738:	4313      	orrs	r3, r2
 800073a:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <MCAL_SPI_Init+0x144>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <MCAL_SPI_Init+0x11a>
		{
			NVIC_IRQ35_SPI1_Enable();
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MCAL_SPI_Init+0x154>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <MCAL_SPI_Init+0x154>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	e009      	b.n	8000766 <MCAL_SPI_Init+0x12e>
		}
		else if(SPIx == SPI2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <MCAL_SPI_Init+0x150>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d105      	bne.n	8000766 <MCAL_SPI_Init+0x12e>
		{
			NVIC_IRQ36_SPI2_Enable();
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MCAL_SPI_Init+0x154>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <MCAL_SPI_Init+0x154>)
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = tmpReg_CR1;
 8000766:	89fa      	ldrh	r2, [r7, #14]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tmpReg_CR2;
 800076c:	89ba      	ldrh	r2, [r7, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	605a      	str	r2, [r3, #4]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bcb0      	pop	{r4, r5, r7}
 800077a:	4770      	bx	lr
 800077c:	40013000 	.word	0x40013000
 8000780:	2000001c 	.word	0x2000001c
 8000784:	40021000 	.word	0x40021000
 8000788:	40003800 	.word	0x40003800
 800078c:	e000e110 	.word	0xe000e110

08000790 <MCAL_SPI_GPIO_Set_Pins>:
		RCC_SPI2_Reset();
	}
}

void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef* SPIx)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(SPIx == SPI1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a80      	ldr	r2, [pc, #512]	; (800099c <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d176      	bne.n	800088e <MCAL_SPI_GPIO_Set_Pins+0xfe>
	{

		if(Global_SPI_Config[SPI1_INDEX].SPI_Mode == SPI_Mode_Master)
 80007a0:	4b7f      	ldr	r3, [pc, #508]	; (80009a0 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d141      	bne.n	800082c <MCAL_SPI_GPIO_Set_Pins+0x9c>
		{
			//NSS  : PA4
			switch(Global_SPI_Config[SPI1_INDEX].NSS)
 80007a8:	4b7d      	ldr	r3, [pc, #500]	; (80009a0 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 80007aa:	895b      	ldrh	r3, [r3, #10]
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d00d      	beq.n	80007cc <MCAL_SPI_GPIO_Set_Pins+0x3c>
 80007b0:	2bfb      	cmp	r3, #251	; 0xfb
 80007b2:	d000      	beq.n	80007b6 <MCAL_SPI_GPIO_Set_Pins+0x26>
				MCAL_GPIO_Init(GPIOA, &PinCfg);
				break;

				//Software Not used.
			default:
				break;
 80007b4:	e017      	b.n	80007e6 <MCAL_SPI_GPIO_Set_Pins+0x56>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80007b6:	2310      	movs	r3, #16
 80007b8:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80007ba:	2301      	movs	r3, #1
 80007bc:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4877      	ldr	r0, [pc, #476]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80007c6:	f7ff fe46 	bl	8000456 <MCAL_GPIO_Init>
				break;
 80007ca:	e00c      	b.n	80007e6 <MCAL_SPI_GPIO_Set_Pins+0x56>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80007cc:	2310      	movs	r3, #16
 80007ce:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007d0:	2306      	movs	r3, #6
 80007d2:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007d4:	2301      	movs	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4871      	ldr	r0, [pc, #452]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80007e0:	f7ff fe39 	bl	8000456 <MCAL_GPIO_Init>
				break;
 80007e4:	bf00      	nop
			}

			//SCK  : PA5
			//Master Alternate function push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80007e6:	2320      	movs	r3, #32
 80007e8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007ea:	2306      	movs	r3, #6
 80007ec:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	486a      	ldr	r0, [pc, #424]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80007fa:	f7ff fe2c 	bl	8000456 <MCAL_GPIO_Init>

			//MISO : PA6 (Supported only Full Duplex)
			//Full duplex / master Input floating
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000802:	2301      	movs	r3, #1
 8000804:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	4865      	ldr	r0, [pc, #404]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800080e:	f7ff fe22 	bl	8000456 <MCAL_GPIO_Init>
			//todo to support half duplex and simplex

			//MOSI : PA7 (Supported only Full Duplex)
			//Full duplex / master Alternate function push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000816:	2306      	movs	r3, #6
 8000818:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	485f      	ldr	r0, [pc, #380]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000826:	f7ff fe16 	bl	8000456 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB, &PinCfg);
			//todo to support half duplex and simplex
		}

	}
}
 800082a:	e0b3      	b.n	8000994 <MCAL_SPI_GPIO_Set_Pins+0x204>
			switch(Global_SPI_Config[SPI1_INDEX].NSS)
 800082c:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 800082e:	895b      	ldrh	r3, [r3, #10]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d000      	beq.n	8000836 <MCAL_SPI_GPIO_Set_Pins+0xa6>
				break;
 8000834:	e00a      	b.n	800084c <MCAL_SPI_GPIO_Set_Pins+0xbc>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000836:	2310      	movs	r3, #16
 8000838:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800083a:	2301      	movs	r3, #1
 800083c:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4857      	ldr	r0, [pc, #348]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000846:	f7ff fe06 	bl	8000456 <MCAL_GPIO_Init>
				break;
 800084a:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800084c:	2320      	movs	r3, #32
 800084e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000850:	2301      	movs	r3, #1
 8000852:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4619      	mov	r1, r3
 800085a:	4852      	ldr	r0, [pc, #328]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800085c:	f7ff fdfb 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000864:	2306      	movs	r3, #6
 8000866:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000868:	2301      	movs	r3, #1
 800086a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	484c      	ldr	r0, [pc, #304]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000874:	f7ff fdef 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800087c:	2301      	movs	r3, #1
 800087e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4847      	ldr	r0, [pc, #284]	; (80009a4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000888:	f7ff fde5 	bl	8000456 <MCAL_GPIO_Init>
}
 800088c:	e082      	b.n	8000994 <MCAL_SPI_GPIO_Set_Pins+0x204>
	else if(SPIx == SPI2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a45      	ldr	r2, [pc, #276]	; (80009a8 <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d17e      	bne.n	8000994 <MCAL_SPI_GPIO_Set_Pins+0x204>
		if(Global_SPI_Config[SPI2_INDEX].SPI_Mode == SPI_Mode_Master)
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 8000898:	7d1b      	ldrb	r3, [r3, #20]
 800089a:	2b04      	cmp	r3, #4
 800089c:	d146      	bne.n	800092c <MCAL_SPI_GPIO_Set_Pins+0x19c>
			switch(Global_SPI_Config[SPI2_INDEX].NSS)
 800089e:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 80008a0:	8bdb      	ldrh	r3, [r3, #30]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d00e      	beq.n	80008c4 <MCAL_SPI_GPIO_Set_Pins+0x134>
 80008a6:	2bfb      	cmp	r3, #251	; 0xfb
 80008a8:	d000      	beq.n	80008ac <MCAL_SPI_GPIO_Set_Pins+0x11c>
				break;
 80008aa:	e019      	b.n	80008e0 <MCAL_SPI_GPIO_Set_Pins+0x150>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008b2:	2301      	movs	r3, #1
 80008b4:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	483b      	ldr	r0, [pc, #236]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80008be:	f7ff fdca 	bl	8000456 <MCAL_GPIO_Init>
				break;
 80008c2:	e00d      	b.n	80008e0 <MCAL_SPI_GPIO_Set_Pins+0x150>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008ca:	2306      	movs	r3, #6
 80008cc:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4834      	ldr	r0, [pc, #208]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80008da:	f7ff fdbc 	bl	8000456 <MCAL_GPIO_Init>
				break;
 80008de:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008e6:	2306      	movs	r3, #6
 80008e8:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	482d      	ldr	r0, [pc, #180]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80008f6:	f7ff fdae 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80008fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008fe:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000900:	2301      	movs	r3, #1
 8000902:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	4828      	ldr	r0, [pc, #160]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 800090c:	f7ff fda3 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000914:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000916:	2306      	movs	r3, #6
 8000918:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000926:	f7ff fd96 	bl	8000456 <MCAL_GPIO_Init>
}
 800092a:	e033      	b.n	8000994 <MCAL_SPI_GPIO_Set_Pins+0x204>
			switch(Global_SPI_Config[SPI2_INDEX].NSS)
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 800092e:	8bdb      	ldrh	r3, [r3, #30]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d000      	beq.n	8000936 <MCAL_SPI_GPIO_Set_Pins+0x1a6>
				break;
 8000934:	e00b      	b.n	800094e <MCAL_SPI_GPIO_Set_Pins+0x1be>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800093c:	2301      	movs	r3, #1
 800093e:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000948:	f7ff fd85 	bl	8000456 <MCAL_GPIO_Init>
				break;
 800094c:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000954:	2301      	movs	r3, #1
 8000956:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	4813      	ldr	r0, [pc, #76]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000960:	f7ff fd79 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000968:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;;
 800096a:	2306      	movs	r3, #6
 800096c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 800097a:	f7ff fd6c 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800097e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000982:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000984:	2301      	movs	r3, #1
 8000986:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000990:	f7ff fd61 	bl	8000456 <MCAL_GPIO_Init>
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40013000 	.word	0x40013000
 80009a0:	2000001c 	.word	0x2000001c
 80009a4:	40010800 	.word	0x40010800
 80009a8:	40003800 	.word	0x40003800
 80009ac:	40010c00 	.word	0x40010c00

080009b0 <MCAL_SPI_SendData>:

void MCAL_SPI_SendData(SPI_TypeDef* SPIx, uint16_t* pTxBuffer, enum SPI_Polling_mechanism PollingEn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	4613      	mov	r3, r2
 80009bc:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == PollingEnable)
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d106      	bne.n	80009d2 <MCAL_SPI_SendData+0x22>
	{
		//Wait until TXE flag is set
		while(!(SPIx->SR & SPI_SR_TXE));
 80009c4:	bf00      	nop
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f9      	beq.n	80009c6 <MCAL_SPI_SendData+0x16>
	}

	SPIx->DR = *pTxBuffer;
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	60da      	str	r2, [r3, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <MCAL_SPI_ReceiveData>:

void MCAL_SPI_ReceiveData(SPI_TypeDef* SPIx, uint16_t* pRxBuffer, enum SPI_Polling_mechanism PollingEn)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == PollingEnable)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d106      	bne.n	8000a08 <MCAL_SPI_ReceiveData+0x22>
	{
		//Wait until RXNE flag is set
		//Bit 0 RXNE: Receive Buffer not empty
		while(!(SPIx->SR & SPI_SR_RXNE));
 80009fa:	bf00      	nop
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f9      	beq.n	80009fc <MCAL_SPI_ReceiveData+0x16>
	}

	*pRxBuffer = SPIx->DR;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	801a      	strh	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <MCAL_SPI_TxRx>:

void MCAL_SPI_TxRx(SPI_TypeDef* SPIx, uint16_t* pBuffer, enum SPI_Polling_mechanism PollingEn)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	4613      	mov	r3, r2
 8000a28:	71fb      	strb	r3, [r7, #7]
	MCAL_SPI_SendData(SPIx, pBuffer, PollingEn);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff ffbd 	bl	80009b0 <MCAL_SPI_SendData>

	MCAL_SPI_ReceiveData(SPIx, pBuffer, PollingEn);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff ffd2 	bl	80009e6 <MCAL_SPI_ReceiveData>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <SPI1_IRQHandler>:
 * 										IRQ
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE =  ( (SPI1->SR & (1<<1) ) >> 1);
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <SPI1_IRQHandler+0x50>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	085b      	lsrs	r3, r3, #1
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	793b      	ldrb	r3, [r7, #4]
 8000a60:	f362 0300 	bfi	r3, r2, #0, #1
 8000a64:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1<<0) ) >> 0);
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <SPI1_IRQHandler+0x50>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	793b      	ldrb	r3, [r7, #4]
 8000a72:	f362 0341 	bfi	r3, r2, #1, #1
 8000a76:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1<<4) ) >> 4);
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <SPI1_IRQHandler+0x50>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	091b      	lsrs	r3, r3, #4
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	793b      	ldrb	r3, [r7, #4]
 8000a86:	f362 0382 	bfi	r3, r2, #2, #1
 8000a8a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX].P_IRQ_CallBack(irq_src);
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SPI1_IRQHandler+0x54>)
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	7938      	ldrb	r0, [r7, #4]
 8000a92:	4798      	blx	r3
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013000 	.word	0x40013000
 8000aa0:	2000001c 	.word	0x2000001c

08000aa4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE =  ( (SPI2->SR & (1<<1) ) >> 1);
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <SPI2_IRQHandler+0x50>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	085b      	lsrs	r3, r3, #1
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	793b      	ldrb	r3, [r7, #4]
 8000ab8:	f362 0300 	bfi	r3, r2, #0, #1
 8000abc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1<<0) ) >> 0);
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <SPI2_IRQHandler+0x50>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	793b      	ldrb	r3, [r7, #4]
 8000aca:	f362 0341 	bfi	r3, r2, #1, #1
 8000ace:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1<<4) ) >> 4);
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <SPI2_IRQHandler+0x50>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	091b      	lsrs	r3, r3, #4
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	793b      	ldrb	r3, [r7, #4]
 8000ade:	f362 0382 	bfi	r3, r2, #2, #1
 8000ae2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX].P_IRQ_CallBack(irq_src);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SPI2_IRQHandler+0x54>)
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	7938      	ldrb	r0, [r7, #4]
 8000aea:	4798      	blx	r3
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40003800 	.word	0x40003800
 8000af8:	2000001c 	.word	0x2000001c

08000afc <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			- none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 8000b06:	4a57      	ldr	r2, [pc, #348]	; (8000c64 <MCAL_UART_Init+0x168>)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a56      	ldr	r2, [pc, #344]	; (8000c68 <MCAL_UART_Init+0x16c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d106      	bne.n	8000b22 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000b14:	4b55      	ldr	r3, [pc, #340]	; (8000c6c <MCAL_UART_Init+0x170>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a54      	ldr	r2, [pc, #336]	; (8000c6c <MCAL_UART_Init+0x170>)
 8000b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	e014      	b.n	8000b4c <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a52      	ldr	r2, [pc, #328]	; (8000c70 <MCAL_UART_Init+0x174>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d106      	bne.n	8000b38 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000b2a:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <MCAL_UART_Init+0x170>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a4f      	ldr	r2, [pc, #316]	; (8000c6c <MCAL_UART_Init+0x170>)
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	e009      	b.n	8000b4c <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a4e      	ldr	r2, [pc, #312]	; (8000c74 <MCAL_UART_Init+0x178>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d105      	bne.n	8000b4c <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000b40:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <MCAL_UART_Init+0x170>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <MCAL_UART_Init+0x170>)
 8000b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4a:	61d3      	str	r3, [r2, #28]



	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	7812      	ldrb	r2, [r2, #0]
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	7a12      	ldrb	r2, [r2, #8]
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	7a52      	ldrb	r2, [r2, #9]
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	7a92      	ldrb	r2, [r2, #10]
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	7ad2      	ldrb	r2, [r2, #11]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <MCAL_UART_Init+0x16c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d103      	bne.n	8000bae <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000ba6:	f7ff fd33 	bl	8000610 <MCAL_RCC_GetPCLK2Freq>
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	e002      	b.n	8000bb4 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000bae:	f7ff fd1b 	bl	80005e8 <MCAL_RCC_GetPCLK1Freq>
 8000bb2:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	0119      	lsls	r1, r3, #4
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	009a      	lsls	r2, r3, #2
 8000bcc:	441a      	add	r2, r3
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000be4:	2064      	movs	r0, #100	; 0x64
 8000be6:	fb00 f303 	mul.w	r3, r0, r3
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <MCAL_UART_Init+0x17c>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	095b      	lsrs	r3, r3, #5
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	7b1b      	ldrb	r3, [r3, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d026      	beq.n	8000c5a <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	7b12      	ldrb	r2, [r2, #12]
 8000c14:	431a      	orrs	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <MCAL_UART_Init+0x16c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d106      	bne.n	8000c30 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable();
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MCAL_UART_Init+0x180>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <MCAL_UART_Init+0x180>)
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable();
	}

}
 8000c2e:	e014      	b.n	8000c5a <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART2 )
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <MCAL_UART_Init+0x174>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d106      	bne.n	8000c46 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable();
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MCAL_UART_Init+0x180>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <MCAL_UART_Init+0x180>)
 8000c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	e009      	b.n	8000c5a <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART3 )
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <MCAL_UART_Init+0x178>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d105      	bne.n	8000c5a <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable();
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MCAL_UART_Init+0x180>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <MCAL_UART_Init+0x180>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000044 	.word	0x20000044
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40004800 	.word	0x40004800
 8000c78:	51eb851f 	.word	0x51eb851f
 8000c7c:	e000e110 	.word	0xe000e110

08000c80 <MCAL_UART_SendData>:
			//			bit

 */

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	71fb      	strb	r3, [r7, #7]
	uint16_t *pdata;

	// wait until TXE flag is set in the SR
	if (PollingEn == enable)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d106      	bne.n	8000ca2 <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 8000c94:	bf00      	nop
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <MCAL_UART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	605a      	str	r2, [r3, #4]
	}
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
	...

08000cb8 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a2b      	ldr	r2, [pc, #172]	; (8000d70 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d118      	bne.n	8000cfa <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ccc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4825      	ldr	r0, [pc, #148]	; (8000d74 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cde:	f7ff fbba 	bl	8000456 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4820      	ldr	r0, [pc, #128]	; (8000d74 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cf4:	f7ff fbaf 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 8000cf8:	e036      	b.n	8000d68 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2 )
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d116      	bne.n	8000d30 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000d02:	2304      	movs	r3, #4
 8000d04:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d06:	2306      	movs	r3, #6
 8000d08:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	4817      	ldr	r0, [pc, #92]	; (8000d74 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d16:	f7ff fb9e 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	4812      	ldr	r0, [pc, #72]	; (8000d74 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d2a:	f7ff fb94 	bl	8000456 <MCAL_GPIO_Init>
}
 8000d2e:	e01b      	b.n	8000d68 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d117      	bne.n	8000d68 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d3e:	2306      	movs	r3, #6
 8000d40:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d4e:	f7ff fb82 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d56:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4619      	mov	r1, r3
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d64:	f7ff fb77 	bl	8000456 <MCAL_GPIO_Init>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40013800 	.word	0x40013800
 8000d74:	40010800 	.word	0x40010800
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40004800 	.word	0x40004800
 8000d80:	40010c00 	.word	0x40010c00

08000d84 <USART1_IRQHandler>:


//ISR Hnadlers
void USART1_IRQHandler (void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <USART1_IRQHandler+0x10>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	4798      	blx	r3
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000044 	.word	0x20000044

08000d98 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <USART2_IRQHandler+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	4798      	blx	r3
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000044 	.word	0x20000044

08000dac <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <USART3_IRQHandler+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	4798      	blx	r3
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000044 	.word	0x20000044

08000dc0 <clock_init>:

//#define MCU_Act_as_Master
#define MCU_Act_as_Slave

void clock_init()
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <clock_init+0x30>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <clock_init+0x30>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <clock_init+0x30>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <clock_init+0x30>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <clock_init+0x30>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <clock_init+0x30>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6193      	str	r3, [r2, #24]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <UART_IRQ_CallBack>:

//uint32_t IRQ_Flag = 0 ;
uint8_t ch;

void UART_IRQ_CallBack(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
		MCAL_SPI_TxRx(SPI1, &ch, PollingEnable);

		//Return Slave Select to be HIGH (idle mode)
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	#endif
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <SPI_IRQ_CallBack>:

void SPI_IRQ_CallBack(struct S_IRQ_SRC irq_src)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	7138      	strb	r0, [r7, #4]
	#ifdef MCU_Act_as_Slave
		if(irq_src.RXNE)
 8000e08:	793b      	ldrb	r3, [r7, #4]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00c      	beq.n	8000e2e <SPI_IRQ_CallBack+0x2e>
		{
			ch = 0xf;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <SPI_IRQ_CallBack+0x38>)
 8000e16:	220f      	movs	r2, #15
 8000e18:	701a      	strb	r2, [r3, #0]
			MCAL_SPI_TxRx(SPI1, &ch, PollingDisable);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <SPI_IRQ_CallBack+0x38>)
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <SPI_IRQ_CallBack+0x3c>)
 8000e20:	f7ff fdfc 	bl	8000a1c <MCAL_SPI_TxRx>
			MCAL_UART_SendData(USART1, &ch, enable);
 8000e24:	2200      	movs	r2, #0
 8000e26:	4904      	ldr	r1, [pc, #16]	; (8000e38 <SPI_IRQ_CallBack+0x38>)
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <SPI_IRQ_CallBack+0x40>)
 8000e2a:	f7ff ff29 	bl	8000c80 <MCAL_UART_SendData>
		}
	#endif
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000088 	.word	0x20000088
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	40013800 	.word	0x40013800

08000e44 <main>:

int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
	UART_Config UART_Pincfg;
	GPIO_PinConfig_t PinConfig;

	clock_init();
 8000e4a:	f7ff ffb9 	bl	8000dc0 <clock_init>
	/* ============================ UART init ============================ */
	//USART1_TX : PA9
	//USART1_Rx : PA10
	//USART1_RTS: PA12
	//USART1_CTS: PA11
	UART_Pincfg.USART_Mode = UART_MODE_TX_RX;
 8000e4e:	230c      	movs	r3, #12
 8000e50:	773b      	strb	r3, [r7, #28]
	UART_Pincfg.BaudRate = UART_BaudRate_115200;
 8000e52:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e56:	623b      	str	r3, [r7, #32]
	UART_Pincfg.Payload_Length = UART_Payload_Length_8B;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UART_Pincfg.Parity = UART_Parity__NONE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	UART_Pincfg.StopBits = UART_StopBits__1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	UART_Pincfg.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	UART_Pincfg.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000e70:	2320      	movs	r3, #32
 8000e72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	UART_Pincfg.P_IRQ_CallBack = UART_IRQ_CallBack;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <main+0x84>)
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c

	MCAL_UART_Init(USART1, &UART_Pincfg);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4812      	ldr	r0, [pc, #72]	; (8000ecc <main+0x88>)
 8000e82:	f7ff fe3b 	bl	8000afc <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <main+0x88>)
 8000e88:	f7ff ff16 	bl	8000cb8 <MCAL_UART_GPIO_Set_Pins>
	//MISO : PA6
	//MOSI : PA7
	SPI_Config_t SPI_Config;

	//Common Configurations
	SPI_Config.CLK_Polarity = SPI_CLK_PHASE_2EDGE_Sampling;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	733b      	strb	r3, [r7, #12]
	SPI_Config.CLK_PHASE = SPI_CLK_Polarity_HIGH_idle;
 8000e90:	2302      	movs	r3, #2
 8000e92:	737b      	strb	r3, [r7, #13]
	SPI_Config.Data_Size = SPI_Data_Size_8bit;
 8000e94:	2300      	movs	r3, #0
 8000e96:	817b      	strh	r3, [r7, #10]
	SPI_Config.Frame_Format = SPI_Frame_Format_MSB;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	723b      	strb	r3, [r7, #8]
	//Assume by default PCLK2 = 8 MHZ
	SPI_Config.Baud_Rate_PreSCLR = SPI_Baud_Rate_PreSCLR_8;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	743b      	strb	r3, [r7, #16]
	SPI_Config.Communication_Mode = SPI_Communication_Mode_2LINES;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);

#endif

#ifdef MCU_Act_as_Slave
	SPI_Config.IRQ_Enable = SPI_IRQ_RXNEIE;
 8000ea4:	2340      	movs	r3, #64	; 0x40
 8000ea6:	747b      	strb	r3, [r7, #17]
	SPI_Config.NSS = SPI_NSS_HW_Slave;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	81fb      	strh	r3, [r7, #14]
	SPI_Config.P_IRQ_CallBack = SPI_IRQ_CallBack;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <main+0x8c>)
 8000eae:	617b      	str	r3, [r7, #20]
	SPI_Config.SPI_Mode = SPI_Mode_Slave;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	713b      	strb	r3, [r7, #4]
#endif
	MCAL_SPI_Init(SPI1, &SPI_Config);
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <main+0x90>)
 8000eba:	f7ff fbbd 	bl	8000638 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <main+0x90>)
 8000ec0:	f7ff fc66 	bl	8000790 <MCAL_SPI_GPIO_Set_Pins>

	while(1)
 8000ec4:	e7fe      	b.n	8000ec4 <main+0x80>
 8000ec6:	bf00      	nop
 8000ec8:	08000df5 	.word	0x08000df5
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	08000e01 	.word	0x08000e01
 8000ed4:	40013000 	.word	0x40013000

08000ed8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eda:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000edc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <LoopForever+0xe>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <LoopForever+0x16>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f06:	f000 f811 	bl	8000f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0a:	f7ff ff9b 	bl	8000e44 <main>

08000f0e <LoopForever>:

LoopForever:
    b LoopForever
 8000f0e:	e7fe      	b.n	8000f0e <LoopForever>
  ldr   r0, =_estack
 8000f10:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f1c:	08000fac 	.word	0x08000fac
  ldr r2, =_sbss
 8000f20:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f24:	2000008c 	.word	0x2000008c

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>
	...

08000f2c <__libc_init_array>:
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	2500      	movs	r5, #0
 8000f30:	4e0c      	ldr	r6, [pc, #48]	; (8000f64 <__libc_init_array+0x38>)
 8000f32:	4c0d      	ldr	r4, [pc, #52]	; (8000f68 <__libc_init_array+0x3c>)
 8000f34:	1ba4      	subs	r4, r4, r6
 8000f36:	10a4      	asrs	r4, r4, #2
 8000f38:	42a5      	cmp	r5, r4
 8000f3a:	d109      	bne.n	8000f50 <__libc_init_array+0x24>
 8000f3c:	f000 f81a 	bl	8000f74 <_init>
 8000f40:	2500      	movs	r5, #0
 8000f42:	4e0a      	ldr	r6, [pc, #40]	; (8000f6c <__libc_init_array+0x40>)
 8000f44:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <__libc_init_array+0x44>)
 8000f46:	1ba4      	subs	r4, r4, r6
 8000f48:	10a4      	asrs	r4, r4, #2
 8000f4a:	42a5      	cmp	r5, r4
 8000f4c:	d105      	bne.n	8000f5a <__libc_init_array+0x2e>
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f54:	4798      	blx	r3
 8000f56:	3501      	adds	r5, #1
 8000f58:	e7ee      	b.n	8000f38 <__libc_init_array+0xc>
 8000f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f5e:	4798      	blx	r3
 8000f60:	3501      	adds	r5, #1
 8000f62:	e7f2      	b.n	8000f4a <__libc_init_array+0x1e>
 8000f64:	08000fa4 	.word	0x08000fa4
 8000f68:	08000fa4 	.word	0x08000fa4
 8000f6c:	08000fa4 	.word	0x08000fa4
 8000f70:	08000fa8 	.word	0x08000fa8

08000f74 <_init>:
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f76:	bf00      	nop
 8000f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7a:	bc08      	pop	{r3}
 8000f7c:	469e      	mov	lr, r3
 8000f7e:	4770      	bx	lr

08000f80 <_fini>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	bf00      	nop
 8000f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f86:	bc08      	pop	{r3}
 8000f88:	469e      	mov	lr, r3
 8000f8a:	4770      	bx	lr
