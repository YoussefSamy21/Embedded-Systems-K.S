
ATMega32_UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000646  000006da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000aa  008000aa  00000724  2**0
                  ALLOC
  3 .stab         00000d44  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007b6  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3b       	cpi	r26, 0xBE	; 190
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1c 03 	call	0x638	; 0x638 <main>
  8a:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PUSH>:
static uint8 STACK[STACK_SIZE];
static uint8 SP = 0;


Stack_Status PUSH(uint8 data)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <PUSH+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	8a 83       	std	Y+2, r24	; 0x02
	Stack_Status status;
	if(SP < STACK_SIZE)
  9e:	80 91 aa 00 	lds	r24, 0x00AA
  a2:	8a 30       	cpi	r24, 0x0A	; 10
  a4:	88 f4       	brcc	.+34     	; 0xc8 <PUSH+0x36>
	{
		STACK[SP] = data;
  a6:	80 91 aa 00 	lds	r24, 0x00AA
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	e5 55       	subi	r30, 0x55	; 85
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	8a 81       	ldd	r24, Y+2	; 0x02
  b6:	80 83       	st	Z, r24
		SP++;
  b8:	80 91 aa 00 	lds	r24, 0x00AA
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 aa 00 	sts	0x00AA, r24
		status = DONE;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	02 c0       	rjmp	.+4      	; 0xcc <PUSH+0x3a>
	}
	else
	{
		status = STACK_FULL;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
  cc:	89 81       	ldd	r24, Y+1	; 0x01
}
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <POP>:


Stack_Status POP(uint8 *pdata)
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	00 d0       	rcall	.+0      	; 0xde <POP+0x6>
  de:	0f 92       	push	r0
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	9b 83       	std	Y+3, r25	; 0x03
  e6:	8a 83       	std	Y+2, r24	; 0x02
	Stack_Status status;
	if(SP == 0)
  e8:	80 91 aa 00 	lds	r24, 0x00AA
  ec:	88 23       	and	r24, r24
  ee:	11 f4       	brne	.+4      	; 0xf4 <POP+0x1c>
	{
		status = STACK_EMPTY;
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	12 c0       	rjmp	.+36     	; 0x118 <POP+0x40>
	}
	else
	{
		SP--;
  f4:	80 91 aa 00 	lds	r24, 0x00AA
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	80 93 aa 00 	sts	0x00AA, r24
		*pdata = STACK[SP];
  fe:	80 91 aa 00 	lds	r24, 0x00AA
 102:	88 2f       	mov	r24, r24
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	e5 55       	subi	r30, 0x55	; 85
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	ea 81       	ldd	r30, Y+2	; 0x02
 110:	fb 81       	ldd	r31, Y+3	; 0x03
 112:	80 83       	st	Z, r24
		status = DONE;
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
 118:	89 81       	ldd	r24, Y+1	; 0x01
}
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	08 95       	ret

00000126 <UART_Init>:
const uint16 BaudRateArray[TOTAL_SPEED_MODE][TOTAL_CPU_F][TOTAL_BAUD_RATE] =
	 {     { {103, 51, 25, 16, 12,  8} , {207,103, 51, 34, 25, 16} , {416,207,103, 68 ,51, 34} } ,
	       { {207,103, 51, 34, 25, 16} , {416,207,103, 68 ,51, 34} , {832,416,207,138,103, 68} } };

void UART_Init(void)
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	00 d0       	rcall	.+0      	; 0x12c <UART_Init+0x6>
 12c:	0f 92       	push	r0
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	uint8  UCSRC_var=0;
 132:	1b 82       	std	Y+3, r1	; 0x03
	uint16 UBRR_var=0;
 134:	1a 82       	std	Y+2, r1	; 0x02
 136:	19 82       	std	Y+1, r1	; 0x01
	/***************************** Transmission Speed***************************/
	#if (SPEED_MODE == NORMAL_SPEED)
	CLEAR_BIT(UCSRA,U2X);
	#elif (SPEED_MODE == DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
 138:	ab e2       	ldi	r26, 0x2B	; 43
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	eb e2       	ldi	r30, 0x2B	; 43
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	8c 93       	st	X, r24
	#endif

	//******************set URSEL to write data to UCSRC register***************/
	SET_BIT(UCSRC_var,URSEL);
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	8b 83       	std	Y+3, r24	; 0x03

	//********************************Synch/Asynch ***********************************/
	 #if (SYNCH_MODE == SYNCH)
	 SET_BIT(UCSRC_var,UMSEL)
	 #elif (SYNCH_MODE == ASYNCH)
	 CLEAR_BIT(UCSRC_var,UMSEL);
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRC_var,UPM1);
	#elif (PARITY_MODE==EVEN_PARITY)
	CLEAR_BIT(UCSRC_var,UPM0);
	SET_BIT(UCSRC_var,UPM1);
	#elif (PARITY_MODE == ODD_PARITY)
	SET_BIT(UCSRC_var,UPM0);
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	80 61       	ori	r24, 0x10	; 16
 156:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UPM1);
 158:	8b 81       	ldd	r24, Y+3	; 0x03
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	8b 83       	std	Y+3, r24	; 0x03
	#elif (N_DATA_BITS==_7_DATA_BITS)
	CLEAR_BIT(UCSRC_var,UCSZ0);
	SET_BIT(UCSRC_var,UCSZ1);
	CLEAR_BIT(UCSRB,UCSZ2);
	#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	82 60       	ori	r24, 0x02	; 2
 162:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
 164:	8b 81       	ldd	r24, Y+3	; 0x03
 166:	84 60       	ori	r24, 0x04	; 4
 168:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRB,UCSZ2);
 16a:	aa e2       	ldi	r26, 0x2A	; 42
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	ea e2       	ldi	r30, 0x2A	; 42
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	8c 93       	st	X, r24

	//************************Stop bits*******************************/
	#if (N_STOP_BITS==ONE_STOP_BIT)
	CLEAR_BIT(UCSRC_var,USBS);
	#elif (N_STOP_BITS==TWO_STOP_BIT)
	SET_BIT(UCSRC_var,USBS);
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	8b 83       	std	Y+3, r24	; 0x03
	#endif

	//*****************set UCSRC value   *******************************/
	UCSRC=UCSRC_var;
 17e:	e0 e4       	ldi	r30, 0x40	; 64
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	80 83       	st	Z, r24

	//************************Baud rate *******************************/
	UBRR_var=BaudRateArray[SPEED_MODE][CPU_F][BAUD_RATE];
 186:	80 91 95 00 	lds	r24, 0x0095
 18a:	90 91 96 00 	lds	r25, 0x0096
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (uint8)(UBRR_var>>8);
 192:	e0 e4       	ldi	r30, 0x40	; 64
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	89 2f       	mov	r24, r25
 19c:	99 27       	eor	r25, r25
 19e:	80 83       	st	Z, r24
	UBRRL = (uint8)UBRR_var;
 1a0:	e9 e2       	ldi	r30, 0x29	; 41
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	80 83       	st	Z, r24

	//************************ Enable Tx/Rx *******************************/
	//enable UART  receiver.
	SET_BIT(UCSRB,RXEN);
 1a8:	aa e2       	ldi	r26, 0x2A	; 42
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	ea e2       	ldi	r30, 0x2A	; 42
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	8c 93       	st	X, r24
	//enable UART  transmitter .
	SET_BIT(UCSRB,TXEN);
 1b6:	aa e2       	ldi	r26, 0x2A	; 42
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	ea e2       	ldi	r30, 0x2A	; 42
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	8c 93       	st	X, r24
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	08 95       	ret

000001d0 <UART_Send_Byte>:


/******* Polling Mechanism *******/
void UART_Send_Byte(uint8 data)
{
 1d0:	df 93       	push	r29
 1d2:	cf 93       	push	r28
 1d4:	0f 92       	push	r0
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,UDRE)));
 1dc:	eb e2       	ldi	r30, 0x2B	; 43
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	82 95       	swap	r24
 1e4:	86 95       	lsr	r24
 1e6:	87 70       	andi	r24, 0x07	; 7
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	81 70       	andi	r24, 0x01	; 1
 1ee:	90 70       	andi	r25, 0x00	; 0
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	a1 f3       	breq	.-24     	; 0x1dc <UART_Send_Byte+0xc>
	UDR = data;
 1f4:	ec e2       	ldi	r30, 0x2C	; 44
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	80 83       	st	Z, r24
}
 1fc:	0f 90       	pop	r0
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <UART_Receive_Byte>:

uint8 UART_Receive_Byte(void)
{
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,RXC)));
 20c:	eb e2       	ldi	r30, 0x2B	; 43
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	88 23       	and	r24, r24
 214:	dc f7       	brge	.-10     	; 0x20c <UART_Receive_Byte+0x8>
	return UDR;
 216:	ec e2       	ldi	r30, 0x2C	; 44
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
}
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	08 95       	ret

00000222 <UART_Send_Byte_NoBlock>:


/******* Periodic Check (No Block) *******/
// the aim of these functions to not block or delaying the main function
uint8 UART_Send_Byte_NoBlock(uint8 *pdata)
{
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	00 d0       	rcall	.+0      	; 0x228 <UART_Send_Byte_NoBlock+0x6>
 228:	0f 92       	push	r0
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	9b 83       	std	Y+3, r25	; 0x03
 230:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status;
	if(GET_BIT(UCSRA,UDRE))
 232:	eb e2       	ldi	r30, 0x2B	; 43
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	82 95       	swap	r24
 23a:	86 95       	lsr	r24
 23c:	87 70       	andi	r24, 0x07	; 7
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	81 70       	andi	r24, 0x01	; 1
 244:	90 70       	andi	r25, 0x00	; 0
 246:	88 23       	and	r24, r24
 248:	49 f0       	breq	.+18     	; 0x25c <UART_Send_Byte_NoBlock+0x3a>
	{
		UDR = *pdata;
 24a:	ac e2       	ldi	r26, 0x2C	; 44
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	ea 81       	ldd	r30, Y+2	; 0x02
 250:	fb 81       	ldd	r31, Y+3	; 0x03
 252:	80 81       	ld	r24, Z
 254:	8c 93       	st	X, r24
		status = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	01 c0       	rjmp	.+2      	; 0x25e <UART_Send_Byte_NoBlock+0x3c>
	}
	else
	{
		status = 0;
 25c:	19 82       	std	Y+1, r1	; 0x01
	}

	return status;
 25e:	89 81       	ldd	r24, Y+1	; 0x01
}
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	08 95       	ret

0000026c <UART_Receive_Byte_NoBlock>:

uint8 UART_Receive_Byte_NoBlock(uint8 *pdata)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	00 d0       	rcall	.+0      	; 0x272 <UART_Receive_Byte_NoBlock+0x6>
 272:	0f 92       	push	r0
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	9b 83       	std	Y+3, r25	; 0x03
 27a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status;
	if(GET_BIT(UCSRA,RXC))
 27c:	eb e2       	ldi	r30, 0x2B	; 43
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	88 23       	and	r24, r24
 284:	4c f4       	brge	.+18     	; 0x298 <UART_Receive_Byte_NoBlock+0x2c>
	{
		*pdata = UDR;
 286:	ec e2       	ldi	r30, 0x2C	; 44
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	ea 81       	ldd	r30, Y+2	; 0x02
 28e:	fb 81       	ldd	r31, Y+3	; 0x03
 290:	80 83       	st	Z, r24
		status = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	01 c0       	rjmp	.+2      	; 0x29a <UART_Receive_Byte_NoBlock+0x2e>
	}
	else
	{
		status = 0;
 298:	19 82       	std	Y+1, r1	; 0x01
	}

	return status;
 29a:	89 81       	ldd	r24, Y+1	; 0x01
}
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	08 95       	ret

000002a8 <UART_Tx_Set_CallBack>:

/******* CallBack Functions *******/
void UART_Tx_Set_CallBack(void (*LocalFptr)(void))
{
 2a8:	df 93       	push	r29
 2aa:	cf 93       	push	r28
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <UART_Tx_Set_CallBack+0x6>
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	89 83       	std	Y+1, r24	; 0x01
	UART_Tx_Fptr = LocalFptr;
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ba:	90 93 b7 00 	sts	0x00B7, r25
 2be:	80 93 b6 00 	sts	0x00B6, r24
}
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <UART_Rx_Set_CallBack>:
void UART_Rx_Set_CallBack(void (*LocalFptr)(void))
{
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <UART_Rx_Set_CallBack+0x6>
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	9a 83       	std	Y+2, r25	; 0x02
 2d8:	89 83       	std	Y+1, r24	; 0x01
	UART_Rx_Fptr = LocalFptr;
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	90 93 b9 00 	sts	0x00B9, r25
 2e2:	80 93 b8 00 	sts	0x00B8, r24
}
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	08 95       	ret

000002f0 <__vector_15>:

ISR(USART_TXC_vect)
{
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
 312:	df 93       	push	r29
 314:	cf 93       	push	r28
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
	if(UART_Tx_Fptr != NULLPTR)
 31a:	80 91 b6 00 	lds	r24, 0x00B6
 31e:	90 91 b7 00 	lds	r25, 0x00B7
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	29 f0       	breq	.+10     	; 0x330 <__vector_15+0x40>
	{
		UART_Tx_Fptr();
 326:	e0 91 b6 00 	lds	r30, 0x00B6
 32a:	f0 91 b7 00 	lds	r31, 0x00B7
 32e:	09 95       	icall
	}
}
 330:	cf 91       	pop	r28
 332:	df 91       	pop	r29
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_13>:
ISR(USART_RXC_vect)
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
	if(UART_Rx_Fptr != NULLPTR)
 380:	80 91 b8 00 	lds	r24, 0x00B8
 384:	90 91 b9 00 	lds	r25, 0x00B9
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	29 f0       	breq	.+10     	; 0x396 <__vector_13+0x40>
	{
		UART_Rx_Fptr();
 38c:	e0 91 b8 00 	lds	r30, 0x00B8
 390:	f0 91 b9 00 	lds	r31, 0x00B9
 394:	09 95       	icall
	}
}
 396:	cf 91       	pop	r28
 398:	df 91       	pop	r29
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <UART_Tx_Interrupt_Enable>:



/******* Tx/Rx Interrupt Enable *******/
void UART_Tx_Interrupt_Enable(void)
{
 3bc:	df 93       	push	r29
 3be:	cf 93       	push	r28
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
 3c4:	aa e2       	ldi	r26, 0x2A	; 42
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	ea e2       	ldi	r30, 0x2A	; 42
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	8c 93       	st	X, r24
}
 3d2:	cf 91       	pop	r28
 3d4:	df 91       	pop	r29
 3d6:	08 95       	ret

000003d8 <UART_Rx_Interrupt_Enable>:
void UART_Rx_Interrupt_Enable(void)
{
 3d8:	df 93       	push	r29
 3da:	cf 93       	push	r28
 3dc:	cd b7       	in	r28, 0x3d	; 61
 3de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
 3e0:	aa e2       	ldi	r26, 0x2A	; 42
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	ea e2       	ldi	r30, 0x2A	; 42
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	80 68       	ori	r24, 0x80	; 128
 3ec:	8c 93       	st	X, r24
}
 3ee:	cf 91       	pop	r28
 3f0:	df 91       	pop	r29
 3f2:	08 95       	ret

000003f4 <UART_Tx_Interrupt_Disable>:


/******* Tx/Rx Interrupt Disable *******/
void UART_Tx_Interrupt_Disable(void)
{
 3f4:	df 93       	push	r29
 3f6:	cf 93       	push	r28
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
 3fc:	aa e2       	ldi	r26, 0x2A	; 42
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	ea e2       	ldi	r30, 0x2A	; 42
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	8f 7b       	andi	r24, 0xBF	; 191
 408:	8c 93       	st	X, r24
}
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	08 95       	ret

00000410 <UART_Rx_Interrupt_Disable>:
void UART_Rx_Interrupt_Disable(void)
{
 410:	df 93       	push	r29
 412:	cf 93       	push	r28
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE);
 418:	aa e2       	ldi	r26, 0x2A	; 42
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	ea e2       	ldi	r30, 0x2A	; 42
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	8f 77       	andi	r24, 0x7F	; 127
 424:	8c 93       	st	X, r24
}
 426:	cf 91       	pop	r28
 428:	df 91       	pop	r29
 42a:	08 95       	ret

0000042c <UART_Send_Byte_inISR>:


void UART_Send_Byte_inISR(uint8 data)
{
 42c:	df 93       	push	r29
 42e:	cf 93       	push	r28
 430:	0f 92       	push	r0
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
 438:	ec e2       	ldi	r30, 0x2C	; 44
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	80 83       	st	Z, r24
}
 440:	0f 90       	pop	r0
 442:	cf 91       	pop	r28
 444:	df 91       	pop	r29
 446:	08 95       	ret

00000448 <UART_Receive_Byte_inISR>:

uint8 UART_Receive_Byte_inISR(void)
{
 448:	df 93       	push	r29
 44a:	cf 93       	push	r28
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
	return UDR;
 450:	ec e2       	ldi	r30, 0x2C	; 44
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
}
 456:	cf 91       	pop	r28
 458:	df 91       	pop	r29
 45a:	08 95       	ret

0000045c <UART_Send_String>:


//===============================================================================================

void UART_Send_String(uint8 *pStr) // Polling Mechanism
{
 45c:	df 93       	push	r29
 45e:	cf 93       	push	r28
 460:	00 d0       	rcall	.+0      	; 0x462 <UART_Send_String+0x6>
 462:	0f 92       	push	r0
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	9b 83       	std	Y+3, r25	; 0x03
 46a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 46c:	19 82       	std	Y+1, r1	; 0x01
 46e:	0e c0       	rjmp	.+28     	; 0x48c <UART_Send_String+0x30>
	while(pStr[i] != '\0')
	{
		UART_Send_Byte(pStr[i]);
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	28 2f       	mov	r18, r24
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	9b 81       	ldd	r25, Y+3	; 0x03
 47a:	fc 01       	movw	r30, r24
 47c:	e2 0f       	add	r30, r18
 47e:	f3 1f       	adc	r31, r19
 480:	80 81       	ld	r24, Z
 482:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <UART_Send_Byte>
		i++;
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	8f 5f       	subi	r24, 0xFF	; 255
 48a:	89 83       	std	Y+1, r24	; 0x01
//===============================================================================================

void UART_Send_String(uint8 *pStr) // Polling Mechanism
{
	uint8 i = 0;
	while(pStr[i] != '\0')
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	8a 81       	ldd	r24, Y+2	; 0x02
 494:	9b 81       	ldd	r25, Y+3	; 0x03
 496:	fc 01       	movw	r30, r24
 498:	e2 0f       	add	r30, r18
 49a:	f3 1f       	adc	r31, r19
 49c:	80 81       	ld	r24, Z
 49e:	88 23       	and	r24, r24
 4a0:	39 f7       	brne	.-50     	; 0x470 <UART_Send_String+0x14>
	{
		UART_Send_Byte(pStr[i]);
		i++;
	}
}
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	cf 91       	pop	r28
 4aa:	df 91       	pop	r29
 4ac:	08 95       	ret

000004ae <Func_Tx_Asynch>:

//===============================================================================================

static void Func_Tx_Asynch(void) // the function which will run in the ISR (Asynch Mode) (Background) , to send the rest of string
{
 4ae:	df 93       	push	r29
 4b0:	cf 93       	push	r28
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
	static uint8 i = 1;
	if(Asynch_Send_pStr[i] != '\0')
 4b6:	20 91 ba 00 	lds	r18, 0x00BA
 4ba:	30 91 bb 00 	lds	r19, 0x00BB
 4be:	80 91 60 00 	lds	r24, 0x0060
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	f9 01       	movw	r30, r18
 4c8:	e8 0f       	add	r30, r24
 4ca:	f9 1f       	adc	r31, r25
 4cc:	80 81       	ld	r24, Z
 4ce:	88 23       	and	r24, r24
 4d0:	a1 f0       	breq	.+40     	; 0x4fa <Func_Tx_Asynch+0x4c>
	{
		UART_Send_Byte_inISR(Asynch_Send_pStr[i]);
 4d2:	20 91 ba 00 	lds	r18, 0x00BA
 4d6:	30 91 bb 00 	lds	r19, 0x00BB
 4da:	80 91 60 00 	lds	r24, 0x0060
 4de:	88 2f       	mov	r24, r24
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	e8 0f       	add	r30, r24
 4e6:	f9 1f       	adc	r31, r25
 4e8:	80 81       	ld	r24, Z
 4ea:	0e 94 16 02 	call	0x42c	; 0x42c <UART_Send_Byte_inISR>
		i++;
 4ee:	80 91 60 00 	lds	r24, 0x0060
 4f2:	8f 5f       	subi	r24, 0xFF	; 255
 4f4:	80 93 60 00 	sts	0x0060, r24
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <Func_Tx_Asynch+0x56>
	}
	else
	{
		i = 1; // to be able to send string again
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 60 00 	sts	0x0060, r24
		UART_Tx_Interrupt_Disable();
 500:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <UART_Tx_Interrupt_Disable>
	}
}
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <UART_Send_String_Asynch>:
void UART_Send_String_Asynch(uint8 *pStr)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	00 d0       	rcall	.+0      	; 0x510 <UART_Send_String_Asynch+0x6>
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	9a 83       	std	Y+2, r25	; 0x02
 516:	89 83       	std	Y+1, r24	; 0x01
	UART_Send_Byte(pStr[0]);
 518:	e9 81       	ldd	r30, Y+1	; 0x01
 51a:	fa 81       	ldd	r31, Y+2	; 0x02
 51c:	80 81       	ld	r24, Z
 51e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <UART_Send_Byte>
	UART_Tx_Interrupt_Enable();
 522:	0e 94 de 01 	call	0x3bc	; 0x3bc <UART_Tx_Interrupt_Enable>
	UART_Tx_Set_CallBack(Func_Tx_Asynch);
 526:	87 e5       	ldi	r24, 0x57	; 87
 528:	92 e0       	ldi	r25, 0x02	; 2
 52a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <UART_Tx_Set_CallBack>

	Asynch_Send_pStr = pStr;
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	9a 81       	ldd	r25, Y+2	; 0x02
 532:	90 93 bb 00 	sts	0x00BB, r25
 536:	80 93 ba 00 	sts	0x00BA, r24
	// the Asynch_Send_pStr will send the rest of string in the Background (using interrupt) without delaying the main
}
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	cf 91       	pop	r28
 540:	df 91       	pop	r29
 542:	08 95       	ret

00000544 <UART_Receive_String>:

//===============================================================================================


void UART_Receive_String(uint8 *pStr) // Polling Mechanism (Receive until the Default_Stop Macro)
{
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	00 d0       	rcall	.+0      	; 0x54e <UART_Receive_String+0xa>
 54e:	0f 92       	push	r0
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	9b 83       	std	Y+3, r25	; 0x03
 556:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 558:	19 82       	std	Y+1, r1	; 0x01
	pStr[i] = UART_Receive_Byte();
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	9b 81       	ldd	r25, Y+3	; 0x03
 564:	8c 01       	movw	r16, r24
 566:	02 0f       	add	r16, r18
 568:	13 1f       	adc	r17, r19
 56a:	0e 94 02 01 	call	0x204	; 0x204 <UART_Receive_Byte>
 56e:	f8 01       	movw	r30, r16
 570:	80 83       	st	Z, r24
 572:	0f c0       	rjmp	.+30     	; 0x592 <UART_Receive_String+0x4e>
	while(pStr[i] != Default_Stop)
	{
		i++;
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	89 83       	std	Y+1, r24	; 0x01
		pStr[i] = UART_Receive_Byte();
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	9b 81       	ldd	r25, Y+3	; 0x03
 584:	8c 01       	movw	r16, r24
 586:	02 0f       	add	r16, r18
 588:	13 1f       	adc	r17, r19
 58a:	0e 94 02 01 	call	0x204	; 0x204 <UART_Receive_Byte>
 58e:	f8 01       	movw	r30, r16
 590:	80 83       	st	Z, r24

void UART_Receive_String(uint8 *pStr) // Polling Mechanism (Receive until the Default_Stop Macro)
{
	uint8 i = 0;
	pStr[i] = UART_Receive_Byte();
	while(pStr[i] != Default_Stop)
 592:	89 81       	ldd	r24, Y+1	; 0x01
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	8a 81       	ldd	r24, Y+2	; 0x02
 59a:	9b 81       	ldd	r25, Y+3	; 0x03
 59c:	fc 01       	movw	r30, r24
 59e:	e2 0f       	add	r30, r18
 5a0:	f3 1f       	adc	r31, r19
 5a2:	80 81       	ld	r24, Z
 5a4:	8d 30       	cpi	r24, 0x0D	; 13
 5a6:	31 f7       	brne	.-52     	; 0x574 <UART_Receive_String+0x30>
	{
		i++;
		pStr[i] = UART_Receive_Byte();
	}
	pStr[i] = '\0';
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	28 2f       	mov	r18, r24
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	8a 81       	ldd	r24, Y+2	; 0x02
 5b0:	9b 81       	ldd	r25, Y+3	; 0x03
 5b2:	fc 01       	movw	r30, r24
 5b4:	e2 0f       	add	r30, r18
 5b6:	f3 1f       	adc	r31, r19
 5b8:	10 82       	st	Z, r1
}
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	cf 91       	pop	r28
 5c2:	df 91       	pop	r29
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <Func_Rx_Asynch>:

//===============================================================================================

static void Func_Rx_Asynch(void) // the function which will run in the ISR (Asynch Mode) (Background),to Receive String until Default Stop Macro
{
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	df 93       	push	r29
 5d0:	cf 93       	push	r28
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
	static uint8 i = 0;
	Asynch_Receive_pStr[i] = UART_Receive_Byte_inISR();
 5d6:	20 91 bc 00 	lds	r18, 0x00BC
 5da:	30 91 bd 00 	lds	r19, 0x00BD
 5de:	80 91 b5 00 	lds	r24, 0x00B5
 5e2:	88 2f       	mov	r24, r24
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	89 01       	movw	r16, r18
 5e8:	08 0f       	add	r16, r24
 5ea:	19 1f       	adc	r17, r25
 5ec:	0e 94 24 02 	call	0x448	; 0x448 <UART_Receive_Byte_inISR>
 5f0:	f8 01       	movw	r30, r16
 5f2:	80 83       	st	Z, r24
	i++;
 5f4:	80 91 b5 00 	lds	r24, 0x00B5
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 93 b5 00 	sts	0x00B5, r24
}
 5fe:	cf 91       	pop	r28
 600:	df 91       	pop	r29
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	08 95       	ret

00000608 <UART_Receive_String_Asynch>:

void UART_Receive_String_Asynch(uint8 *pStr) // Receive until the Default_Stop Macro
{
 608:	df 93       	push	r29
 60a:	cf 93       	push	r28
 60c:	00 d0       	rcall	.+0      	; 0x60e <UART_Receive_String_Asynch+0x6>
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
 612:	9a 83       	std	Y+2, r25	; 0x02
 614:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Receive_pStr = pStr;
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	9a 81       	ldd	r25, Y+2	; 0x02
 61a:	90 93 bd 00 	sts	0x00BD, r25
 61e:	80 93 bc 00 	sts	0x00BC, r24
	UART_Rx_Interrupt_Enable();
 622:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UART_Rx_Interrupt_Enable>
	UART_Rx_Set_CallBack(Func_Rx_Asynch);
 626:	85 ee       	ldi	r24, 0xE5	; 229
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	0e 94 66 01 	call	0x2cc	; 0x2cc <UART_Rx_Set_CallBack>
}
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	cf 91       	pop	r28
 634:	df 91       	pop	r29
 636:	08 95       	ret

00000638 <main>:
#include "UART_interface.h"
#include "UART_Stack/Stack.h"


void main()
{
 638:	df 93       	push	r29
 63a:	cf 93       	push	r28
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
 640:	ff cf       	rjmp	.-2      	; 0x640 <main+0x8>

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
