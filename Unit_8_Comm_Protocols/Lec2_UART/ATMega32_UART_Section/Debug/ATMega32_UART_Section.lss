
ATMega32_UART_Section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  00002836  000028ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000d4  008000d4  0000293e  2**0
                  ALLOC
  3 .stab         00002598  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a7  00000000  00000000  00004ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000627f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000063bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000652f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009063  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 21 13 	call	0x2642	; 0x2642 <main>
      8a:	0c 94 19 14 	jmp	0x2832	; 0x2832 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PUSH>:
static uint8 STACK[STACK_SIZE];
static uint8 SP = 0;


Stack_Status PUSH(uint8 data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <PUSH+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	8a 83       	std	Y+2, r24	; 0x02
	Stack_Status status;
	if(SP < STACK_SIZE)
     b52:	80 91 d4 00 	lds	r24, 0x00D4
     b56:	8a 30       	cpi	r24, 0x0A	; 10
     b58:	88 f4       	brcc	.+34     	; 0xb7c <PUSH+0x36>
	{
		STACK[SP] = data;
     b5a:	80 91 d4 00 	lds	r24, 0x00D4
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	fc 01       	movw	r30, r24
     b64:	eb 52       	subi	r30, 0x2B	; 43
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	80 83       	st	Z, r24
		SP++;
     b6c:	80 91 d4 00 	lds	r24, 0x00D4
     b70:	8f 5f       	subi	r24, 0xFF	; 255
     b72:	80 93 d4 00 	sts	0x00D4, r24
		status = DONE;
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <PUSH+0x3a>
	}
	else
	{
		status = STACK_FULL;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
     b80:	89 81       	ldd	r24, Y+1	; 0x01
}
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <POP>:


Stack_Status POP(uint8 *pdata)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <POP+0x6>
     b92:	0f 92       	push	r0
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	9b 83       	std	Y+3, r25	; 0x03
     b9a:	8a 83       	std	Y+2, r24	; 0x02
	Stack_Status status;
	if(SP == 0)
     b9c:	80 91 d4 00 	lds	r24, 0x00D4
     ba0:	88 23       	and	r24, r24
     ba2:	11 f4       	brne	.+4      	; 0xba8 <POP+0x1c>
	{
		status = STACK_EMPTY;
     ba4:	19 82       	std	Y+1, r1	; 0x01
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <POP+0x40>
	}
	else
	{
		SP--;
     ba8:	80 91 d4 00 	lds	r24, 0x00D4
     bac:	81 50       	subi	r24, 0x01	; 1
     bae:	80 93 d4 00 	sts	0x00D4, r24
		*pdata = STACK[SP];
     bb2:	80 91 d4 00 	lds	r24, 0x00D4
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	fc 01       	movw	r30, r24
     bbc:	eb 52       	subi	r30, 0x2B	; 43
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	80 81       	ld	r24, Z
     bc2:	ea 81       	ldd	r30, Y+2	; 0x02
     bc4:	fb 81       	ldd	r31, Y+3	; 0x03
     bc6:	80 83       	st	Z, r24
		status = DONE;
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <UART_Init>:
const uint16 BaudRateArray[TOTAL_SPEED_MODE][TOTAL_CPU_F][TOTAL_BAUD_RATE] =
	 {     { {103, 51, 25, 16, 12,  8} , {207,103, 51, 34, 25, 16} , {416,207,103, 68 ,51, 34} } ,
	       { {207,103, 51, 34, 25, 16} , {416,207,103, 68 ,51, 34} , {832,416,207,138,103, 68} } };

void UART_Init(void)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <UART_Init+0x6>
     be0:	0f 92       	push	r0
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	uint8  UCSRC_var=0;
     be6:	1b 82       	std	Y+3, r1	; 0x03
	uint16 UBRR_var=0;
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	19 82       	std	Y+1, r1	; 0x01
	/***************************** Transmission Speed***************************/
	#if (SPEED_MODE == NORMAL_SPEED)
	CLEAR_BIT(UCSRA,U2X);
     bec:	ab e2       	ldi	r26, 0x2B	; 43
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	eb e2       	ldi	r30, 0x2B	; 43
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	8d 7f       	andi	r24, 0xFD	; 253
     bf8:	8c 93       	st	X, r24
	#elif (SPEED_MODE == DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
	#endif

	//******************set URSEL to write data to UCSRC register***************/
	SET_BIT(UCSRC_var,URSEL);
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	8b 83       	std	Y+3, r24	; 0x03

	//********************************Synch/Asynch ***********************************/
	 #if (SYNCH_MODE == SYNCH)
	 SET_BIT(UCSRC_var,UMSEL)
	 #elif (SYNCH_MODE == ASYNCH)
	 CLEAR_BIT(UCSRC_var,UMSEL);
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	8f 7b       	andi	r24, 0xBF	; 191
     c04:	8b 83       	std	Y+3, r24	; 0x03
	 #endif

	 //***************************** Parity Mode *******************************/
	#if (PARITY_MODE == NO_PARITY)
	CLEAR_BIT(UCSRC_var,UPM0);
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	8f 7e       	andi	r24, 0xEF	; 239
     c0a:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRC_var,UPM1);
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	8f 7d       	andi	r24, 0xDF	; 223
     c10:	8b 83       	std	Y+3, r24	; 0x03
	#elif (N_DATA_BITS==_7_DATA_BITS)
	CLEAR_BIT(UCSRC_var,UCSZ0);
	SET_BIT(UCSRC_var,UCSZ1);
	CLEAR_BIT(UCSRB,UCSZ2);
	#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	84 60       	ori	r24, 0x04	; 4
     c1c:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRB,UCSZ2);
     c1e:	aa e2       	ldi	r26, 0x2A	; 42
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	ea e2       	ldi	r30, 0x2A	; 42
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8b 7f       	andi	r24, 0xFB	; 251
     c2a:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSZ2);
	#endif

	//************************Stop bits*******************************/
	#if (N_STOP_BITS==ONE_STOP_BIT)
	CLEAR_BIT(UCSRC_var,USBS);
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	87 7f       	andi	r24, 0xF7	; 247
     c30:	8b 83       	std	Y+3, r24	; 0x03
	#elif (N_STOP_BITS==TWO_STOP_BIT)
	SET_BIT(UCSRC_var,USBS);
	#endif

	//*****************set UCSRC value   *******************************/
	UCSRC=UCSRC_var;
     c32:	e0 e4       	ldi	r30, 0x40	; 64
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	80 83       	st	Z, r24

	//************************Baud rate *******************************/
	UBRR_var=BaudRateArray[SPEED_MODE][CPU_F][BAUD_RATE];
     c3a:	80 91 9b 00 	lds	r24, 0x009B
     c3e:	90 91 9c 00 	lds	r25, 0x009C
     c42:	9a 83       	std	Y+2, r25	; 0x02
     c44:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (uint8)(UBRR_var>>8);
     c46:	e0 e4       	ldi	r30, 0x40	; 64
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	89 2f       	mov	r24, r25
     c50:	99 27       	eor	r25, r25
     c52:	80 83       	st	Z, r24
	UBRRL = (uint8)UBRR_var;
     c54:	e9 e2       	ldi	r30, 0x29	; 41
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	80 83       	st	Z, r24

	//************************ Enable Tx/Rx *******************************/
	//enable UART  receiver.
	SET_BIT(UCSRB,RXEN);
     c5c:	aa e2       	ldi	r26, 0x2A	; 42
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	ea e2       	ldi	r30, 0x2A	; 42
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	80 61       	ori	r24, 0x10	; 16
     c68:	8c 93       	st	X, r24
	//enable UART  transmitter .
	SET_BIT(UCSRB,TXEN);
     c6a:	aa e2       	ldi	r26, 0x2A	; 42
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	ea e2       	ldi	r30, 0x2A	; 42
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	88 60       	ori	r24, 0x08	; 8
     c76:	8c 93       	st	X, r24
}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <UART_Send_Byte>:


/******* Polling Mechanism *******/
void UART_Send_Byte(uint8 data)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	0f 92       	push	r0
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,UDRE)));
     c90:	eb e2       	ldi	r30, 0x2B	; 43
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	82 95       	swap	r24
     c98:	86 95       	lsr	r24
     c9a:	87 70       	andi	r24, 0x07	; 7
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	81 70       	andi	r24, 0x01	; 1
     ca2:	90 70       	andi	r25, 0x00	; 0
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	a1 f3       	breq	.-24     	; 0xc90 <UART_Send_Byte+0xc>
	UDR = data;
     ca8:	ec e2       	ldi	r30, 0x2C	; 44
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	80 83       	st	Z, r24
}
     cb0:	0f 90       	pop	r0
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <UART_Receive_Byte>:

uint8 UART_Receive_Byte(void)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,RXC)));
     cc0:	eb e2       	ldi	r30, 0x2B	; 43
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	88 23       	and	r24, r24
     cc8:	dc f7       	brge	.-10     	; 0xcc0 <UART_Receive_Byte+0x8>
	return UDR;
     cca:	ec e2       	ldi	r30, 0x2C	; 44
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <UART_Send_Byte_NoBlock>:


/******* Periodic Check (No Block) *******/
// the aim of these functions to not block or delaying the main function
uint8 UART_Send_Byte_NoBlock(uint8 *pdata)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <UART_Send_Byte_NoBlock+0x6>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9b 83       	std	Y+3, r25	; 0x03
     ce4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status;
	if(GET_BIT(UCSRA,UDRE))
     ce6:	eb e2       	ldi	r30, 0x2B	; 43
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	82 95       	swap	r24
     cee:	86 95       	lsr	r24
     cf0:	87 70       	andi	r24, 0x07	; 7
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	81 70       	andi	r24, 0x01	; 1
     cf8:	90 70       	andi	r25, 0x00	; 0
     cfa:	88 23       	and	r24, r24
     cfc:	49 f0       	breq	.+18     	; 0xd10 <UART_Send_Byte_NoBlock+0x3a>
	{
		UDR = *pdata;
     cfe:	ac e2       	ldi	r26, 0x2C	; 44
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea 81       	ldd	r30, Y+2	; 0x02
     d04:	fb 81       	ldd	r31, Y+3	; 0x03
     d06:	80 81       	ld	r24, Z
     d08:	8c 93       	st	X, r24
		status = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <UART_Send_Byte_NoBlock+0x3c>
	}
	else
	{
		status = 0;
     d10:	19 82       	std	Y+1, r1	; 0x01
	}

	return status;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <UART_Receive_Byte_NoBlock>:

uint8 UART_Receive_Byte_NoBlock(uint8 *pdata)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <UART_Receive_Byte_NoBlock+0x6>
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	9b 83       	std	Y+3, r25	; 0x03
     d2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status;
	if(GET_BIT(UCSRA,RXC))
     d30:	eb e2       	ldi	r30, 0x2B	; 43
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 23       	and	r24, r24
     d38:	4c f4       	brge	.+18     	; 0xd4c <UART_Receive_Byte_NoBlock+0x2c>
	{
		*pdata = UDR;
     d3a:	ec e2       	ldi	r30, 0x2C	; 44
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	ea 81       	ldd	r30, Y+2	; 0x02
     d42:	fb 81       	ldd	r31, Y+3	; 0x03
     d44:	80 83       	st	Z, r24
		status = 1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <UART_Receive_Byte_NoBlock+0x2e>
	}
	else
	{
		status = 0;
     d4c:	19 82       	std	Y+1, r1	; 0x01
	}

	return status;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <UART_Tx_Set_CallBack>:

/******* CallBack Functions *******/
void UART_Tx_Set_CallBack(void (*LocalFptr)(void))
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <UART_Tx_Set_CallBack+0x6>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	9a 83       	std	Y+2, r25	; 0x02
     d68:	89 83       	std	Y+1, r24	; 0x01
	UART_Tx_Fptr = LocalFptr;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	90 93 e2 00 	sts	0x00E2, r25
     d72:	80 93 e1 00 	sts	0x00E1, r24
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <UART_Rx_Set_CallBack>:
void UART_Rx_Set_CallBack(void (*LocalFptr)(void))
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <UART_Rx_Set_CallBack+0x6>
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
	UART_Rx_Fptr = LocalFptr;
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	90 93 e4 00 	sts	0x00E4, r25
     d96:	80 93 e3 00 	sts	0x00E3, r24
}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <__vector_15>:

ISR(USART_TXC_vect)
{
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	2f 93       	push	r18
     db0:	3f 93       	push	r19
     db2:	4f 93       	push	r20
     db4:	5f 93       	push	r21
     db6:	6f 93       	push	r22
     db8:	7f 93       	push	r23
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	af 93       	push	r26
     dc0:	bf 93       	push	r27
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	if(UART_Tx_Fptr != NULLPTR)
     dce:	80 91 e1 00 	lds	r24, 0x00E1
     dd2:	90 91 e2 00 	lds	r25, 0x00E2
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	29 f0       	breq	.+10     	; 0xde4 <__vector_15+0x40>
	{
		UART_Tx_Fptr();
     dda:	e0 91 e1 00 	lds	r30, 0x00E1
     dde:	f0 91 e2 00 	lds	r31, 0x00E2
     de2:	09 95       	icall
	}
}
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_13>:
ISR(USART_RXC_vect)
{
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	if(UART_Rx_Fptr != NULLPTR)
     e34:	80 91 e3 00 	lds	r24, 0x00E3
     e38:	90 91 e4 00 	lds	r25, 0x00E4
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	29 f0       	breq	.+10     	; 0xe4a <__vector_13+0x40>
	{
		UART_Rx_Fptr();
     e40:	e0 91 e3 00 	lds	r30, 0x00E3
     e44:	f0 91 e4 00 	lds	r31, 0x00E4
     e48:	09 95       	icall
	}
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	ff 91       	pop	r31
     e50:	ef 91       	pop	r30
     e52:	bf 91       	pop	r27
     e54:	af 91       	pop	r26
     e56:	9f 91       	pop	r25
     e58:	8f 91       	pop	r24
     e5a:	7f 91       	pop	r23
     e5c:	6f 91       	pop	r22
     e5e:	5f 91       	pop	r21
     e60:	4f 91       	pop	r20
     e62:	3f 91       	pop	r19
     e64:	2f 91       	pop	r18
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f 90       	pop	r0
     e6c:	1f 90       	pop	r1
     e6e:	18 95       	reti

00000e70 <UART_Tx_Interrupt_Enable>:



/******* Tx/Rx Interrupt Enable *******/
void UART_Tx_Interrupt_Enable(void)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
     e78:	aa e2       	ldi	r26, 0x2A	; 42
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ea e2       	ldi	r30, 0x2A	; 42
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 64       	ori	r24, 0x40	; 64
     e84:	8c 93       	st	X, r24
}
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <UART_Rx_Interrupt_Enable>:
void UART_Rx_Interrupt_Enable(void)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
     e94:	aa e2       	ldi	r26, 0x2A	; 42
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ea e2       	ldi	r30, 0x2A	; 42
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	8c 93       	st	X, r24
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <UART_Tx_Interrupt_Disable>:


/******* Tx/Rx Interrupt Disable *******/
void UART_Tx_Interrupt_Disable(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
     eb0:	aa e2       	ldi	r26, 0x2A	; 42
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ea e2       	ldi	r30, 0x2A	; 42
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7b       	andi	r24, 0xBF	; 191
     ebc:	8c 93       	st	X, r24
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <UART_Rx_Interrupt_Disable>:
void UART_Rx_Interrupt_Disable(void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE);
     ecc:	aa e2       	ldi	r26, 0x2A	; 42
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ea e2       	ldi	r30, 0x2A	; 42
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8f 77       	andi	r24, 0x7F	; 127
     ed8:	8c 93       	st	X, r24
}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <UART_Send_Byte_inISR>:


void UART_Send_Byte_inISR(uint8 data)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     eec:	ec e2       	ldi	r30, 0x2C	; 44
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	80 83       	st	Z, r24
}
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <UART_Receive_Byte_inISR>:

uint8 UART_Receive_Byte_inISR(void)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     f04:	ec e2       	ldi	r30, 0x2C	; 44
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <UART_Send_String>:


//===============================================================================================

void UART_Send_String(uint8 *pStr) // Polling Mechanism
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <UART_Send_String+0x6>
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9b 83       	std	Y+3, r25	; 0x03
     f1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f20:	19 82       	std	Y+1, r1	; 0x01
     f22:	0e c0       	rjmp	.+28     	; 0xf40 <UART_Send_String+0x30>
	while(pStr[i] != '\0')
	{
		UART_Send_Byte(pStr[i]);
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	fc 01       	movw	r30, r24
     f30:	e2 0f       	add	r30, r18
     f32:	f3 1f       	adc	r31, r19
     f34:	80 81       	ld	r24, Z
     f36:	0e 94 42 06 	call	0xc84	; 0xc84 <UART_Send_Byte>
		i++;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	89 83       	std	Y+1, r24	; 0x01
//===============================================================================================

void UART_Send_String(uint8 *pStr) // Polling Mechanism
{
	uint8 i = 0;
	while(pStr[i] != '\0')
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	fc 01       	movw	r30, r24
     f4c:	e2 0f       	add	r30, r18
     f4e:	f3 1f       	adc	r31, r19
     f50:	80 81       	ld	r24, Z
     f52:	88 23       	and	r24, r24
     f54:	39 f7       	brne	.-50     	; 0xf24 <UART_Send_String+0x14>
	{
		UART_Send_Byte(pStr[i]);
		i++;
	}
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <Func_Tx_Asynch>:

//===============================================================================================

static void Func_Tx_Asynch(void) // the function which will run in the ISR (Asynch Mode) (Background) , to send the rest of string
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	static uint8 i = 1;
	if(Asynch_Send_pStr[i] != '\0')
     f6a:	20 91 e5 00 	lds	r18, 0x00E5
     f6e:	30 91 e6 00 	lds	r19, 0x00E6
     f72:	80 91 8a 00 	lds	r24, 0x008A
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	f9 01       	movw	r30, r18
     f7c:	e8 0f       	add	r30, r24
     f7e:	f9 1f       	adc	r31, r25
     f80:	80 81       	ld	r24, Z
     f82:	88 23       	and	r24, r24
     f84:	a1 f0       	breq	.+40     	; 0xfae <Func_Tx_Asynch+0x4c>
	{
		UART_Send_Byte_inISR(Asynch_Send_pStr[i]);
     f86:	20 91 e5 00 	lds	r18, 0x00E5
     f8a:	30 91 e6 00 	lds	r19, 0x00E6
     f8e:	80 91 8a 00 	lds	r24, 0x008A
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	f9 01       	movw	r30, r18
     f98:	e8 0f       	add	r30, r24
     f9a:	f9 1f       	adc	r31, r25
     f9c:	80 81       	ld	r24, Z
     f9e:	0e 94 70 07 	call	0xee0	; 0xee0 <UART_Send_Byte_inISR>
		i++;
     fa2:	80 91 8a 00 	lds	r24, 0x008A
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	80 93 8a 00 	sts	0x008A, r24
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <Func_Tx_Asynch+0x56>
	}
	else
	{
		i = 1; // to be able to send string again
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	80 93 8a 00 	sts	0x008A, r24
		UART_Tx_Interrupt_Disable();
     fb4:	0e 94 54 07 	call	0xea8	; 0xea8 <UART_Tx_Interrupt_Disable>
	}
}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <UART_Send_String_Asynch>:
void UART_Send_String_Asynch(uint8 *pStr)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <UART_Send_String_Asynch+0x6>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
	UART_Send_Byte(pStr[0]);
     fcc:	e9 81       	ldd	r30, Y+1	; 0x01
     fce:	fa 81       	ldd	r31, Y+2	; 0x02
     fd0:	80 81       	ld	r24, Z
     fd2:	0e 94 42 06 	call	0xc84	; 0xc84 <UART_Send_Byte>
	UART_Tx_Interrupt_Enable();
     fd6:	0e 94 38 07 	call	0xe70	; 0xe70 <UART_Tx_Interrupt_Enable>
	UART_Tx_Set_CallBack(Func_Tx_Asynch);
     fda:	81 eb       	ldi	r24, 0xB1	; 177
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	0e 94 ae 06 	call	0xd5c	; 0xd5c <UART_Tx_Set_CallBack>

	Asynch_Send_pStr = pStr;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	90 93 e6 00 	sts	0x00E6, r25
     fea:	80 93 e5 00 	sts	0x00E5, r24
	// the Asynch_Send_pStr will send the rest of string in the Background (using interrupt) without delaying the main
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <UART_Receive_String>:

//===============================================================================================


void UART_Receive_String(uint8 *pStr) // Polling Mechanism (Receive until the Default_Stop Macro)
{
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <UART_Receive_String+0xa>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	9b 83       	std	Y+3, r25	; 0x03
    100a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    100c:	19 82       	std	Y+1, r1	; 0x01
	pStr[i] = UART_Receive_Byte();
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	8c 01       	movw	r16, r24
    101a:	02 0f       	add	r16, r18
    101c:	13 1f       	adc	r17, r19
    101e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <UART_Receive_Byte>
    1022:	f8 01       	movw	r30, r16
    1024:	80 83       	st	Z, r24
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <UART_Receive_String+0x4e>
	while(pStr[i] != Default_Stop)
	{
		i++;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	8f 5f       	subi	r24, 0xFF	; 255
    102c:	89 83       	std	Y+1, r24	; 0x01
		pStr[i] = UART_Receive_Byte();
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	9b 81       	ldd	r25, Y+3	; 0x03
    1038:	8c 01       	movw	r16, r24
    103a:	02 0f       	add	r16, r18
    103c:	13 1f       	adc	r17, r19
    103e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <UART_Receive_Byte>
    1042:	f8 01       	movw	r30, r16
    1044:	80 83       	st	Z, r24

void UART_Receive_String(uint8 *pStr) // Polling Mechanism (Receive until the Default_Stop Macro)
{
	uint8 i = 0;
	pStr[i] = UART_Receive_Byte();
	while(pStr[i] != Default_Stop)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	fc 01       	movw	r30, r24
    1052:	e2 0f       	add	r30, r18
    1054:	f3 1f       	adc	r31, r19
    1056:	80 81       	ld	r24, Z
    1058:	8d 30       	cpi	r24, 0x0D	; 13
    105a:	31 f7       	brne	.-52     	; 0x1028 <UART_Receive_String+0x30>
	{
		i++;
		pStr[i] = UART_Receive_Byte();
	}
	pStr[i] = '\0';
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	fc 01       	movw	r30, r24
    1068:	e2 0f       	add	r30, r18
    106a:	f3 1f       	adc	r31, r19
    106c:	10 82       	st	Z, r1
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <UART_GET_Def_Stop_Flag>:
//===============================================================================================

volatile uint8 Default_Stop_Flag = 0; // this Flag can be accessed by the User by the Getter Function

uint8 UART_GET_Def_Stop_Flag(void) // Getter Function returns the Def_Stop_Flag (Used in the Asynch Receiving_String_API)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
	return Default_Stop_Flag;
    1086:	80 91 df 00 	lds	r24, 0x00DF
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <Func_Rx_Asynch>:

// this function which will run in the ISR (Asynch Mode) (Background),to Receive String until Default Stop Macro
static void Func_Rx_Asynch(void)
{
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	static uint8 i = 0;
	Asynch_Receive_pStr[i] = UART_Receive_Byte_inISR();
    109c:	20 91 e7 00 	lds	r18, 0x00E7
    10a0:	30 91 e8 00 	lds	r19, 0x00E8
    10a4:	80 91 e0 00 	lds	r24, 0x00E0
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	89 01       	movw	r16, r18
    10ae:	08 0f       	add	r16, r24
    10b0:	19 1f       	adc	r17, r25
    10b2:	0e 94 7e 07 	call	0xefc	; 0xefc <UART_Receive_Byte_inISR>
    10b6:	f8 01       	movw	r30, r16
    10b8:	80 83       	st	Z, r24
	if(Asynch_Receive_pStr[i] == Default_Stop)
    10ba:	20 91 e7 00 	lds	r18, 0x00E7
    10be:	30 91 e8 00 	lds	r19, 0x00E8
    10c2:	80 91 e0 00 	lds	r24, 0x00E0
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	f9 01       	movw	r30, r18
    10cc:	e8 0f       	add	r30, r24
    10ce:	f9 1f       	adc	r31, r25
    10d0:	80 81       	ld	r24, Z
    10d2:	8d 30       	cpi	r24, 0x0D	; 13
    10d4:	19 f4       	brne	.+6      	; 0x10dc <Func_Rx_Asynch+0x4c>
	{
		Default_Stop_Flag = 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	80 93 df 00 	sts	0x00DF, r24
	}
	i++;
    10dc:	80 91 e0 00 	lds	r24, 0x00E0
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 e0 00 	sts	0x00E0, r24
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <UART_Receive_String_Asynch>:

void UART_Receive_String_Asynch(uint8 *pStr) // Receive until the Default_Stop Macro
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <UART_Receive_String_Asynch+0x6>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Receive_pStr = pStr;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	90 93 e8 00 	sts	0x00E8, r25
    1106:	80 93 e7 00 	sts	0x00E7, r24
	UART_Rx_Interrupt_Enable();
    110a:	0e 94 46 07 	call	0xe8c	; 0xe8c <UART_Rx_Interrupt_Enable>
	UART_Rx_Set_CallBack(Func_Rx_Asynch);
    110e:	88 e4       	ldi	r24, 0x48	; 72
    1110:	98 e0       	ldi	r25, 0x08	; 8
    1112:	0e 94 c0 06 	call	0xd80	; 0xd80 <UART_Rx_Set_CallBack>
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <DIO_uint8SetDirectionPIN>:

#include "DIO_INTERFACE.h"


void DIO_uint8SetDirectionPIN(PORT_NAME Copy_Port,PIN_NAME Copy_Pin,PIN_DIR Copy_Dir)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	28 97       	sbiw	r28, 0x08	; 8
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	8a 83       	std	Y+2, r24	; 0x02
    1136:	6b 83       	std	Y+3, r22	; 0x03
    1138:	4c 83       	std	Y+4, r20	; 0x04
	uint8 DIO_L_ErrorCode;
	if (Copy_Pin>=0 && Copy_Pin<=7)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 30       	cpi	r24, 0x08	; 8
    113e:	08 f0       	brcs	.+2      	; 0x1142 <DIO_uint8SetDirectionPIN+0x22>
    1140:	f4 c0       	rjmp	.+488    	; 0x132a <DIO_uint8SetDirectionPIN+0x20a>
	{
		if (Copy_Dir==PIN_OUTPUT)
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	09 f0       	breq	.+2      	; 0x114a <DIO_uint8SetDirectionPIN+0x2a>
    1148:	72 c0       	rjmp	.+228    	; 0x122e <DIO_uint8SetDirectionPIN+0x10e>
			{
				switch(Copy_Port)
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	38 87       	std	Y+8, r19	; 0x08
    1152:	2f 83       	std	Y+7, r18	; 0x07
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	98 85       	ldd	r25, Y+8	; 0x08
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	91 05       	cpc	r25, r1
    115c:	49 f1       	breq	.+82     	; 0x11b0 <DIO_uint8SetDirectionPIN+0x90>
    115e:	2f 81       	ldd	r18, Y+7	; 0x07
    1160:	38 85       	ldd	r19, Y+8	; 0x08
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	2c f4       	brge	.+10     	; 0x1172 <DIO_uint8SetDirectionPIN+0x52>
    1168:	8f 81       	ldd	r24, Y+7	; 0x07
    116a:	98 85       	ldd	r25, Y+8	; 0x08
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	61 f0       	breq	.+24     	; 0x1188 <DIO_uint8SetDirectionPIN+0x68>
    1170:	5b c0       	rjmp	.+182    	; 0x1228 <DIO_uint8SetDirectionPIN+0x108>
    1172:	2f 81       	ldd	r18, Y+7	; 0x07
    1174:	38 85       	ldd	r19, Y+8	; 0x08
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	71 f1       	breq	.+92     	; 0x11d8 <DIO_uint8SetDirectionPIN+0xb8>
    117c:	8f 81       	ldd	r24, Y+7	; 0x07
    117e:	98 85       	ldd	r25, Y+8	; 0x08
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	91 05       	cpc	r25, r1
    1184:	e9 f1       	breq	.+122    	; 0x1200 <DIO_uint8SetDirectionPIN+0xe0>
    1186:	50 c0       	rjmp	.+160    	; 0x1228 <DIO_uint8SetDirectionPIN+0x108>
				{
					case PORT_A: SET_BIT(DDRA,Copy_Pin);break;
    1188:	aa e3       	ldi	r26, 0x3A	; 58
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ea e3       	ldi	r30, 0x3A	; 58
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_uint8SetDirectionPIN+0x86>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_uint8SetDirectionPIN+0x82>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	bf c0       	rjmp	.+382    	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_B: SET_BIT(DDRB,Copy_Pin);break;
    11b0:	a7 e3       	ldi	r26, 0x37	; 55
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e7 e3       	ldi	r30, 0x37	; 55
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_uint8SetDirectionPIN+0xae>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_uint8SetDirectionPIN+0xaa>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	ab c0       	rjmp	.+342    	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_C: SET_BIT(DDRC,Copy_Pin);break;
    11d8:	a4 e3       	ldi	r26, 0x34	; 52
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e4 e3       	ldi	r30, 0x34	; 52
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_uint8SetDirectionPIN+0xd6>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_uint8SetDirectionPIN+0xd2>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	97 c0       	rjmp	.+302    	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_D: SET_BIT(DDRD,Copy_Pin);break;
    1200:	a1 e3       	ldi	r26, 0x31	; 49
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e1 e3       	ldi	r30, 0x31	; 49
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_uint8SetDirectionPIN+0xfe>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_uint8SetDirectionPIN+0xfa>
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	83 c0       	rjmp	.+262    	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	80 c0       	rjmp	.+256    	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
				}
			}
		else if (Copy_Dir==PIN_INPUT)
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	88 23       	and	r24, r24
    1232:	09 f0       	breq	.+2      	; 0x1236 <DIO_uint8SetDirectionPIN+0x116>
    1234:	77 c0       	rjmp	.+238    	; 0x1324 <DIO_uint8SetDirectionPIN+0x204>
			{
				switch(Copy_Port)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	2d 83       	std	Y+5, r18	; 0x05
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	59 f1       	breq	.+86     	; 0x12a0 <DIO_uint8SetDirectionPIN+0x180>
    124a:	2d 81       	ldd	r18, Y+5	; 0x05
    124c:	3e 81       	ldd	r19, Y+6	; 0x06
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	2c f4       	brge	.+10     	; 0x125e <DIO_uint8SetDirectionPIN+0x13e>
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	9e 81       	ldd	r25, Y+6	; 0x06
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	69 f0       	breq	.+26     	; 0x1276 <DIO_uint8SetDirectionPIN+0x156>
    125c:	60 c0       	rjmp	.+192    	; 0x131e <DIO_uint8SetDirectionPIN+0x1fe>
    125e:	2d 81       	ldd	r18, Y+5	; 0x05
    1260:	3e 81       	ldd	r19, Y+6	; 0x06
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	89 f1       	breq	.+98     	; 0x12ca <DIO_uint8SetDirectionPIN+0x1aa>
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	91 05       	cpc	r25, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <DIO_uint8SetDirectionPIN+0x154>
    1272:	40 c0       	rjmp	.+128    	; 0x12f4 <DIO_uint8SetDirectionPIN+0x1d4>
    1274:	54 c0       	rjmp	.+168    	; 0x131e <DIO_uint8SetDirectionPIN+0x1fe>
				{
					case PORT_A: CLEAR_BIT(DDRA,Copy_Pin);break;
    1276:	aa e3       	ldi	r26, 0x3A	; 58
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	ea e3       	ldi	r30, 0x3A	; 58
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_uint8SetDirectionPIN+0x174>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_uint8SetDirectionPIN+0x170>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	47 c0       	rjmp	.+142    	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_B: CLEAR_BIT(DDRB,Copy_Pin);break;
    12a0:	a7 e3       	ldi	r26, 0x37	; 55
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e7 e3       	ldi	r30, 0x37	; 55
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_uint8SetDirectionPIN+0x19e>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_uint8SetDirectionPIN+0x19a>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	32 c0       	rjmp	.+100    	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_C: CLEAR_BIT(DDRC,Copy_Pin);break;
    12ca:	a4 e3       	ldi	r26, 0x34	; 52
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e4 e3       	ldi	r30, 0x34	; 52
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_uint8SetDirectionPIN+0x1c8>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_uint8SetDirectionPIN+0x1c4>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	1d c0       	rjmp	.+58     	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
					case PORT_D: CLEAR_BIT(DDRD,Copy_Pin);break;
    12f4:	a1 e3       	ldi	r26, 0x31	; 49
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e1 e3       	ldi	r30, 0x31	; 49
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_uint8SetDirectionPIN+0x1f2>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_uint8SetDirectionPIN+0x1ee>
    1316:	80 95       	com	r24
    1318:	84 23       	and	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	08 c0       	rjmp	.+16     	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	05 c0       	rjmp	.+10     	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
				}
			}
		else
			DIO_L_ErrorCode=1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_uint8SetDirectionPIN+0x20e>
	}
	else
	{
		DIO_L_ErrorCode=1;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
	}
}
    132e:	28 96       	adiw	r28, 0x08	; 8
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <DIO_uint8SetDirectionPort>:

/*----------------------------------------------------------------------------------*/

void DIO_uint8SetDirectionPort(PORT_NAME Copy_Port,PORT_DIR Copy_Dir)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	27 97       	sbiw	r28, 0x07	; 7
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	6b 83       	std	Y+3, r22	; 0x03
		uint8 DIO_L_ErrorCode;
		if (Copy_Dir==PORT_OUTPUT)
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	8f 3f       	cpi	r24, 0xFF	; 255
    135c:	b1 f5       	brne	.+108    	; 0x13ca <DIO_uint8SetDirectionPort+0x8a>
			{
				switch(Copy_Port)
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3f 83       	std	Y+7, r19	; 0x07
    1366:	2e 83       	std	Y+6, r18	; 0x06
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	d1 f0       	breq	.+52     	; 0x13a6 <DIO_uint8SetDirectionPort+0x66>
    1372:	2e 81       	ldd	r18, Y+6	; 0x06
    1374:	3f 81       	ldd	r19, Y+7	; 0x07
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	2c f4       	brge	.+10     	; 0x1386 <DIO_uint8SetDirectionPort+0x46>
    137c:	8e 81       	ldd	r24, Y+6	; 0x06
    137e:	9f 81       	ldd	r25, Y+7	; 0x07
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	61 f0       	breq	.+24     	; 0x139c <DIO_uint8SetDirectionPort+0x5c>
    1384:	1f c0       	rjmp	.+62     	; 0x13c4 <DIO_uint8SetDirectionPort+0x84>
    1386:	2e 81       	ldd	r18, Y+6	; 0x06
    1388:	3f 81       	ldd	r19, Y+7	; 0x07
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	81 f0       	breq	.+32     	; 0x13b0 <DIO_uint8SetDirectionPort+0x70>
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <DIO_uint8SetDirectionPort+0x7a>
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <DIO_uint8SetDirectionPort+0x84>
				{
					case PORT_A:DDRA=PORT_OUTPUT;break;
    139c:	ea e3       	ldi	r30, 0x3A	; 58
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	80 83       	st	Z, r24
    13a4:	49 c0       	rjmp	.+146    	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_B:DDRB=PORT_OUTPUT;break;
    13a6:	e7 e3       	ldi	r30, 0x37	; 55
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	80 83       	st	Z, r24
    13ae:	44 c0       	rjmp	.+136    	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_C:DDRC=PORT_OUTPUT;break;
    13b0:	e4 e3       	ldi	r30, 0x34	; 52
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	80 83       	st	Z, r24
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_D:DDRD=PORT_OUTPUT;break;
    13ba:	e1 e3       	ldi	r30, 0x31	; 49
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
    13c2:	3a c0       	rjmp	.+116    	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
					default: DIO_L_ErrorCode=1;break;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	37 c0       	rjmp	.+110    	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
				}
			}
		else if (Copy_Dir==PORT_INPUT)
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 23       	and	r24, r24
    13ce:	91 f5       	brne	.+100    	; 0x1434 <DIO_uint8SetDirectionPort+0xf4>
			{
				switch(Copy_Port)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	c9 f0       	breq	.+50     	; 0x1416 <DIO_uint8SetDirectionPort+0xd6>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <DIO_uint8SetDirectionPort+0xb8>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	61 f0       	breq	.+24     	; 0x140e <DIO_uint8SetDirectionPort+0xce>
    13f6:	1b c0       	rjmp	.+54     	; 0x142e <DIO_uint8SetDirectionPort+0xee>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	71 f0       	breq	.+28     	; 0x141e <DIO_uint8SetDirectionPort+0xde>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	69 f0       	breq	.+26     	; 0x1426 <DIO_uint8SetDirectionPort+0xe6>
    140c:	10 c0       	rjmp	.+32     	; 0x142e <DIO_uint8SetDirectionPort+0xee>
				{
					case PORT_A: DDRA=PORT_INPUT;break;
    140e:	ea e3       	ldi	r30, 0x3A	; 58
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
    1414:	11 c0       	rjmp	.+34     	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_B: DDRB=PORT_INPUT;break;
    1416:	e7 e3       	ldi	r30, 0x37	; 55
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	10 82       	st	Z, r1
    141c:	0d c0       	rjmp	.+26     	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_C: DDRC=PORT_INPUT;break;
    141e:	e4 e3       	ldi	r30, 0x34	; 52
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	10 82       	st	Z, r1
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
					case PORT_D: DDRD=PORT_INPUT;break;
    1426:	e1 e3       	ldi	r30, 0x31	; 49
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	10 82       	st	Z, r1
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
					default: DIO_L_ErrorCode=1;break;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_uint8SetDirectionPort+0xf8>
				}
			}
		else
			DIO_L_ErrorCode=1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
	}
    1438:	27 96       	adiw	r28, 0x07	; 7
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <DIO_uint8SetValuePIN>:


/*---------------------------------------------------------------------------------------------*/

void DIO_uint8SetValuePIN(PORT_NAME Copy_Port,PIN_NAME Copy_Pin,PIN_VALUE Copy_Value)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	28 97       	sbiw	r28, 0x08	; 8
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	8a 83       	std	Y+2, r24	; 0x02
    1460:	6b 83       	std	Y+3, r22	; 0x03
    1462:	4c 83       	std	Y+4, r20	; 0x04
	uint8 DIO_L_ErrorCode;
	if (Copy_Pin>=0 && Copy_Pin<=7)
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 30       	cpi	r24, 0x08	; 8
    1468:	08 f0       	brcs	.+2      	; 0x146c <DIO_uint8SetValuePIN+0x22>
    146a:	f4 c0       	rjmp	.+488    	; 0x1654 <DIO_uint8SetValuePIN+0x20a>
	{
		if (Copy_Value==PIN_HIGH)
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	09 f0       	breq	.+2      	; 0x1474 <DIO_uint8SetValuePIN+0x2a>
    1472:	72 c0       	rjmp	.+228    	; 0x1558 <DIO_uint8SetValuePIN+0x10e>
			{
				switch(Copy_Port)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	38 87       	std	Y+8, r19	; 0x08
    147c:	2f 83       	std	Y+7, r18	; 0x07
    147e:	8f 81       	ldd	r24, Y+7	; 0x07
    1480:	98 85       	ldd	r25, Y+8	; 0x08
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	49 f1       	breq	.+82     	; 0x14da <DIO_uint8SetValuePIN+0x90>
    1488:	2f 81       	ldd	r18, Y+7	; 0x07
    148a:	38 85       	ldd	r19, Y+8	; 0x08
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <DIO_uint8SetValuePIN+0x52>
    1492:	8f 81       	ldd	r24, Y+7	; 0x07
    1494:	98 85       	ldd	r25, Y+8	; 0x08
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	61 f0       	breq	.+24     	; 0x14b2 <DIO_uint8SetValuePIN+0x68>
    149a:	5b c0       	rjmp	.+182    	; 0x1552 <DIO_uint8SetValuePIN+0x108>
    149c:	2f 81       	ldd	r18, Y+7	; 0x07
    149e:	38 85       	ldd	r19, Y+8	; 0x08
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	71 f1       	breq	.+92     	; 0x1502 <DIO_uint8SetValuePIN+0xb8>
    14a6:	8f 81       	ldd	r24, Y+7	; 0x07
    14a8:	98 85       	ldd	r25, Y+8	; 0x08
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	e9 f1       	breq	.+122    	; 0x152a <DIO_uint8SetValuePIN+0xe0>
    14b0:	50 c0       	rjmp	.+160    	; 0x1552 <DIO_uint8SetValuePIN+0x108>
				{
					case PORT_A: SET_BIT(PORTA,Copy_Pin);break;
    14b2:	ab e3       	ldi	r26, 0x3B	; 59
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	eb e3       	ldi	r30, 0x3B	; 59
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_uint8SetValuePIN+0x86>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_uint8SetValuePIN+0x82>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	bf c0       	rjmp	.+382    	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
					case PORT_B: SET_BIT(PORTB,Copy_Pin);break;
    14da:	a8 e3       	ldi	r26, 0x38	; 56
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e8 e3       	ldi	r30, 0x38	; 56
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_uint8SetValuePIN+0xae>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_uint8SetValuePIN+0xaa>
    14fc:	84 2b       	or	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	ab c0       	rjmp	.+342    	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
					case PORT_C: SET_BIT(PORTC,Copy_Pin);break;
    1502:	a5 e3       	ldi	r26, 0x35	; 53
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e3       	ldi	r30, 0x35	; 53
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_uint8SetValuePIN+0xd6>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_uint8SetValuePIN+0xd2>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	97 c0       	rjmp	.+302    	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
					case PORT_D: SET_BIT(PORTD,Copy_Pin);break;
    152a:	a2 e3       	ldi	r26, 0x32	; 50
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e2 e3       	ldi	r30, 0x32	; 50
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_uint8SetValuePIN+0xfe>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_uint8SetValuePIN+0xfa>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	83 c0       	rjmp	.+262    	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	80 c0       	rjmp	.+256    	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
				}
			}
		else if (Copy_Value==PIN_LOW)
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	88 23       	and	r24, r24
    155c:	09 f0       	breq	.+2      	; 0x1560 <DIO_uint8SetValuePIN+0x116>
    155e:	77 c0       	rjmp	.+238    	; 0x164e <DIO_uint8SetValuePIN+0x204>
			{
				switch(Copy_Port)
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	3e 83       	std	Y+6, r19	; 0x06
    1568:	2d 83       	std	Y+5, r18	; 0x05
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	91 05       	cpc	r25, r1
    1572:	59 f1       	breq	.+86     	; 0x15ca <DIO_uint8SetValuePIN+0x180>
    1574:	2d 81       	ldd	r18, Y+5	; 0x05
    1576:	3e 81       	ldd	r19, Y+6	; 0x06
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	2c f4       	brge	.+10     	; 0x1588 <DIO_uint8SetValuePIN+0x13e>
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	69 f0       	breq	.+26     	; 0x15a0 <DIO_uint8SetValuePIN+0x156>
    1586:	60 c0       	rjmp	.+192    	; 0x1648 <DIO_uint8SetValuePIN+0x1fe>
    1588:	2d 81       	ldd	r18, Y+5	; 0x05
    158a:	3e 81       	ldd	r19, Y+6	; 0x06
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	89 f1       	breq	.+98     	; 0x15f4 <DIO_uint8SetValuePIN+0x1aa>
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	91 05       	cpc	r25, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <DIO_uint8SetValuePIN+0x154>
    159c:	40 c0       	rjmp	.+128    	; 0x161e <DIO_uint8SetValuePIN+0x1d4>
    159e:	54 c0       	rjmp	.+168    	; 0x1648 <DIO_uint8SetValuePIN+0x1fe>
				{
					case PORT_A: CLEAR_BIT(PORTA,Copy_Pin);break;
    15a0:	ab e3       	ldi	r26, 0x3B	; 59
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	eb e3       	ldi	r30, 0x3B	; 59
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_uint8SetValuePIN+0x174>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_uint8SetValuePIN+0x170>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	47 c0       	rjmp	.+142    	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
					case PORT_B: CLEAR_BIT(PORTB,Copy_Pin);break;
    15ca:	a8 e3       	ldi	r26, 0x38	; 56
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e8 e3       	ldi	r30, 0x38	; 56
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_uint8SetValuePIN+0x19e>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_uint8SetValuePIN+0x19a>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	32 c0       	rjmp	.+100    	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
					case PORT_C: CLEAR_BIT(PORTC,Copy_Pin);break;
    15f4:	a5 e3       	ldi	r26, 0x35	; 53
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e5 e3       	ldi	r30, 0x35	; 53
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_uint8SetValuePIN+0x1c8>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_uint8SetValuePIN+0x1c4>
    1616:	80 95       	com	r24
    1618:	84 23       	and	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	1d c0       	rjmp	.+58     	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
					case PORT_D: CLEAR_BIT(PORTD,Copy_Pin);break;
    161e:	a2 e3       	ldi	r26, 0x32	; 50
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e2 e3       	ldi	r30, 0x32	; 50
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_uint8SetValuePIN+0x1f2>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_uint8SetValuePIN+0x1ee>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	08 c0       	rjmp	.+16     	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
					default: DIO_L_ErrorCode=1;break;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	05 c0       	rjmp	.+10     	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
				}
			}
		else
			DIO_L_ErrorCode=1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_uint8SetValuePIN+0x20e>
	}
	else
	{
		DIO_L_ErrorCode=1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	89 83       	std	Y+1, r24	; 0x01
	}
}
    1658:	28 96       	adiw	r28, 0x08	; 8
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <DIO_uint8SetValuePort>:

/*-------------------------------------------------------------------------------------*/

void DIO_uint8SetValuePort(PORT_NAME Copy_Port,PORT_VALUE Copy_Value)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	27 97       	sbiw	r28, 0x07	; 7
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	6b 83       	std	Y+3, r22	; 0x03
		uint8 DIO_L_ErrorCode;
		if (Copy_Value==PORT_HIGH)
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	8f 3f       	cpi	r24, 0xFF	; 255
    1686:	b1 f5       	brne	.+108    	; 0x16f4 <DIO_uint8SetValuePort+0x8a>
			{
				switch(Copy_Port)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3f 83       	std	Y+7, r19	; 0x07
    1690:	2e 83       	std	Y+6, r18	; 0x06
    1692:	8e 81       	ldd	r24, Y+6	; 0x06
    1694:	9f 81       	ldd	r25, Y+7	; 0x07
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	d1 f0       	breq	.+52     	; 0x16d0 <DIO_uint8SetValuePort+0x66>
    169c:	2e 81       	ldd	r18, Y+6	; 0x06
    169e:	3f 81       	ldd	r19, Y+7	; 0x07
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <DIO_uint8SetValuePort+0x46>
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	9f 81       	ldd	r25, Y+7	; 0x07
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	61 f0       	breq	.+24     	; 0x16c6 <DIO_uint8SetValuePort+0x5c>
    16ae:	1f c0       	rjmp	.+62     	; 0x16ee <DIO_uint8SetValuePort+0x84>
    16b0:	2e 81       	ldd	r18, Y+6	; 0x06
    16b2:	3f 81       	ldd	r19, Y+7	; 0x07
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	81 f0       	breq	.+32     	; 0x16da <DIO_uint8SetValuePort+0x70>
    16ba:	8e 81       	ldd	r24, Y+6	; 0x06
    16bc:	9f 81       	ldd	r25, Y+7	; 0x07
    16be:	83 30       	cpi	r24, 0x03	; 3
    16c0:	91 05       	cpc	r25, r1
    16c2:	81 f0       	breq	.+32     	; 0x16e4 <DIO_uint8SetValuePort+0x7a>
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <DIO_uint8SetValuePort+0x84>
				{
					case PORT_A:PORTA=PORT_HIGH;break;
    16c6:	eb e3       	ldi	r30, 0x3B	; 59
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	80 83       	st	Z, r24
    16ce:	49 c0       	rjmp	.+146    	; 0x1762 <DIO_uint8SetValuePort+0xf8>
					case PORT_B:PORTB=PORT_HIGH;break;
    16d0:	e8 e3       	ldi	r30, 0x38	; 56
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	80 83       	st	Z, r24
    16d8:	44 c0       	rjmp	.+136    	; 0x1762 <DIO_uint8SetValuePort+0xf8>
					case PORT_C:PORTC=PORT_HIGH;break;
    16da:	e5 e3       	ldi	r30, 0x35	; 53
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	80 83       	st	Z, r24
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <DIO_uint8SetValuePort+0xf8>
					case PORT_D:PORTD=PORT_HIGH;break;
    16e4:	e2 e3       	ldi	r30, 0x32	; 50
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	80 83       	st	Z, r24
    16ec:	3a c0       	rjmp	.+116    	; 0x1762 <DIO_uint8SetValuePort+0xf8>
					default: DIO_L_ErrorCode=1;break;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	37 c0       	rjmp	.+110    	; 0x1762 <DIO_uint8SetValuePort+0xf8>
				}
			}
		else if (Copy_Value==PORT_LOW)
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 23       	and	r24, r24
    16f8:	91 f5       	brne	.+100    	; 0x175e <DIO_uint8SetValuePort+0xf4>
			{
				switch(Copy_Port)
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3d 83       	std	Y+5, r19	; 0x05
    1702:	2c 83       	std	Y+4, r18	; 0x04
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	91 05       	cpc	r25, r1
    170c:	c9 f0       	breq	.+50     	; 0x1740 <DIO_uint8SetValuePort+0xd6>
    170e:	2c 81       	ldd	r18, Y+4	; 0x04
    1710:	3d 81       	ldd	r19, Y+5	; 0x05
    1712:	22 30       	cpi	r18, 0x02	; 2
    1714:	31 05       	cpc	r19, r1
    1716:	2c f4       	brge	.+10     	; 0x1722 <DIO_uint8SetValuePort+0xb8>
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	61 f0       	breq	.+24     	; 0x1738 <DIO_uint8SetValuePort+0xce>
    1720:	1b c0       	rjmp	.+54     	; 0x1758 <DIO_uint8SetValuePort+0xee>
    1722:	2c 81       	ldd	r18, Y+4	; 0x04
    1724:	3d 81       	ldd	r19, Y+5	; 0x05
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	71 f0       	breq	.+28     	; 0x1748 <DIO_uint8SetValuePort+0xde>
    172c:	8c 81       	ldd	r24, Y+4	; 0x04
    172e:	9d 81       	ldd	r25, Y+5	; 0x05
    1730:	83 30       	cpi	r24, 0x03	; 3
    1732:	91 05       	cpc	r25, r1
    1734:	69 f0       	breq	.+26     	; 0x1750 <DIO_uint8SetValuePort+0xe6>
    1736:	10 c0       	rjmp	.+32     	; 0x1758 <DIO_uint8SetValuePort+0xee>
				{
					case PORT_A: PORTA=PORT_LOW;break;
    1738:	eb e3       	ldi	r30, 0x3B	; 59
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	10 82       	st	Z, r1
    173e:	11 c0       	rjmp	.+34     	; 0x1762 <DIO_uint8SetValuePort+0xf8>
					case PORT_B: PORTB=PORT_LOW;break;
    1740:	e8 e3       	ldi	r30, 0x38	; 56
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	10 82       	st	Z, r1
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <DIO_uint8SetValuePort+0xf8>
					case PORT_C: PORTC=PORT_LOW;break;
    1748:	e5 e3       	ldi	r30, 0x35	; 53
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	10 82       	st	Z, r1
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <DIO_uint8SetValuePort+0xf8>
					case PORT_D: PORTD=PORT_LOW;break;
    1750:	e2 e3       	ldi	r30, 0x32	; 50
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	10 82       	st	Z, r1
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <DIO_uint8SetValuePort+0xf8>
					default: DIO_L_ErrorCode=1;break;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_uint8SetValuePort+0xf8>
				}
			}
		else
			DIO_L_ErrorCode=1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 83       	std	Y+1, r24	; 0x01
}
    1762:	27 96       	adiw	r28, 0x07	; 7
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <DIO_uint8Set_SpecificValue_Port>:

/*-------------------------------------------------------------------------------------*/

void DIO_uint8Set_SpecificValue_Port(PORT_NAME Copy_Port,uint8 Copy_Value)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <DIO_uint8Set_SpecificValue_Port+0x6>
    177a:	00 d0       	rcall	.+0      	; 0x177c <DIO_uint8Set_SpecificValue_Port+0x8>
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	6b 83       	std	Y+3, r22	; 0x03
	uint8 DIO_L_ErrorCode;
	/* Check on the Required PORT Number */
	switch(Copy_Port)
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3d 83       	std	Y+5, r19	; 0x05
    178e:	2c 83       	std	Y+4, r18	; 0x04
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	d1 f0       	breq	.+52     	; 0x17ce <DIO_uint8Set_SpecificValue_Port+0x5a>
    179a:	2c 81       	ldd	r18, Y+4	; 0x04
    179c:	3d 81       	ldd	r19, Y+5	; 0x05
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	2c f4       	brge	.+10     	; 0x17ae <DIO_uint8Set_SpecificValue_Port+0x3a>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	61 f0       	breq	.+24     	; 0x17c4 <DIO_uint8Set_SpecificValue_Port+0x50>
    17ac:	1f c0       	rjmp	.+62     	; 0x17ec <DIO_uint8Set_SpecificValue_Port+0x78>
    17ae:	2c 81       	ldd	r18, Y+4	; 0x04
    17b0:	3d 81       	ldd	r19, Y+5	; 0x05
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	81 f0       	breq	.+32     	; 0x17d8 <DIO_uint8Set_SpecificValue_Port+0x64>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	83 30       	cpi	r24, 0x03	; 3
    17be:	91 05       	cpc	r25, r1
    17c0:	81 f0       	breq	.+32     	; 0x17e2 <DIO_uint8Set_SpecificValue_Port+0x6e>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <DIO_uint8Set_SpecificValue_Port+0x78>
	{
		case PORT_A:PORTA=Copy_Value;break;
    17c4:	eb e3       	ldi	r30, 0x3B	; 59
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	80 83       	st	Z, r24
    17cc:	11 c0       	rjmp	.+34     	; 0x17f0 <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_B:PORTB=Copy_Value;break;
    17ce:	e8 e3       	ldi	r30, 0x38	; 56
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	80 83       	st	Z, r24
    17d6:	0c c0       	rjmp	.+24     	; 0x17f0 <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_C:PORTC=Copy_Value;break;
    17d8:	e5 e3       	ldi	r30, 0x35	; 53
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	80 83       	st	Z, r24
    17e0:	07 c0       	rjmp	.+14     	; 0x17f0 <DIO_uint8Set_SpecificValue_Port+0x7c>
		case PORT_D:PORTD=Copy_Value;break;
    17e2:	e2 e3       	ldi	r30, 0x32	; 50
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	80 83       	st	Z, r24
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_uint8Set_SpecificValue_Port+0x7c>
		default: DIO_L_ErrorCode=1;break;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 83       	std	Y+1, r24	; 0x01
	}

}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <DIO_uint8Set_SpecificValue_Port_Direction>:

/*------------------------------------------------------------------------*/

void DIO_uint8Set_SpecificValue_Port_Direction(PORT_NAME Copy_Port,uint8 Copy_Dir)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <DIO_uint8Set_SpecificValue_Port_Direction+0x6>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <DIO_uint8Set_SpecificValue_Port_Direction+0x8>
    1808:	0f 92       	push	r0
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	8a 83       	std	Y+2, r24	; 0x02
    1810:	6b 83       	std	Y+3, r22	; 0x03
	uint8 DIO_L_ErrorCode;
		/* Check on the Required PORT Number */
		switch(Copy_Port)
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3d 83       	std	Y+5, r19	; 0x05
    181a:	2c 83       	std	Y+4, r18	; 0x04
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	d1 f0       	breq	.+52     	; 0x185a <DIO_uint8Set_SpecificValue_Port_Direction+0x5a>
    1826:	2c 81       	ldd	r18, Y+4	; 0x04
    1828:	3d 81       	ldd	r19, Y+5	; 0x05
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <DIO_uint8Set_SpecificValue_Port_Direction+0x3a>
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	61 f0       	breq	.+24     	; 0x1850 <DIO_uint8Set_SpecificValue_Port_Direction+0x50>
    1838:	1f c0       	rjmp	.+62     	; 0x1878 <DIO_uint8Set_SpecificValue_Port_Direction+0x78>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	81 f0       	breq	.+32     	; 0x1864 <DIO_uint8Set_SpecificValue_Port_Direction+0x64>
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	81 f0       	breq	.+32     	; 0x186e <DIO_uint8Set_SpecificValue_Port_Direction+0x6e>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <DIO_uint8Set_SpecificValue_Port_Direction+0x78>
		{
			case PORT_A:DDRA=Copy_Dir;break;
    1850:	ea e3       	ldi	r30, 0x3A	; 58
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	80 83       	st	Z, r24
    1858:	11 c0       	rjmp	.+34     	; 0x187c <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_B:DDRB=Copy_Dir;break;
    185a:	e7 e3       	ldi	r30, 0x37	; 55
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	80 83       	st	Z, r24
    1862:	0c c0       	rjmp	.+24     	; 0x187c <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_C:DDRC=Copy_Dir;break;
    1864:	e4 e3       	ldi	r30, 0x34	; 52
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	80 83       	st	Z, r24
    186c:	07 c0       	rjmp	.+14     	; 0x187c <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			case PORT_D:DDRD=Copy_Dir;break;
    186e:	e1 e3       	ldi	r30, 0x31	; 49
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	80 83       	st	Z, r24
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_uint8Set_SpecificValue_Port_Direction+0x7c>
			default: DIO_L_ErrorCode=1;break;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
		}
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <DIO_uint8Read_PIN>:

/*------------------------------------------------------------------------*/

PIN_VALUE DIO_uint8Read_PIN(PIN_Reg_NAME Copy_Port,PIN_NAME Copy_Pin)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <DIO_uint8Read_PIN+0x6>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <DIO_uint8Read_PIN+0x8>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <DIO_uint8Read_PIN+0xa>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	8b 83       	std	Y+3, r24	; 0x03
    189c:	6c 83       	std	Y+4, r22	; 0x04
	PIN_VALUE Copy_Value;
	uint8 DIO_L_ErrorCode;

	if(Copy_Port <= PIN_D && Copy_Pin <= PIN_7)
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	84 30       	cpi	r24, 0x04	; 4
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <DIO_uint8Read_PIN+0x1a>
    18a4:	6f c0       	rjmp	.+222    	; 0x1984 <DIO_uint8Read_PIN+0xf8>
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	88 30       	cpi	r24, 0x08	; 8
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <DIO_uint8Read_PIN+0x22>
    18ac:	6b c0       	rjmp	.+214    	; 0x1984 <DIO_uint8Read_PIN+0xf8>
	{
		switch(Copy_Port)
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3e 83       	std	Y+6, r19	; 0x06
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	4d 81       	ldd	r20, Y+5	; 0x05
    18ba:	5e 81       	ldd	r21, Y+6	; 0x06
    18bc:	41 30       	cpi	r20, 0x01	; 1
    18be:	51 05       	cpc	r21, r1
    18c0:	41 f1       	breq	.+80     	; 0x1912 <DIO_uint8Read_PIN+0x86>
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	91 05       	cpc	r25, r1
    18ca:	34 f4       	brge	.+12     	; 0x18d8 <DIO_uint8Read_PIN+0x4c>
    18cc:	2d 81       	ldd	r18, Y+5	; 0x05
    18ce:	3e 81       	ldd	r19, Y+6	; 0x06
    18d0:	21 15       	cp	r18, r1
    18d2:	31 05       	cpc	r19, r1
    18d4:	61 f0       	breq	.+24     	; 0x18ee <DIO_uint8Read_PIN+0x62>
    18d6:	53 c0       	rjmp	.+166    	; 0x197e <DIO_uint8Read_PIN+0xf2>
    18d8:	4d 81       	ldd	r20, Y+5	; 0x05
    18da:	5e 81       	ldd	r21, Y+6	; 0x06
    18dc:	42 30       	cpi	r20, 0x02	; 2
    18de:	51 05       	cpc	r21, r1
    18e0:	51 f1       	breq	.+84     	; 0x1936 <DIO_uint8Read_PIN+0xaa>
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	9e 81       	ldd	r25, Y+6	; 0x06
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	b9 f1       	breq	.+110    	; 0x195a <DIO_uint8Read_PIN+0xce>
    18ec:	48 c0       	rjmp	.+144    	; 0x197e <DIO_uint8Read_PIN+0xf2>
			{
				case PIN_A:Copy_Value = GET_BIT(PINA,Copy_Pin); break;
    18ee:	e9 e3       	ldi	r30, 0x39	; 57
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_uint8Read_PIN+0x7a>
    1902:	55 95       	asr	r21
    1904:	47 95       	ror	r20
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_uint8Read_PIN+0x76>
    190a:	ca 01       	movw	r24, r20
    190c:	81 70       	andi	r24, 0x01	; 1
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	3b c0       	rjmp	.+118    	; 0x1988 <DIO_uint8Read_PIN+0xfc>
				case PIN_B:Copy_Value = GET_BIT(PINB,Copy_Pin); break;
    1912:	e6 e3       	ldi	r30, 0x36	; 54
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <DIO_uint8Read_PIN+0x9e>
    1926:	55 95       	asr	r21
    1928:	47 95       	ror	r20
    192a:	8a 95       	dec	r24
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <DIO_uint8Read_PIN+0x9a>
    192e:	ca 01       	movw	r24, r20
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	8a 83       	std	Y+2, r24	; 0x02
    1934:	29 c0       	rjmp	.+82     	; 0x1988 <DIO_uint8Read_PIN+0xfc>
				case PIN_C:Copy_Value = GET_BIT(PINC,Copy_Pin); break;
    1936:	e3 e3       	ldi	r30, 0x33	; 51
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a9 01       	movw	r20, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_uint8Read_PIN+0xc2>
    194a:	55 95       	asr	r21
    194c:	47 95       	ror	r20
    194e:	8a 95       	dec	r24
    1950:	e2 f7       	brpl	.-8      	; 0x194a <DIO_uint8Read_PIN+0xbe>
    1952:	ca 01       	movw	r24, r20
    1954:	81 70       	andi	r24, 0x01	; 1
    1956:	8a 83       	std	Y+2, r24	; 0x02
    1958:	17 c0       	rjmp	.+46     	; 0x1988 <DIO_uint8Read_PIN+0xfc>
				case PIN_D:Copy_Value = GET_BIT(PIND,Copy_Pin); break;
    195a:	e0 e3       	ldi	r30, 0x30	; 48
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a9 01       	movw	r20, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_uint8Read_PIN+0xe6>
    196e:	55 95       	asr	r21
    1970:	47 95       	ror	r20
    1972:	8a 95       	dec	r24
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_uint8Read_PIN+0xe2>
    1976:	ca 01       	movw	r24, r20
    1978:	81 70       	andi	r24, 0x01	; 1
    197a:	8a 83       	std	Y+2, r24	; 0x02
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <DIO_uint8Read_PIN+0xfc>
				default: DIO_L_ErrorCode=1; break;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <DIO_uint8Read_PIN+0xfc>
			}
	}
	else
	{
		DIO_L_ErrorCode=1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	89 83       	std	Y+1, r24	; 0x01
	}

	return Copy_Value;
    1988:	8a 81       	ldd	r24, Y+2	; 0x02

}
    198a:	26 96       	adiw	r28, 0x06	; 6
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <LCD_init>:

#include "LCD_INTERFACE.h"
#include <util/delay.h>

void LCD_init(void)
{
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	c4 55       	subi	r28, 0x54	; 84
    19aa:	d0 40       	sbci	r29, 0x00	; 0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
	DIO_uint8SetDirectionPort(PORT_DATA , PORT_OUTPUT);
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	6f ef       	ldi	r22, 0xFF	; 255
    19ba:	0e 94 a0 09 	call	0x1340	; 0x1340 <DIO_uint8SetDirectionPort>
	DIO_uint8SetDirectionPIN(PORT_CONTROL , RS , PIN_OUTPUT);
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_uint8SetDirectionPIN>
	DIO_uint8SetDirectionPIN(PORT_CONTROL , RW , PIN_OUTPUT);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	62 e0       	ldi	r22, 0x02	; 2
    19cc:	41 e0       	ldi	r20, 0x01	; 1
    19ce:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_uint8SetDirectionPIN>
	DIO_uint8SetDirectionPIN(PORT_CONTROL , EN , PIN_OUTPUT);
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	63 e0       	ldi	r22, 0x03	; 3
    19d6:	41 e0       	ldi	r20, 0x01	; 1
    19d8:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_uint8SetDirectionPIN>
    19dc:	fe 01       	movw	r30, r28
    19de:	ef 5a       	subi	r30, 0xAF	; 175
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 ef       	ldi	r26, 0xF0	; 240
    19e8:	b1 e4       	ldi	r27, 0x41	; 65
    19ea:	80 83       	st	Z, r24
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	a2 83       	std	Z+2, r26	; 0x02
    19f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	8e 01       	movw	r16, r28
    19f4:	03 5b       	subi	r16, 0xB3	; 179
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	ef 5a       	subi	r30, 0xAF	; 175
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a ef       	ldi	r20, 0xFA	; 250
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	f8 01       	movw	r30, r16
    1a18:	80 83       	st	Z, r24
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	a2 83       	std	Z+2, r26	; 0x02
    1a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a20:	fe 01       	movw	r30, r28
    1a22:	e3 5b       	subi	r30, 0xB3	; 179
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	44 f4       	brge	.+16     	; 0x1a4e <LCD_init+0xb2>
		__ticks = 1;
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e5 5b       	subi	r30, 0xB5	; 181
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
    1a4c:	64 c0       	rjmp	.+200    	; 0x1b16 <LCD_init+0x17a>
	else if (__tmp > 65535)
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e3 5b       	subi	r30, 0xB3	; 179
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	60 81       	ld	r22, Z
    1a56:	71 81       	ldd	r23, Z+1	; 0x01
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	0c f0       	brlt	.+2      	; 0x1a6e <LCD_init+0xd2>
    1a6c:	43 c0       	rjmp	.+134    	; 0x1af4 <LCD_init+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ef 5a       	subi	r30, 0xAF	; 175
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	05 5b       	subi	r16, 0xB5	; 181
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	80 83       	st	Z, r24
    1aa4:	1f c0       	rjmp	.+62     	; 0x1ae4 <LCD_init+0x148>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e7 5b       	subi	r30, 0xB7	; 183
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e7 5b       	subi	r30, 0xB7	; 183
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_init+0x122>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e7 5b       	subi	r30, 0xB7	; 183
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	de 01       	movw	r26, r28
    1ace:	a5 5b       	subi	r26, 0xB5	; 181
    1ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e5 5b       	subi	r30, 0xB5	; 181
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	9c 93       	st	X, r25
    1ae2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e5 5b       	subi	r30, 0xB5	; 181
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	d1 f6       	brne	.-76     	; 0x1aa6 <LCD_init+0x10a>
    1af2:	27 c0       	rjmp	.+78     	; 0x1b42 <LCD_init+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	8e 01       	movw	r16, r28
    1af6:	05 5b       	subi	r16, 0xB5	; 181
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	fe 01       	movw	r30, r28
    1afc:	e3 5b       	subi	r30, 0xB3	; 179
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	f8 01       	movw	r30, r16
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	de 01       	movw	r26, r28
    1b18:	a9 5b       	subi	r26, 0xB9	; 185
    1b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e5 5b       	subi	r30, 0xB5	; 181
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	8d 93       	st	X+, r24
    1b28:	9c 93       	st	X, r25
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e9 5b       	subi	r30, 0xB9	; 185
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_init+0x198>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e9 5b       	subi	r30, 0xB9	; 185
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24

	_delay_ms(30);

	LCD_SEND_COMMAND(lcd_Home);
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	0e 94 09 10 	call	0x2012	; 0x2012 <LCD_SEND_COMMAND>
    1b48:	fe 01       	movw	r30, r28
    1b4a:	ed 5b       	subi	r30, 0xBD	; 189
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e7       	ldi	r26, 0x70	; 112
    1b54:	b1 e4       	ldi	r27, 0x41	; 65
    1b56:	80 83       	st	Z, r24
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	a2 83       	std	Z+2, r26	; 0x02
    1b5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	8e 01       	movw	r16, r28
    1b60:	01 5c       	subi	r16, 0xC1	; 193
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	fe 01       	movw	r30, r28
    1b66:	ed 5b       	subi	r30, 0xBD	; 189
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4a ef       	ldi	r20, 0xFA	; 250
    1b78:	54 e4       	ldi	r21, 0x44	; 68
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	f8 01       	movw	r30, r16
    1b84:	80 83       	st	Z, r24
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	a2 83       	std	Z+2, r26	; 0x02
    1b8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ff 96       	adiw	r30, 0x3f	; 63
    1b90:	60 81       	ld	r22, Z
    1b92:	71 81       	ldd	r23, Z+1	; 0x01
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	93 81       	ldd	r25, Z+3	; 0x03
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <LCD_init+0x216>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9e af       	std	Y+62, r25	; 0x3e
    1bae:	8d af       	std	Y+61, r24	; 0x3d
    1bb0:	46 c0       	rjmp	.+140    	; 0x1c3e <LCD_init+0x2a2>
	else if (__tmp > 65535)
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	ff 96       	adiw	r30, 0x3f	; 63
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	64 f5       	brge	.+88     	; 0x1c26 <LCD_init+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ed 5b       	subi	r30, 0xBD	; 189
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e2       	ldi	r20, 0x20	; 32
    1be2:	51 e4       	ldi	r21, 0x41	; 65
    1be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9e af       	std	Y+62, r25	; 0x3e
    1bfa:	8d af       	std	Y+61, r24	; 0x3d
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <LCD_init+0x280>
    1bfe:	88 ec       	ldi	r24, 0xC8	; 200
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9c af       	std	Y+60, r25	; 0x3c
    1c04:	8b af       	std	Y+59, r24	; 0x3b
    1c06:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c08:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_init+0x26e>
    1c0e:	9c af       	std	Y+60, r25	; 0x3c
    1c10:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	9e af       	std	Y+62, r25	; 0x3e
    1c1a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	69 f7       	brne	.-38     	; 0x1bfe <LCD_init+0x262>
    1c24:	16 c0       	rjmp	.+44     	; 0x1c52 <LCD_init+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c26:	fe 01       	movw	r30, r28
    1c28:	ff 96       	adiw	r30, 0x3f	; 63
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e af       	std	Y+62, r25	; 0x3e
    1c3c:	8d af       	std	Y+61, r24	; 0x3d
    1c3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c40:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c42:	9a af       	std	Y+58, r25	; 0x3a
    1c44:	89 af       	std	Y+57, r24	; 0x39
    1c46:	89 ad       	ldd	r24, Y+57	; 0x39
    1c48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_init+0x2ae>
    1c4e:	9a af       	std	Y+58, r25	; 0x3a
    1c50:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	LCD_SEND_COMMAND(FUN_SET_8BIT_2LINE);
    1c52:	88 e3       	ldi	r24, 0x38	; 56
    1c54:	0e 94 09 10 	call	0x2012	; 0x2012 <LCD_SEND_COMMAND>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a0 e8       	ldi	r26, 0x80	; 128
    1c5e:	bf e3       	ldi	r27, 0x3F	; 63
    1c60:	8d ab       	std	Y+53, r24	; 0x35
    1c62:	9e ab       	std	Y+54, r25	; 0x36
    1c64:	af ab       	std	Y+55, r26	; 0x37
    1c66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	6d a9       	ldd	r22, Y+53	; 0x35
    1c6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a ef       	ldi	r20, 0xFA	; 250
    1c76:	54 e4       	ldi	r21, 0x44	; 68
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	89 ab       	std	Y+49, r24	; 0x31
    1c82:	9a ab       	std	Y+50, r25	; 0x32
    1c84:	ab ab       	std	Y+51, r26	; 0x33
    1c86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c88:	69 a9       	ldd	r22, Y+49	; 0x31
    1c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <LCD_init+0x30e>
		__ticks = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	98 ab       	std	Y+48, r25	; 0x30
    1ca6:	8f a7       	std	Y+47, r24	; 0x2f
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <LCD_init+0x38c>
	else if (__tmp > 65535)
    1caa:	69 a9       	ldd	r22, Y+49	; 0x31
    1cac:	7a a9       	ldd	r23, Y+50	; 0x32
    1cae:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	4c f5       	brge	.+82     	; 0x1d14 <LCD_init+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1cc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	98 ab       	std	Y+48, r25	; 0x30
    1ce8:	8f a7       	std	Y+47, r24	; 0x2f
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <LCD_init+0x36e>
    1cec:	88 ec       	ldi	r24, 0xC8	; 200
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9e a7       	std	Y+46, r25	; 0x2e
    1cf2:	8d a7       	std	Y+45, r24	; 0x2d
    1cf4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cf6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_init+0x35c>
    1cfc:	9e a7       	std	Y+46, r25	; 0x2e
    1cfe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d02:	98 a9       	ldd	r25, Y+48	; 0x30
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	98 ab       	std	Y+48, r25	; 0x30
    1d08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <LCD_init+0x350>
    1d12:	14 c0       	rjmp	.+40     	; 0x1d3c <LCD_init+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	69 a9       	ldd	r22, Y+49	; 0x31
    1d16:	7a a9       	ldd	r23, Y+50	; 0x32
    1d18:	8b a9       	ldd	r24, Y+51	; 0x33
    1d1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
    1d28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2c:	9c a7       	std	Y+44, r25	; 0x2c
    1d2e:	8b a7       	std	Y+43, r24	; 0x2b
    1d30:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d32:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_init+0x398>
    1d38:	9c a7       	std	Y+44, r25	; 0x2c
    1d3a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_SEND_COMMAND(DisplayOn_CursorBlink);
    1d3c:	8f e0       	ldi	r24, 0x0F	; 15
    1d3e:	0e 94 09 10 	call	0x2012	; 0x2012 <LCD_SEND_COMMAND>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e8       	ldi	r26, 0x80	; 128
    1d48:	bf e3       	ldi	r27, 0x3F	; 63
    1d4a:	8f a3       	std	Y+39, r24	; 0x27
    1d4c:	98 a7       	std	Y+40, r25	; 0x28
    1d4e:	a9 a7       	std	Y+41, r26	; 0x29
    1d50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6f a1       	ldd	r22, Y+39	; 0x27
    1d54:	78 a5       	ldd	r23, Y+40	; 0x28
    1d56:	89 a5       	ldd	r24, Y+41	; 0x29
    1d58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a ef       	ldi	r20, 0xFA	; 250
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8b a3       	std	Y+35, r24	; 0x23
    1d6c:	9c a3       	std	Y+36, r25	; 0x24
    1d6e:	ad a3       	std	Y+37, r26	; 0x25
    1d70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d72:	6b a1       	ldd	r22, Y+35	; 0x23
    1d74:	7c a1       	ldd	r23, Y+36	; 0x24
    1d76:	8d a1       	ldd	r24, Y+37	; 0x25
    1d78:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD_init+0x3f8>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9a a3       	std	Y+34, r25	; 0x22
    1d90:	89 a3       	std	Y+33, r24	; 0x21
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD_init+0x476>
	else if (__tmp > 65535)
    1d94:	6b a1       	ldd	r22, Y+35	; 0x23
    1d96:	7c a1       	ldd	r23, Y+36	; 0x24
    1d98:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD_init+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6f a1       	ldd	r22, Y+39	; 0x27
    1dae:	78 a5       	ldd	r23, Y+40	; 0x28
    1db0:	89 a5       	ldd	r24, Y+41	; 0x29
    1db2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9a a3       	std	Y+34, r25	; 0x22
    1dd2:	89 a3       	std	Y+33, r24	; 0x21
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD_init+0x458>
    1dd6:	88 ec       	ldi	r24, 0xC8	; 200
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	98 a3       	std	Y+32, r25	; 0x20
    1ddc:	8f 8f       	std	Y+31, r24	; 0x1f
    1dde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de0:	98 a1       	ldd	r25, Y+32	; 0x20
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_init+0x446>
    1de6:	98 a3       	std	Y+32, r25	; 0x20
    1de8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	89 a1       	ldd	r24, Y+33	; 0x21
    1dec:	9a a1       	ldd	r25, Y+34	; 0x22
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9a a3       	std	Y+34, r25	; 0x22
    1df2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	89 a1       	ldd	r24, Y+33	; 0x21
    1df6:	9a a1       	ldd	r25, Y+34	; 0x22
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD_init+0x43a>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD_init+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1e00:	7c a1       	ldd	r23, Y+36	; 0x24
    1e02:	8d a1       	ldd	r24, Y+37	; 0x25
    1e04:	9e a1       	ldd	r25, Y+38	; 0x26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	9e 8f       	std	Y+30, r25	; 0x1e
    1e18:	8d 8f       	std	Y+29, r24	; 0x1d
    1e1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_init+0x482>
    1e22:	9e 8f       	std	Y+30, r25	; 0x1e
    1e24:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_SEND_COMMAND(Clear_Display);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	0e 94 09 10 	call	0x2012	; 0x2012 <LCD_SEND_COMMAND>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 e7       	ldi	r26, 0x70	; 112
    1e32:	b1 e4       	ldi	r27, 0x41	; 65
    1e34:	89 8f       	std	Y+25, r24	; 0x19
    1e36:	9a 8f       	std	Y+26, r25	; 0x1a
    1e38:	ab 8f       	std	Y+27, r26	; 0x1b
    1e3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8d 8b       	std	Y+21, r24	; 0x15
    1e56:	9e 8b       	std	Y+22, r25	; 0x16
    1e58:	af 8b       	std	Y+23, r26	; 0x17
    1e5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e60:	8f 89       	ldd	r24, Y+23	; 0x17
    1e62:	98 8d       	ldd	r25, Y+24	; 0x18
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <LCD_init+0x4e2>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 8b       	std	Y+20, r25	; 0x14
    1e7a:	8b 8b       	std	Y+19, r24	; 0x13
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <LCD_init+0x560>
	else if (__tmp > 65535)
    1e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e80:	7e 89       	ldd	r23, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <LCD_init+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	69 8d       	ldd	r22, Y+25	; 0x19
    1e98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9c 8b       	std	Y+20, r25	; 0x14
    1ebc:	8b 8b       	std	Y+19, r24	; 0x13
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <LCD_init+0x542>
    1ec0:	88 ec       	ldi	r24, 0xC8	; 200
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9a 8b       	std	Y+18, r25	; 0x12
    1ec6:	89 8b       	std	Y+17, r24	; 0x11
    1ec8:	89 89       	ldd	r24, Y+17	; 0x11
    1eca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_init+0x530>
    1ed0:	9a 8b       	std	Y+18, r25	; 0x12
    1ed2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <LCD_init+0x524>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <LCD_init+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eea:	7e 89       	ldd	r23, Y+22	; 0x16
    1eec:	8f 89       	ldd	r24, Y+23	; 0x17
    1eee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
    1efc:	8b 89       	ldd	r24, Y+19	; 0x13
    1efe:	9c 89       	ldd	r25, Y+20	; 0x14
    1f00:	98 8b       	std	Y+16, r25	; 0x10
    1f02:	8f 87       	std	Y+15, r24	; 0x0f
    1f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f06:	98 89       	ldd	r25, Y+16	; 0x10
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_init+0x56c>
    1f0c:	98 8b       	std	Y+16, r25	; 0x10
    1f0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	LCD_SEND_COMMAND(Entry_Mode);
    1f10:	86 e0       	ldi	r24, 0x06	; 6
    1f12:	0e 94 09 10 	call	0x2012	; 0x2012 <LCD_SEND_COMMAND>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 e0       	ldi	r26, 0x00	; 0
    1f1c:	b0 e4       	ldi	r27, 0x40	; 64
    1f1e:	8b 87       	std	Y+11, r24	; 0x0b
    1f20:	9c 87       	std	Y+12, r25	; 0x0c
    1f22:	ad 87       	std	Y+13, r26	; 0x0d
    1f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a ef       	ldi	r20, 0xFA	; 250
    1f34:	54 e4       	ldi	r21, 0x44	; 68
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	8f 83       	std	Y+7, r24	; 0x07
    1f40:	98 87       	std	Y+8, r25	; 0x08
    1f42:	a9 87       	std	Y+9, r26	; 0x09
    1f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f46:	6f 81       	ldd	r22, Y+7	; 0x07
    1f48:	78 85       	ldd	r23, Y+8	; 0x08
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <LCD_init+0x5cc>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	3f c0       	rjmp	.+126    	; 0x1fe6 <LCD_init+0x64a>
	else if (__tmp > 65535)
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	4c f5       	brge	.+82     	; 0x1fd2 <LCD_init+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <LCD_init+0x62c>
    1faa:	88 ec       	ldi	r24, 0xC8	; 200
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9c 83       	std	Y+4, r25	; 0x04
    1fb0:	8b 83       	std	Y+3, r24	; 0x03
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <LCD_init+0x61a>
    1fba:	9c 83       	std	Y+4, r25	; 0x04
    1fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	9e 81       	ldd	r25, Y+6	; 0x06
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <LCD_init+0x60e>
    1fd0:	14 c0       	rjmp	.+40     	; 0x1ffa <LCD_init+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd4:	78 85       	ldd	r23, Y+8	; 0x08
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_init+0x656>
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1ffa:	cc 5a       	subi	r28, 0xAC	; 172
    1ffc:	df 4f       	sbci	r29, 0xFF	; 255
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	08 95       	ret

00002012 <LCD_SEND_COMMAND>:

/*-------------------------------------------------------------------------------------*/

void LCD_SEND_COMMAND(Commands copy_command)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	6d 97       	sbiw	r28, 0x1d	; 29
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_uint8SetValuePIN(PORT_CONTROL , RS , PIN_LOW);
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>

	DIO_uint8SetValuePIN(PORT_CONTROL , RW , PIN_LOW);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	62 e0       	ldi	r22, 0x02	; 2
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>

	DIO_uint8Set_SpecificValue_Port(PORT_DATA , copy_command);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2040:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_uint8Set_SpecificValue_Port>
	/******	giving a PULSE to the EN pin ******/

	DIO_uint8SetValuePIN(PORT_CONTROL , EN , PIN_HIGH);
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	63 e0       	ldi	r22, 0x03	; 3
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e0       	ldi	r26, 0x00	; 0
    2054:	b0 e4       	ldi	r27, 0x40	; 64
    2056:	89 8f       	std	Y+25, r24	; 0x19
    2058:	9a 8f       	std	Y+26, r25	; 0x1a
    205a:	ab 8f       	std	Y+27, r26	; 0x1b
    205c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	69 8d       	ldd	r22, Y+25	; 0x19
    2060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a ef       	ldi	r20, 0xFA	; 250
    206c:	54 e4       	ldi	r21, 0x44	; 68
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8d 8b       	std	Y+21, r24	; 0x15
    2078:	9e 8b       	std	Y+22, r25	; 0x16
    207a:	af 8b       	std	Y+23, r26	; 0x17
    207c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    207e:	6d 89       	ldd	r22, Y+21	; 0x15
    2080:	7e 89       	ldd	r23, Y+22	; 0x16
    2082:	8f 89       	ldd	r24, Y+23	; 0x17
    2084:	98 8d       	ldd	r25, Y+24	; 0x18
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <LCD_SEND_COMMAND+0x8e>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9c 8b       	std	Y+20, r25	; 0x14
    209c:	8b 8b       	std	Y+19, r24	; 0x13
    209e:	3f c0       	rjmp	.+126    	; 0x211e <LCD_SEND_COMMAND+0x10c>
	else if (__tmp > 65535)
    20a0:	6d 89       	ldd	r22, Y+21	; 0x15
    20a2:	7e 89       	ldd	r23, Y+22	; 0x16
    20a4:	8f 89       	ldd	r24, Y+23	; 0x17
    20a6:	98 8d       	ldd	r25, Y+24	; 0x18
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <LCD_SEND_COMMAND+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_SEND_COMMAND+0xee>
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9a 8b       	std	Y+18, r25	; 0x12
    20e8:	89 8b       	std	Y+17, r24	; 0x11
    20ea:	89 89       	ldd	r24, Y+17	; 0x11
    20ec:	9a 89       	ldd	r25, Y+18	; 0x12
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_SEND_COMMAND+0xdc>
    20f2:	9a 8b       	std	Y+18, r25	; 0x12
    20f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9c 8b       	std	Y+20, r25	; 0x14
    20fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	8b 89       	ldd	r24, Y+19	; 0x13
    2102:	9c 89       	ldd	r25, Y+20	; 0x14
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <LCD_SEND_COMMAND+0xd0>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <LCD_SEND_COMMAND+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	6d 89       	ldd	r22, Y+21	; 0x15
    210c:	7e 89       	ldd	r23, Y+22	; 0x16
    210e:	8f 89       	ldd	r24, Y+23	; 0x17
    2110:	98 8d       	ldd	r25, Y+24	; 0x18
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	98 8b       	std	Y+16, r25	; 0x10
    2124:	8f 87       	std	Y+15, r24	; 0x0f
    2126:	8f 85       	ldd	r24, Y+15	; 0x0f
    2128:	98 89       	ldd	r25, Y+16	; 0x10
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_SEND_COMMAND+0x118>
    212e:	98 8b       	std	Y+16, r25	; 0x10
    2130:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	DIO_uint8SetValuePIN(PORT_CONTROL , EN , PIN_LOW);
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	63 e0       	ldi	r22, 0x03	; 3
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e0       	ldi	r26, 0x00	; 0
    2142:	b0 e4       	ldi	r27, 0x40	; 64
    2144:	8b 87       	std	Y+11, r24	; 0x0b
    2146:	9c 87       	std	Y+12, r25	; 0x0c
    2148:	ad 87       	std	Y+13, r26	; 0x0d
    214a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	4a ef       	ldi	r20, 0xFA	; 250
    215a:	54 e4       	ldi	r21, 0x44	; 68
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8f 83       	std	Y+7, r24	; 0x07
    2166:	98 87       	std	Y+8, r25	; 0x08
    2168:	a9 87       	std	Y+9, r26	; 0x09
    216a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <LCD_SEND_COMMAND+0x17c>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	3f c0       	rjmp	.+126    	; 0x220c <LCD_SEND_COMMAND+0x1fa>
	else if (__tmp > 65535)
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <LCD_SEND_COMMAND+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <LCD_SEND_COMMAND+0x1dc>
    21d0:	88 ec       	ldi	r24, 0xC8	; 200
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <LCD_SEND_COMMAND+0x1ca>
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <LCD_SEND_COMMAND+0x1be>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <LCD_SEND_COMMAND+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	6f 81       	ldd	r22, Y+7	; 0x07
    21fa:	78 85       	ldd	r23, Y+8	; 0x08
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_SEND_COMMAND+0x206>
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	DIO_uint8SetValuePIN(PORT_CONTROL , EN , PIN_HIGH);
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	63 e0       	ldi	r22, 0x03	; 3
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>

}
    222a:	6d 96       	adiw	r28, 0x1d	; 29
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <LCD_SEND_DATA_8bit>:

/*-------------------------------------------------------------------------------------*/

void LCD_SEND_DATA_8bit(uint8 DATA)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	6d 97       	sbiw	r28, 0x1d	; 29
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_uint8SetValuePIN(PORT_CONTROL , RS , PIN_HIGH);
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>

	DIO_uint8SetValuePIN(PORT_CONTROL , RW , PIN_LOW);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	62 e0       	ldi	r22, 0x02	; 2
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>

	DIO_uint8SetValuePIN(PORT_CONTROL , EN , PIN_HIGH);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	63 e0       	ldi	r22, 0x03	; 3
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>

	DIO_uint8Set_SpecificValue_Port(PORT_DATA , DATA);
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2274:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_uint8Set_SpecificValue_Port>
	/******	giving a PULSE to the EN pin ******/

	//DIO_uint8SetValuePIN(PORT_CONTROL , EN , PIN_HIGH);
	//_delay_ms(2);

	DIO_uint8SetValuePIN(PORT_CONTROL , EN , PIN_LOW);
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	63 e0       	ldi	r22, 0x03	; 3
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 ea       	ldi	r26, 0xA0	; 160
    2288:	b0 e4       	ldi	r27, 0x40	; 64
    228a:	89 8f       	std	Y+25, r24	; 0x19
    228c:	9a 8f       	std	Y+26, r25	; 0x1a
    228e:	ab 8f       	std	Y+27, r26	; 0x1b
    2290:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	69 8d       	ldd	r22, Y+25	; 0x19
    2294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8d 8b       	std	Y+21, r24	; 0x15
    22ac:	9e 8b       	std	Y+22, r25	; 0x16
    22ae:	af 8b       	std	Y+23, r26	; 0x17
    22b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <LCD_SEND_DATA_8bit+0x98>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <LCD_SEND_DATA_8bit+0x116>
	else if (__tmp > 65535)
    22d4:	6d 89       	ldd	r22, Y+21	; 0x15
    22d6:	7e 89       	ldd	r23, Y+22	; 0x16
    22d8:	8f 89       	ldd	r24, Y+23	; 0x17
    22da:	98 8d       	ldd	r25, Y+24	; 0x18
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <LCD_SEND_DATA_8bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	69 8d       	ldd	r22, Y+25	; 0x19
    22ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9c 8b       	std	Y+20, r25	; 0x14
    2312:	8b 8b       	std	Y+19, r24	; 0x13
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <LCD_SEND_DATA_8bit+0xf8>
    2316:	88 ec       	ldi	r24, 0xC8	; 200
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9a 8b       	std	Y+18, r25	; 0x12
    231c:	89 8b       	std	Y+17, r24	; 0x11
    231e:	89 89       	ldd	r24, Y+17	; 0x11
    2320:	9a 89       	ldd	r25, Y+18	; 0x12
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_SEND_DATA_8bit+0xe6>
    2326:	9a 8b       	std	Y+18, r25	; 0x12
    2328:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8b 89       	ldd	r24, Y+19	; 0x13
    232c:	9c 89       	ldd	r25, Y+20	; 0x14
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <LCD_SEND_DATA_8bit+0xda>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <LCD_SEND_DATA_8bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	6d 89       	ldd	r22, Y+21	; 0x15
    2340:	7e 89       	ldd	r23, Y+22	; 0x16
    2342:	8f 89       	ldd	r24, Y+23	; 0x17
    2344:	98 8d       	ldd	r25, Y+24	; 0x18
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9c 8b       	std	Y+20, r25	; 0x14
    2350:	8b 8b       	std	Y+19, r24	; 0x13
    2352:	8b 89       	ldd	r24, Y+19	; 0x13
    2354:	9c 89       	ldd	r25, Y+20	; 0x14
    2356:	98 8b       	std	Y+16, r25	; 0x10
    2358:	8f 87       	std	Y+15, r24	; 0x0f
    235a:	8f 85       	ldd	r24, Y+15	; 0x0f
    235c:	98 89       	ldd	r25, Y+16	; 0x10
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_SEND_DATA_8bit+0x122>
    2362:	98 8b       	std	Y+16, r25	; 0x10
    2364:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	DIO_uint8SetValuePIN(PORT_CONTROL , EN , PIN_HIGH);
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	63 e0       	ldi	r22, 0x03	; 3
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_uint8SetValuePIN>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	a0 e2       	ldi	r26, 0x20	; 32
    2376:	b1 e4       	ldi	r27, 0x41	; 65
    2378:	8b 87       	std	Y+11, r24	; 0x0b
    237a:	9c 87       	std	Y+12, r25	; 0x0c
    237c:	ad 87       	std	Y+13, r26	; 0x0d
    237e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2380:	6b 85       	ldd	r22, Y+11	; 0x0b
    2382:	7c 85       	ldd	r23, Y+12	; 0x0c
    2384:	8d 85       	ldd	r24, Y+13	; 0x0d
    2386:	9e 85       	ldd	r25, Y+14	; 0x0e
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a ef       	ldi	r20, 0xFA	; 250
    238e:	54 e4       	ldi	r21, 0x44	; 68
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	8f 83       	std	Y+7, r24	; 0x07
    239a:	98 87       	std	Y+8, r25	; 0x08
    239c:	a9 87       	std	Y+9, r26	; 0x09
    239e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <LCD_SEND_DATA_8bit+0x186>
		__ticks = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	3f c0       	rjmp	.+126    	; 0x2440 <LCD_SEND_DATA_8bit+0x204>
	else if (__tmp > 65535)
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	4c f5       	brge	.+82     	; 0x242c <LCD_SEND_DATA_8bit+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <LCD_SEND_DATA_8bit+0x1e6>
    2404:	88 ec       	ldi	r24, 0xC8	; 200
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_SEND_DATA_8bit+0x1d4>
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	69 f7       	brne	.-38     	; 0x2404 <LCD_SEND_DATA_8bit+0x1c8>
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <LCD_SEND_DATA_8bit+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	6f 81       	ldd	r22, Y+7	; 0x07
    242e:	78 85       	ldd	r23, Y+8	; 0x08
    2430:	89 85       	ldd	r24, Y+9	; 0x09
    2432:	9a 85       	ldd	r25, Y+10	; 0x0a
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <LCD_SEND_DATA_8bit+0x210>
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    2454:	6d 96       	adiw	r28, 0x1d	; 29
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <LCD_SEND_NUMBER_4Digits>:

/*-------------------------------------------------------------------------------------*/

void LCD_SEND_NUMBER_4Digits(uint32 Copyu32_NUM)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	00 d0       	rcall	.+0      	; 0x246c <LCD_SEND_NUMBER_4Digits+0x6>
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 83       	std	Y+1, r24	; 0x01
	// displays number 4 digits

	LCD_SEND_DATA_8bit((Copyu32_NUM % 10000) / 1000 + '0');
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	20 e1       	ldi	r18, 0x10	; 16
    247a:	37 e2       	ldi	r19, 0x27	; 39
    247c:	b9 01       	movw	r22, r18
    247e:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    2482:	28 ee       	ldi	r18, 0xE8	; 232
    2484:	33 e0       	ldi	r19, 0x03	; 3
    2486:	b9 01       	movw	r22, r18
    2488:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    248c:	cb 01       	movw	r24, r22
    248e:	80 5d       	subi	r24, 0xD0	; 208
    2490:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_SEND_DATA_8bit>

	LCD_SEND_DATA_8bit((Copyu32_NUM % 1000) / 100 + '0');
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	28 ee       	ldi	r18, 0xE8	; 232
    249a:	33 e0       	ldi	r19, 0x03	; 3
    249c:	b9 01       	movw	r22, r18
    249e:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    24a2:	24 e6       	ldi	r18, 0x64	; 100
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	b9 01       	movw	r22, r18
    24a8:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    24ac:	cb 01       	movw	r24, r22
    24ae:	80 5d       	subi	r24, 0xD0	; 208
    24b0:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_SEND_DATA_8bit>

	LCD_SEND_DATA_8bit((Copyu32_NUM % 100) / 10 + '0');
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	24 e6       	ldi	r18, 0x64	; 100
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	b9 01       	movw	r22, r18
    24be:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    24c2:	2a e0       	ldi	r18, 0x0A	; 10
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	b9 01       	movw	r22, r18
    24c8:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    24cc:	cb 01       	movw	r24, r22
    24ce:	80 5d       	subi	r24, 0xD0	; 208
    24d0:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_SEND_DATA_8bit>

	LCD_SEND_DATA_8bit((Copyu32_NUM % 10) / 1 + '0');
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	2a e0       	ldi	r18, 0x0A	; 10
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	b9 01       	movw	r22, r18
    24de:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    24e2:	80 5d       	subi	r24, 0xD0	; 208
    24e4:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_SEND_DATA_8bit>

}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <LCD_SEND_NUMBER>:

/*-------------------------------------------------------------------------------------*/
void LCD_SEND_NUMBER(uint32 num)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	2e 97       	sbiw	r28, 0x0e	; 14
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	9e 87       	std	Y+14, r25	; 0x0e
    2508:	8d 87       	std	Y+13, r24	; 0x0d
	uint8 i=0,arr[10],j;
    250a:	1a 82       	std	Y+2, r1	; 0x02
	if(num==0)
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	11 f5       	brne	.+68     	; 0x2558 <LCD_SEND_NUMBER+0x66>
	{
		LCD_SEND_DATA_8bit('0');
    2514:	80 e3       	ldi	r24, 0x30	; 48
    2516:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_SEND_DATA_8bit>
    251a:	39 c0       	rjmp	.+114    	; 0x258e <LCD_SEND_NUMBER+0x9c>
	}
	else
	{
			while(num)
			{
				arr[i]=num%10+'0';
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	e8 2f       	mov	r30, r24
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	8d 85       	ldd	r24, Y+13	; 0x0d
    2524:	9e 85       	ldd	r25, Y+14	; 0x0e
    2526:	2a e0       	ldi	r18, 0x0A	; 10
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	b9 01       	movw	r22, r18
    252c:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    2530:	28 2f       	mov	r18, r24
    2532:	20 5d       	subi	r18, 0xD0	; 208
    2534:	ce 01       	movw	r24, r28
    2536:	03 96       	adiw	r24, 0x03	; 3
    2538:	e8 0f       	add	r30, r24
    253a:	f9 1f       	adc	r31, r25
    253c:	20 83       	st	Z, r18
				num/=10;
    253e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2540:	9e 85       	ldd	r25, Y+14	; 0x0e
    2542:	2a e0       	ldi	r18, 0x0A	; 10
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	b9 01       	movw	r22, r18
    2548:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodhi4>
    254c:	cb 01       	movw	r24, r22
    254e:	9e 87       	std	Y+14, r25	; 0x0e
    2550:	8d 87       	std	Y+13, r24	; 0x0d
				i++;
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	8f 5f       	subi	r24, 0xFF	; 255
    2556:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_SEND_DATA_8bit('0');
	}
	else
	{
			while(num)
    2558:	8d 85       	ldd	r24, Y+13	; 0x0d
    255a:	9e 85       	ldd	r25, Y+14	; 0x0e
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	f1 f6       	brne	.-68     	; 0x251c <LCD_SEND_NUMBER+0x2a>
			{
				arr[i]=num%10+'0';
				num/=10;
				i++;
			}
			for(j=i;j>0;j--)
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	11 c0       	rjmp	.+34     	; 0x2588 <LCD_SEND_NUMBER+0x96>
			{
				LCD_SEND_DATA_8bit(arr[j-1]);
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	9c 01       	movw	r18, r24
    256e:	21 50       	subi	r18, 0x01	; 1
    2570:	30 40       	sbci	r19, 0x00	; 0
    2572:	ce 01       	movw	r24, r28
    2574:	03 96       	adiw	r24, 0x03	; 3
    2576:	fc 01       	movw	r30, r24
    2578:	e2 0f       	add	r30, r18
    257a:	f3 1f       	adc	r31, r19
    257c:	80 81       	ld	r24, Z
    257e:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_SEND_DATA_8bit>
			{
				arr[i]=num%10+'0';
				num/=10;
				i++;
			}
			for(j=i;j>0;j--)
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	81 50       	subi	r24, 0x01	; 1
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	88 23       	and	r24, r24
    258c:	61 f7       	brne	.-40     	; 0x2566 <LCD_SEND_NUMBER+0x74>
			{
				LCD_SEND_DATA_8bit(arr[j-1]);
			}
	}
}
    258e:	2e 96       	adiw	r28, 0x0e	; 14
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <LCD_Goto_XY>:

/*-------------------------------------------------------------------------------------*/

void LCD_Goto_XY(uint8 Col, uint8 Row)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <LCD_Goto_XY+0x6>
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <LCD_Goto_XY+0x8>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(Row)
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	3c 83       	std	Y+4, r19	; 0x04
    25b8:	2b 83       	std	Y+3, r18	; 0x03
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	91 05       	cpc	r25, r1
    25c2:	31 f0       	breq	.+12     	; 0x25d0 <LCD_Goto_XY+0x30>
    25c4:	2b 81       	ldd	r18, Y+3	; 0x03
    25c6:	3c 81       	ldd	r19, Y+4	; 0x04
    25c8:	22 30       	cpi	r18, 0x02	; 2
    25ca:	31 05       	cpc	r19, r1
    25cc:	31 f0       	breq	.+12     	; 0x25da <LCD_Goto_XY+0x3a>
    25ce:	09 c0       	rjmp	.+18     	; 0x25e2 <LCD_Goto_XY+0x42>
	{
		case 1:	LCD_SEND_COMMAND(ForceBegin_1Row + Col - 1);
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	81 58       	subi	r24, 0x81	; 129
    25d4:	0e 94 09 10 	call	0x2012	; 0x2012 <LCD_SEND_COMMAND>
    25d8:	04 c0       	rjmp	.+8      	; 0x25e2 <LCD_Goto_XY+0x42>
		break;

		case 2:	LCD_SEND_COMMAND(ForceBegin_2Row + Col - 1);
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	81 54       	subi	r24, 0x41	; 65
    25de:	0e 94 09 10 	call	0x2012	; 0x2012 <LCD_SEND_COMMAND>
		break;
	}
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <LCD_SEND_STRING>:

/*-------------------------------------------------------------------------------------*/

void LCD_SEND_STRING(uint8 *ptr)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <LCD_SEND_STRING+0x6>
    25f6:	0f 92       	push	r0
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	9b 83       	std	Y+3, r25	; 0x03
    25fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2600:	19 82       	std	Y+1, r1	; 0x01
    2602:	0e c0       	rjmp	.+28     	; 0x2620 <LCD_SEND_STRING+0x30>
	while(ptr[i] != '\0')
	{
		LCD_SEND_DATA_8bit(ptr[i]);
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	9b 81       	ldd	r25, Y+3	; 0x03
    260e:	fc 01       	movw	r30, r24
    2610:	e2 0f       	add	r30, r18
    2612:	f3 1f       	adc	r31, r19
    2614:	80 81       	ld	r24, Z
    2616:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_SEND_DATA_8bit>
		i++;
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	8f 5f       	subi	r24, 0xFF	; 255
    261e:	89 83       	std	Y+1, r24	; 0x01
/*-------------------------------------------------------------------------------------*/

void LCD_SEND_STRING(uint8 *ptr)
{
	uint8 i=0;
	while(ptr[i] != '\0')
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	9b 81       	ldd	r25, Y+3	; 0x03
    262a:	fc 01       	movw	r30, r24
    262c:	e2 0f       	add	r30, r18
    262e:	f3 1f       	adc	r31, r19
    2630:	80 81       	ld	r24, Z
    2632:	88 23       	and	r24, r24
    2634:	39 f7       	brne	.-50     	; 0x2604 <LCD_SEND_STRING+0x14>
	{
		LCD_SEND_DATA_8bit(ptr[i]);
		i++;
	}

}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <main>:
#include "UART_Driver/UART_interface.h"
#include <util/delay.h>

/******* Testing UART Driver (Polling, Send & Receive Asynch (Interrupt)) *******/
void main()
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	c3 57       	subi	r28, 0x73	; 115
    264c:	d0 40       	sbci	r29, 0x00	; 0
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    2658:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_init>
	UART_Init();
    265c:	0e 94 ed 05 	call	0xbda	; 0xbda <UART_Init>

	uint8 STR[100];

	UART_Send_String("Hello Terminal ... "); // Using Polling Mechanism
    2660:	80 e6       	ldi	r24, 0x60	; 96
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_Send_String>

	sei();
    2668:	78 94       	sei
	UART_Send_String_Asynch("Youssef Samy\r"); // Asynch API
    266a:	84 e7       	ldi	r24, 0x74	; 116
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_Send_String_Asynch>
	UART_Receive_String_Asynch(STR); // Asynch API
    2672:	ce 01       	movw	r24, r28
    2674:	40 96       	adiw	r24, 0x10	; 16
    2676:	0e 94 78 08 	call	0x10f0	; 0x10f0 <UART_Receive_String_Asynch>
	uint8 i = 0;
    267a:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		LCD_Goto_XY(1,2);
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	62 e0       	ldi	r22, 0x02	; 2
    2680:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_Goto_XY>
		LCD_SEND_NUMBER(i);
    2684:	8f 85       	ldd	r24, Y+15	; 0x0f
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_SEND_NUMBER>
		if(i == 9)
    268e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2690:	89 30       	cpi	r24, 0x09	; 9
    2692:	11 f4       	brne	.+4      	; 0x2698 <main+0x56>
		{
			i = 0;
    2694:	1f 86       	std	Y+15, r1	; 0x0f
    2696:	03 c0       	rjmp	.+6      	; 0x269e <main+0x5c>
		}
		else
		{
			i++;
    2698:	8f 85       	ldd	r24, Y+15	; 0x0f
    269a:	8f 5f       	subi	r24, 0xFF	; 255
    269c:	8f 87       	std	Y+15, r24	; 0x0f
		}
		if(UART_GET_Def_Stop_Flag() == 1)
    269e:	0e 94 3f 08 	call	0x107e	; 0x107e <UART_GET_Def_Stop_Flag>
    26a2:	81 30       	cpi	r24, 0x01	; 1
    26a4:	41 f4       	brne	.+16     	; 0x26b6 <main+0x74>
		{
			LCD_Goto_XY(1,1);
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	61 e0       	ldi	r22, 0x01	; 1
    26aa:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_Goto_XY>
			LCD_SEND_STRING(STR);
    26ae:	ce 01       	movw	r24, r28
    26b0:	40 96       	adiw	r24, 0x10	; 16
    26b2:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_SEND_STRING>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	aa ef       	ldi	r26, 0xFA	; 250
    26bc:	b3 e4       	ldi	r27, 0x43	; 67
    26be:	8b 87       	std	Y+11, r24	; 0x0b
    26c0:	9c 87       	std	Y+12, r25	; 0x0c
    26c2:	ad 87       	std	Y+13, r26	; 0x0d
    26c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    26cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a ef       	ldi	r20, 0xFA	; 250
    26d4:	54 e4       	ldi	r21, 0x44	; 68
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	8f 83       	std	Y+7, r24	; 0x07
    26e0:	98 87       	std	Y+8, r25	; 0x08
    26e2:	a9 87       	std	Y+9, r26	; 0x09
    26e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e6:	6f 81       	ldd	r22, Y+7	; 0x07
    26e8:	78 85       	ldd	r23, Y+8	; 0x08
    26ea:	89 85       	ldd	r24, Y+9	; 0x09
    26ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e8       	ldi	r20, 0x80	; 128
    26f4:	5f e3       	ldi	r21, 0x3F	; 63
    26f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fa:	88 23       	and	r24, r24
    26fc:	2c f4       	brge	.+10     	; 0x2708 <main+0xc6>
		__ticks = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
    2706:	3f c0       	rjmp	.+126    	; 0x2786 <main+0x144>
	else if (__tmp > 65535)
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	78 85       	ldd	r23, Y+8	; 0x08
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	3f ef       	ldi	r19, 0xFF	; 255
    2714:	4f e7       	ldi	r20, 0x7F	; 127
    2716:	57 e4       	ldi	r21, 0x47	; 71
    2718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271c:	18 16       	cp	r1, r24
    271e:	4c f5       	brge	.+82     	; 0x2772 <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	8d 85       	ldd	r24, Y+13	; 0x0d
    2726:	9e 85       	ldd	r25, Y+14	; 0x0e
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	51 e4       	ldi	r21, 0x41	; 65
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	8d 83       	std	Y+5, r24	; 0x05
    2748:	0f c0       	rjmp	.+30     	; 0x2768 <main+0x126>
    274a:	88 ec       	ldi	r24, 0xC8	; 200
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9c 83       	std	Y+4, r25	; 0x04
    2750:	8b 83       	std	Y+3, r24	; 0x03
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	9c 81       	ldd	r25, Y+4	; 0x04
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <main+0x114>
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2768:	8d 81       	ldd	r24, Y+5	; 0x05
    276a:	9e 81       	ldd	r25, Y+6	; 0x06
    276c:	00 97       	sbiw	r24, 0x00	; 0
    276e:	69 f7       	brne	.-38     	; 0x274a <main+0x108>
    2770:	85 cf       	rjmp	.-246    	; 0x267c <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2772:	6f 81       	ldd	r22, Y+7	; 0x07
    2774:	78 85       	ldd	r23, Y+8	; 0x08
    2776:	89 85       	ldd	r24, Y+9	; 0x09
    2778:	9a 85       	ldd	r25, Y+10	; 0x0a
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <main+0x150>
    2796:	9a 83       	std	Y+2, r25	; 0x02
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	70 cf       	rjmp	.-288    	; 0x267c <main+0x3a>

0000279c <__udivmodhi4>:
    279c:	aa 1b       	sub	r26, r26
    279e:	bb 1b       	sub	r27, r27
    27a0:	51 e1       	ldi	r21, 0x11	; 17
    27a2:	07 c0       	rjmp	.+14     	; 0x27b2 <__udivmodhi4_ep>

000027a4 <__udivmodhi4_loop>:
    27a4:	aa 1f       	adc	r26, r26
    27a6:	bb 1f       	adc	r27, r27
    27a8:	a6 17       	cp	r26, r22
    27aa:	b7 07       	cpc	r27, r23
    27ac:	10 f0       	brcs	.+4      	; 0x27b2 <__udivmodhi4_ep>
    27ae:	a6 1b       	sub	r26, r22
    27b0:	b7 0b       	sbc	r27, r23

000027b2 <__udivmodhi4_ep>:
    27b2:	88 1f       	adc	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	5a 95       	dec	r21
    27b8:	a9 f7       	brne	.-22     	; 0x27a4 <__udivmodhi4_loop>
    27ba:	80 95       	com	r24
    27bc:	90 95       	com	r25
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	08 95       	ret

000027c4 <__prologue_saves__>:
    27c4:	2f 92       	push	r2
    27c6:	3f 92       	push	r3
    27c8:	4f 92       	push	r4
    27ca:	5f 92       	push	r5
    27cc:	6f 92       	push	r6
    27ce:	7f 92       	push	r7
    27d0:	8f 92       	push	r8
    27d2:	9f 92       	push	r9
    27d4:	af 92       	push	r10
    27d6:	bf 92       	push	r11
    27d8:	cf 92       	push	r12
    27da:	df 92       	push	r13
    27dc:	ef 92       	push	r14
    27de:	ff 92       	push	r15
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	ca 1b       	sub	r28, r26
    27ee:	db 0b       	sbc	r29, r27
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	09 94       	ijmp

000027fc <__epilogue_restores__>:
    27fc:	2a 88       	ldd	r2, Y+18	; 0x12
    27fe:	39 88       	ldd	r3, Y+17	; 0x11
    2800:	48 88       	ldd	r4, Y+16	; 0x10
    2802:	5f 84       	ldd	r5, Y+15	; 0x0f
    2804:	6e 84       	ldd	r6, Y+14	; 0x0e
    2806:	7d 84       	ldd	r7, Y+13	; 0x0d
    2808:	8c 84       	ldd	r8, Y+12	; 0x0c
    280a:	9b 84       	ldd	r9, Y+11	; 0x0b
    280c:	aa 84       	ldd	r10, Y+10	; 0x0a
    280e:	b9 84       	ldd	r11, Y+9	; 0x09
    2810:	c8 84       	ldd	r12, Y+8	; 0x08
    2812:	df 80       	ldd	r13, Y+7	; 0x07
    2814:	ee 80       	ldd	r14, Y+6	; 0x06
    2816:	fd 80       	ldd	r15, Y+5	; 0x05
    2818:	0c 81       	ldd	r16, Y+4	; 0x04
    281a:	1b 81       	ldd	r17, Y+3	; 0x03
    281c:	aa 81       	ldd	r26, Y+2	; 0x02
    281e:	b9 81       	ldd	r27, Y+1	; 0x01
    2820:	ce 0f       	add	r28, r30
    2822:	d1 1d       	adc	r29, r1
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	ed 01       	movw	r28, r26
    2830:	08 95       	ret

00002832 <_exit>:
    2832:	f8 94       	cli

00002834 <__stop_program>:
    2834:	ff cf       	rjmp	.-2      	; 0x2834 <__stop_program>
